<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QCI.Framework</name>
    </assembly>
    <members>
        <member name="P:QCI.Collections.KeyedList`2.IsReadOnly">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:QCI.Collections.KeyedList`2.Count">
            <summary>
            Returns the number of entries in the KeyedList.
            </summary>
        </member>
        <member name="P:QCI.Collections.KeyedList`2.Item(System.Int32)">
            <summary>
            Get/Set the value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:QCI.Collections.KeyedList`2.Item(`0)">
            <summary>
            Get/Set the value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The associated value.</returns>
        </member>
        <member name="P:QCI.Collections.KeyedList`2.Keys">
            <summary>
            Get an unordered list of keys.
            This collection refers back to the keys in the original Dictionary.
            </summary>
        </member>
        <member name="P:QCI.Collections.KeyedList`2.Values">
            <summary>
            Get an unordered list of values.
            This collection refers back to the values in the original Dictionary.
            </summary>
        </member>
        <member name="P:QCI.Collections.KeyedList`2.OrderedKeys">
            <summary>
            Get the ordered list of keys.
            This is a copy of the keys in the original Dictionary.
            </summary>
        </member>
        <member name="P:QCI.Collections.KeyedList`2.OrderedValues">
            <summary>
            Get the ordered list of values.
            This is a copy of the values in the original Dictionary.
            </summary>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.GetKey(System.Int32)">
            <summary>
            Returns the key at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The key at the index.</returns>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.GetValue(System.Int32)">
            <summary>
            Returns the value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The value at the index.</returns>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.IndexOf(`0)">
            <summary>
            Get the index of a particular key.
            </summary>
            <param name="key">The key to find the index of.</param>
            <returns>The index of the key, or -1 if not found.</returns>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.IndexOf(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Given the key-value pair, find the index.
            </summary>
            <param name="kvp">The key-value pair.</param>
            <returns>The index, or -1 if not found.</returns>
        </member>
        <member name="P:QCI.Collections.KeyedList`2.ObjectTable">
            <summary>
            Gets the Dictionary class backing the KeyedList.
            </summary>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.Clear">
            <summary>
            Clears all entries in the KeyedList.
            </summary>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.ContainsKey(`0)">
            <summary>
            Test if the KeyedList contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>True if the key is found.</returns>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Test if the KeyedList contains the key in the key-value pair.
            </summary>
            <param name="kvp">The key-value pair.</param>
            <returns>True if the key is found.</returns>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.Add(`0,`1)">
            <summary>
            Adds a key-value pair to the KeyedList.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The associated value.</param>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a key-value pair to the KeyedList.
            </summary>
            <param name="kvp">The KeyValuePair instance.</param>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy the entire key-value pairs to the KeyValuePair array, starting
            at the specified index of the target array.  The array is populated 
            as an ordered list.
            </summary>
            <param name="kvpa">The KeyValuePair array.</param>
            <param name="index">The position to start the copy.</param>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.Insert(System.Int32,`0,`1)">
            <summary>
            Insert the key-value at the specified index.
            </summary>
            <param name="index">The zero-based insert point.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.Insert(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Insert the key-value pair at the specified index location.
            </summary>
            <param name="index">The key.</param>
            <param name="kvp">The value.</param>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.Remove(`0)">
            <summary>
            Remove the entry.
            </summary>
            <param name="key">The key identifying the key-value pair.</param>
            <returns>True if removed.</returns>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove the key in the specified KeyValuePair instance.  The Value
            property is ignored.
            </summary>
            <param name="kvp">The key-value identifying the entry.</param>
            <returns>True if removed.</returns>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.RemoveAt(System.Int32)">
            <summary>
            Remove the entry at the specified index.
            </summary>
            <param name="index">The index to the entry to be removed.</param>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.TryGetValue(`0,`1@)">
            <summary>
            Attempt to get the value, given the key, without throwing an exception if not found.
            </summary>
            <param name="key">The key indentifying the entry.</param>
            <param name="val">The value, if found.</param>
            <returns>True if found.</returns>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an ordered System.Collections KeyValuePair objects.
            </summary>
        </member>
        <member name="M:QCI.Collections.KeyedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TItem}}#GetEnumerator">
            <summary>
            Returns an ordered KeyValuePair enumerator.
            </summary>
        </member>
        <member name="T:QCI.Collections.MergeSort">
            <summary>
            Provides stable array sorting using the Merge Sort algorithm.
            This implementation is slower than Array.Sort but provides stable sorting so the relative order of records with equal keys is maintained.
            </summary>
        </member>
        <member name="M:QCI.Collections.MergeSort.Sort``1(``0[])">
            <summary>
            Sorts the elements in an entire <see cref="T:System.Array" /> using the <see cref="T:System.IComparable{T}" /> generic interface implementation of each element of the <see cref="T:System.Array" />.
            </summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
            <exception cref="T:System.InvalidOperationException">One or more elements in array do not implement the <see cref="T:System.IComparable{T}" /> generic interface.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
        </member>
        <member name="M:QCI.Collections.MergeSort.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer{T}" /> generic interface.
            </summary>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable{T}" /> generic interface implementation of each element.</param>
            <exception cref="T:System.ArgumentException">The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.InvalidOperationException">comparer is null, and one or more elements in array do not implement the <see cref="T:System.IComparable{T}" /> generic interface.</exception>
        </member>
        <member name="M:QCI.Collections.MergeSort.Sort``1(``0[],System.Comparison{``0})">
            <summary>
            Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison{T}" />.
            </summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
            <param name="comparison">The <see cref="T:System.Comparison{T}" /> to use when comparing elements.</param>
            <exception cref="T:System.ArgumentNullException">array is null.-or-comparison is null.</exception>
            <exception cref="T:System.ArgumentException">The implementation of comparison caused an error during the sort. For example, comparison might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:QCI.Collections.MergeSort.Sort``1(``0[],System.Int32,System.Int32)">
            <summary>
            Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the <see cref="T:System.IComparable{T}" /> generic interface implementation of each element of the <see cref="T:System.Array" />.
            </summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <exception cref="T:System.ArgumentException">index and length do not specify a valid range in array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than the lower bound of array.-or-length is less than zero.</exception>
            <exception cref="T:System.InvalidOperationException">One or more elements in array do not implement the <see cref="T:System.IComparable{T}" /> generic interface.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
        </member>
        <member name="M:QCI.Collections.MergeSort.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer{T}" /> generic interface.
            </summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable{T}" /> generic interface implementation of each element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than the lower bound of array.-or-length is less than zero.</exception>
            <exception cref="T:System.ArgumentException">index and length do not specify a valid range in array. -or-The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.InvalidOperationException">comparer is null, and one or more elements in array do not implement the <see cref="T:System.IComparable{T}" /> generic interface.</exception>
        </member>
        <member name="M:QCI.Collections.MergeSort.Sort``2(``0[],``1[])">
            <summary>
            Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable{TKey}" /> generic interface implementation of each key.
            </summary>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in keys, or null to sort only keys.</param>
            <exception cref="T:System.ArgumentNullException">keys is null.</exception>
            <exception cref="T:System.InvalidOperationException">One or more elements in the keys<see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable{TKey}" /> generic interface.</exception>
            <exception cref="T:System.ArgumentException">items is not null, and the length of keys does not match the length of items.</exception>
        </member>
        <member name="M:QCI.Collections.MergeSort.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer{TKey}" /> generic interface.
            </summary>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in keys, or null to sort only keys.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{TKey}" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable{TKey}" /> generic interface implementation of each element.</param>
            <exception cref="T:System.ArgumentNullException">keys is null.</exception>
            <exception cref="T:System.InvalidOperationException">comparer is null, and one or more elements in the keys<see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable{TKey}" /> generic interface.</exception>
            <exception cref="T:System.ArgumentException">items is not null, and the length of keys does not match the length of items.-or-The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:QCI.Collections.MergeSort.Sort``2(``0[],``1[],System.Comparison{``0})">
            <summary>
            Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) using the specified <see cref="T:System.Comparison{TKey}" />.
            </summary>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in keys, or null to sort only keys.</param>
            <param name="comparison">The <see cref="T:System.Comparison{TKey}" /> to use when comparing elements.</param>
            <exception cref="T:System.ArgumentNullException">keys is null.-or-comparison is null.</exception>
            <exception cref="T:System.ArgumentException">items is not null, and the length of keys does not match the length of items.-or-The implementation of comparison caused an error during the sort. For example, comparison might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:QCI.Collections.MergeSort.Sort``2(``0[],``1[],System.Int32,System.Int32)">
            <summary>
            Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable{TKey}" /> generic interface implementation of each key.
            </summary>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in keys, or null to sort only keys.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <exception cref="T:System.ArgumentNullException">keys is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than the lower bound of keys.-or-length is less than zero.</exception>
            <exception cref="T:System.InvalidOperationException">One or more elements in the keys<see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable{TKey}" /> generic interface.</exception>
            <exception cref="T:System.ArgumentException">items is not null, and the length of keys does not match the length of items.-or-index and length do not specify a valid range in the keys<see cref="T:System.Array" />.-or-items is not null, and index and length do not specify a valid range in the items<see cref="T:System.Array" />.</exception>
        </member>
        <member name="M:QCI.Collections.MergeSort.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains 
            the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> 
            using the specified <see cref="T:System.Collections.Generic.IComparer{TKey}" /> generic interface.</summary>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort.</param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in keys, or null to sort only keys.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{TKey}" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable{TKey}" /> generic interface implementation of each element.</param>
            <exception cref="T:System.ArgumentNullException">keys is null.</exception>
            <exception cref="T:System.InvalidOperationException">comparer is null, and one or more elements in the keys<see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable{TKey}" /> generic interface.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than the lower bound of keys.-or-length is less than zero.</exception>
            <exception cref="T:System.ArgumentException">items is not null, and the length of keys does not match the length of items.-or-index and length do not specify a valid range in the keys<see cref="T:System.Array" />.-or-items is not null, and index and length do not specify a valid range in the items<see cref="T:System.Array" />. -or-The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="T:QCI.Compression.GZip">
            <summary>
            Provides utility methods to easily compress and decompress data using the GZip algorithm.
            </summary>
        </member>
        <member name="M:QCI.Compression.GZip.Compress(System.Byte[])">
            <summary>
            Compresses a byte array using the GZip algorithm.
            </summary>
            <param name="data">Data to be compressed.</param>
            <returns>Compressed copy of the passed data.</returns>
        </member>
        <member name="M:QCI.Compression.GZip.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses a block of bytes using the GZip algorithm.
            </summary>
            <param name="buffer">Byte array containing data to be compressed.</param>
            <param name="offset">Location within the array to begin reading.</param>
            <param name="count">Number of bytes to compress.</param>
            <returns>Compressed copy of the data in the specified range.</returns>
        </member>
        <member name="M:QCI.Compression.GZip.Decompress(System.Byte[])">
            <summary>
            Decompresses a byte array previously compressed using the GZip algorithm.
            </summary>
            <param name="data">Compressed data to be decompressed.</param>
            <returns>Decompressed copy of the passed data.</returns>
        </member>
        <member name="M:QCI.Compression.GZip.Decompress(System.Byte[],System.Int32)">
            <summary>
            Decompresses a byte array previously compressed using the GZip algorithm.
            </summary>
            <param name="data">Compressed data to be decompressed.</param>
            <param name="chunkSize">The number of bytes of data to decompressed at a time.</param>
            <returns>Decompressed copy of the passed data.</returns>
        </member>
        <member name="M:QCI.Compression.GZip.CompressFile(System.String,System.String)">
            <summary>
            Compresses a file using the GZip algorithm and saves the results as a new file.
            </summary>
            <param name="inputFile">Path of the file to compress.</param>
            <param name="outputFile">Destination path for the new compressed file.</param>
        </member>
        <member name="M:QCI.Compression.GZip.DecompressFile(System.String,System.String)">
            <summary>
            Decompresses a file previously compressed using the GZip algorithm and saves the results as new file.
            </summary>
            <param name="inputFile">Path of the compressed file.</param>
            <param name="outputFile">Destination path for the new decompressed file.</param>
        </member>
        <member name="P:QCI.Configuration.AppSettings.Emailer_UseSendGrid">
            <summary>
            Toggles whether or not the application should use the Email Service SendGrid
            </summary>
        </member>
        <member name="P:QCI.Configuration.AppSettings.Emailer_UseSendinBlue">
            <summary>
            Toggles whether or not the application should use the Email Service SendinBlue
            </summary>
        </member>
        <member name="P:QCI.Configuration.AppSettings.Emailer_SendGridApiKey">
            <summary>
            Gets the SendGrid Api Key to connect to their services
            </summary>
        </member>
        <member name="P:QCI.Configuration.AppSettings.Emailer_SendinBlueApiKey">
            <summary>
            Gets the SendinBlue Api Key to connect to their services
            </summary>
        </member>
        <member name="P:QCI.Configuration.AppSettings.ReportingServices_RequestTimeout">
            <summary>
            Gets the length of time in seconds that the reporting service
            should wait before timing out
            </summary>
        </member>
        <member name="P:QCI.Configuration.AppSettings.ReportingServices_RootFolder">
            <summary>
            Gets the root folder to be used in determining where to store
            reports from the reporting service
            </summary>
        </member>
        <member name="P:QCI.Configuration.AppSettings.ReportingServices_WebServiceUrl">
            <summary>
            Gets the url of the reporting service web service
            </summary>
        </member>
        <member name="P:QCI.Configuration.AppSettings.ReportingServices_Username">
            <summary>
            Gets the username to create credentials for the reporting service
            </summary>
        </member>
        <member name="P:QCI.Configuration.AppSettings.ReportingServices_Password">
            <summary>
            Gets the password to create credentials for the reporting service
            </summary>
        </member>
        <member name="M:QCI.Configuration.AppSettings.GetRequiredValue``1(System.String)">
            <summary>
            Retrieves the value of a required setting with a given name.
            An exception is thrown if the setting is not found.
            </summary>
            <typeparam name="T">Type of value to return.</typeparam>
            <param name="settingName">Name of the setting to retrieve.</param>
            <returns>The value of the given setting found in the configuration file.</returns>
        </member>
        <member name="M:QCI.Configuration.AppSettings.GetRequiredValue``1(System.String,System.Func{System.String,``0})">
            <summary>
            Retrieves the value of a required setting with a given name and uses a specified function to transform the value.
            An exception is thrown if the setting is not found.
            </summary>
            <typeparam name="T">Type of value to return.</typeparam>
            <param name="settingName">Name of the setting to retrieve.</param>
            <param name="transformFunction">Function that will be called to transform the string value into the final value.</param>
            <returns>The value of the given setting found in the configuration file.</returns>
        </member>
        <member name="M:QCI.Configuration.AppSettings.GetOptionalValue``1(System.String,``0)">
            <summary>
            Retrieves the value of an optional setting with a given name, returning a default value if not found.        
            </summary>
            <typeparam name="T">Type of value to return.</typeparam>
            <param name="settingName">Name of the setting to retrieve.</param>
            <param name="defaultValue">Default value to return if the setting is not found.</param>
            <returns>The value of the given setting found in the configuration file.</returns>
        </member>
        <member name="M:QCI.Configuration.AppSettings.GetOptionalValue``1(System.String,``0,System.Func{System.String,``0})">
            <summary>
            Retrieves the value of an optional setting with a given name, returning a default value if not found.
            Uses a specified function to transform the string value to the final setting value.
            </summary>
            <typeparam name="T">Type of value to return.</typeparam>
            <param name="settingName">Name of the setting to retrieve.</param>
            <param name="defaultValue">Default value to return if the setting is not found.</param>
            <param name="transformFunction">Function that will be called to transform the string value into the final value.</param>
            <returns>The value of the given setting found in the configuration file.</returns>
        </member>
        <member name="M:QCI.Configuration.AppSettings.ResolveAppSettingsVariables(System.String)">
            <summary>
            Replaces each MSBuild-style variable (like '$(ProductSKU)') in the passed string with value from the AppSetting with the corresponding name.
            </summary>
            <param name="input">Value to be processed</param>
            <returns>Input value with all variables replaced with their AppSetting value equivalents.</returns>
        </member>
        <member name="T:QCI.Framework.Configuration.ConfigXmlReader">
            <remarks>
            Adapted from System.Configuration.ConfigXmlReader in .NET Framework.
            </remarks>
        </member>
        <member name="T:QCI.Framework.Configuration.PublisherSettings">
            <summary>
            Abstract class providing core publisher settings needed by the Exception Management engine.
            </summary>
        </member>
        <member name="P:QCI.Framework.Configuration.PublisherSettings.Enabled">
            <summary>
            Get a value indicating if this publisher is enabled.
            </summary>
        </member>
        <member name="P:QCI.Framework.Configuration.PublisherSettings.AssemblyName">
            <summary>
            Get the assembly name containing this publisher.
            </summary>
        </member>
        <member name="P:QCI.Framework.Configuration.PublisherSettings.TypeName">
            <summary>
            Gets the name of the type that defines this publisher.
            </summary>
        </member>
        <member name="T:QCI.Framework.Configuration.CustomPublisherSettings">
            <summary>
            Provides configuration settings for a custom publisher.
            </summary>
        </member>
        <member name="P:QCI.Framework.Configuration.CustomPublisherSettings.Name">
            <summary>
            Name of the custom publisher.
            </summary>
        </member>
        <member name="P:QCI.Framework.Configuration.CustomPublisherSettings.AssemblyName">
            <summary>
            Get the assembly name containing this publisher.
            </summary>
        </member>
        <member name="P:QCI.Framework.Configuration.CustomPublisherSettings.TypeName">
            <summary>
            Gets the name of the type that defines this publisher.
            </summary>
        </member>
        <member name="P:QCI.Framework.Configuration.CustomPublisherSettings.Parameters">
            <summary>
            Gets a name-value collection of additional parameters specified for this publisher.
            </summary>
        </member>
        <member name="M:QCI.Framework.Configuration.CustomPublisherSettings.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Adds unrecognized attributes to the Parameters collection.
            </summary>
        </member>
        <member name="M:QCI.Framework.Configuration.CustomPublisherSettings.PostDeserialize">
            <summary>
            Called after deserialized.
            </summary>
        </member>
        <member name="T:QCI.Conversions.Serializer">
            <summary>
            Provides utility methods to easily serialize and deserialize objects.
            </summary>
        </member>
        <member name="M:QCI.Conversions.Serializer.SerializeToXml``1(``0)">
            <summary>
            Serializes a object into an xml string using a <see cref="T:XmlSerializer"/>.
            </summary>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:QCI.Conversions.Serializer.DeserializeFromXml``1(System.String)">
            <summary>
            Deserializes an xml string into an object using a <see cref="T:XmlSerializer"/>.
            </summary>
            <param name="xml">XML string to deserialize.</param>
        </member>
        <member name="M:QCI.Conversions.Serializer.SerializeToByteArray``1(``0)">
            <summary>
            Serializes an object into a byte array using a <see cref="T:BinaryFormatter"/>.
            </summary>        
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:QCI.Conversions.Serializer.DeserializeFromByteArray``1(System.Byte[])">
            <summary>
            Deserializes a byte array into an object using a <see cref="T:BinaryFormatter"/>.
            </summary>
            <param name="bytes">Array of bytes to deserialize.</param>
        </member>
        <member name="T:QCI.Conversions.TypeConvert">
            <summary>
            Provides more advanced type converstion than the <see cref="T:System.Convert"/> class
            for types commonly used with a database.
            </summary>
            <remarks>
            Adapted from logic in System.Data.Linq.DBConvert class.
            </remarks>
        </member>
        <member name="M:QCI.Conversions.TypeConvert.TryChangeType``1(System.Object,``0@)">
            <summary>
            Attempts to convert a value to an another type. 
            The return value indicates whether the operation succeeded.
            </summary>
            <typeparam name="T">Type to which to convert the value.</typeparam>
            <param name="value">Value to be converted.</param>
            <param name="result">Resulting value after conversion; or default value of the return type if conversion failed.</param>
            <returns>True if conversion succeeded. False if conversion failed.</returns>
        </member>
        <member name="M:QCI.Conversions.TypeConvert.TryChangeType(System.Object,System.Type,System.Object@)">
            <summary>
            Attempts to convert a value to an another type. 
            The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="targetType">Type to which to convert the value.</param>
            <param name="result">Resulting value after conversion; or null if conversion failed.</param>
            <returns>True if conversion succeeded. False if conversion failed.</returns>
        </member>
        <member name="M:QCI.Conversions.TypeConvert.ChangeType``1(System.Object)">
            <summary>
            Converts an <see cref="T:Object"/> to an equivalent value in a different type.
            </summary>
            <typeparam name="T">Type to which to convert the value.</typeparam>
            <param name="value">Value to be converted.</param>
            <returns>The original value converted to the method's return type.</returns>
        </member>
        <member name="M:QCI.Conversions.TypeConvert.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an <see cref="T:Object"/> with the specified <see cref="T:Type"/> and whose value 
            is equivalent to the specified object.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="targetType">Type to which to convert the value.</param>
            <returns>The original value converted to the specified target type.</returns>
            <remarks>Taken from System.Data.Linq.DBConvert class.</remarks>
        </member>
        <member name="T:QCI.DataAccess.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable, 
            best practices for common uses of System.Data.SqlClient namespace.
            </summary>
        </member>
        <member name="P:QCI.DataAccess.SqlHelper.ConnectionString">
            <summary>
            Gets or sets the default connection string to use with methods in this class 
            that do not explicitly specify one.
            NOTE: This property can only be set one time to prevent problems in
            multi-threaded environments.
            </summary>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String)">
            <summary>
            Executes a stored procedure (that returns no result set and takes 
            no parameters) in the database specified by the default connection string.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Int32)">
            <summary>
            Executes a stored procedure (that returns no result set and takes 
            no parameters) in the database specified by the default connection string.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns no result set) in the database specified 
            by the default connection string, using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns no result set) in the database specified 
            by the default connection string, using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns no result set and takes no parameters) against the database specified by
            the default connection string. 
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns no result set) against the database specified by the default connection string 
            using the provided parameters.
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Executes a stored procedure (that returns no result set and takes 
            no parameters) in the database specified by the connection string.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Int32)">
            <summary>
            Executes a stored procedure (that returns no result set and takes 
            no parameters) in the database specified by the connection string.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns no result set) in the database specified 
            by the connection string, using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns no result set) in the database specified 
            by the connection string, using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns no result set and takes no parameters) against the database specified by 
            the connection string.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns no result set) against the database specified by the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns no result set) against the database specified by the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Executes a stored procedure (that returns no result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Executes a stored procedure (that returns no result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns no result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns no result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns no result set and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns no result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns no result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Executes a stored procedure (that returns no result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Int32)">
            <summary>
            Executes a stored procedure (that returns no result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns no result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns no result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns no result set and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns no result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">An array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns no result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">An array of SqlParameters used to execute the command.</param>
            <returns>An int representing the number of rows affected by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the default connection string.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Int32)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the default connection string.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the default connection string using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the default connection string using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the default connection string.
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the default connection string using the provided parameters.
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String,System.String)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the connection string.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String,System.String,System.Int32)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the connection string.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the connection string using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the connection string using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataSet containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the default connection string.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String,System.Int32)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the default connection string.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the default connection string using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the default connection string using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the default connection string.
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the specified command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the default connection string using the provided parameters.
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the specified command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String,System.String)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the connection string.
            </summary>
            <param name="connectionString">Valid connection string for a SqlConnection.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String,System.String,System.Int32)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the connection string.
            </summary>
            <param name="connectionString">Valid connection string for a SqlConnection.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the connection string using the provided parameters.
            </summary>
            <param name="connectionString">Valid connection string for a SqlConnection.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the connection string using the provided parameters.
            </summary>
            <param name="connectionString">Valid connection string for a SqlConnection.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the connection string.
            </summary>
            <param name="connectionString">Valid connection string for a SqlConnection.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid connection string for a SqlConnection.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid connection string for a SqlConnection.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to be passed to the stored procedure.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to be passed to the stored procedure.</param>
            <returns>A DataTable containing the results generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A DataTable containing the result set generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A DataTable containing the result set generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">An array of SqlParameters used to be passed to the stored procedure.</param>
            <returns>A DataTable containing the result set generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">An array of SqlParameters used to be passed to the stored procedure.</param>
            <returns>A DataTable containing the result set generated by the stored procedure.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A DataTable containing the results generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the default connection string.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String,System.Int32)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the default connection string.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the default connection string using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the default connection string using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the default connection string.
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the default connection string.
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String,System.String)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the connection string.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String,System.String,System.Int32)">
            <summary>
            Executes a stored procedure (that returns a result set and takes no parameters) against the against the database 
            specified in the connection string.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the connection string using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure (that returns a result set) against the against the database 
            specified in the connection string using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlTransaction,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlTransaction,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>The first row in the result set generated by the command, or null if no row exists.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the default connection string. 
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the default connection string. 
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the database specified in the default connection string 
            using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the database specified in the default connection string 
            using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the default connection string.
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the default connection string using the provided parameters.
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set and takes no parameters) against the database 
            specified in the connection string. 
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set and takes no parameters) against the database 
            specified in the connection string. 
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the database 
            specified in the connection string using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the database 
            specified in the connection string using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>a SqlDataReader containing the result set generated by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Executes a stored procedure via s SqlCommand (that returns a result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via s SqlCommand (that returns a result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via s SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via s SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>a SqlDataReader containing the result set generated by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>a SqlDataReader containing the result set generated by the command</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>A SqlDataReader containing the result set generated by the command.</returns>
        </member>
        <member name="T:QCI.DataAccess.SqlHelper.SqlConnectionOwnership">
            <summary>
            Indicates the owner of the connection so that we can set the appropriate 
            CommandBehavior when calling ExecuteReader().
            </summary>
        </member>
        <member name="F:QCI.DataAccess.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Indicates the connection is owned and managed by SqlHelper.</summary>
        </member>
        <member name="F:QCI.DataAccess.SqlHelper.SqlConnectionOwnership.External">
            <summary>Indicates the connection is owned and managed by the caller.</summary>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set and takes no parameters) against 
            the database specified in the default connection string. 
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set and takes no parameters) against 
            the database specified in the default connection string. 
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the database specified 
            in the default connection string using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the database specified 
            in the default connection string using the provided parameters.
            </summary>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set and takes no parameters) against the database specified in 
            the default connection string. 
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set and takes no parameters) against the database specified in 
            the default connection string using the provided parameters. 
            </summary>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set and takes no parameters) against 
            the database specified in the connection string. 
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set and takes no parameters) against 
            the database specified in the connection string. 
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the database specified 
            in the connection string using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the database specified 
            in the connection string using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">Valid database connection string.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the specified SqlConnection.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Int32)">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the specified SqlTransaction.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a stored procedure via a SqlCommand (that returns a 1x1 result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="spName">Name of the stored procedure to execute.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a 1x1 result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An object containing the value in the 1x1 result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command (using "FOR XML AUTO").</param>
            <returns>An XmlReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlConnection. 
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command (using "FOR XML AUTO").</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>An XmlReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command (using "FOR XML AUTO").</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An XmlReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <param name="conn">Initialized SqlConnection object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command (using "FOR XML AUTO").</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An XmlReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command (using "FOR XML AUTO").</param>
            <returns>An XmlReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Executes a SqlCommand (that returns a result set and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command (using "FOR XML AUTO").</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <returns>An XmlReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command (using "FOR XML AUTO").</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An XmlReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Int32,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a SqlCommand (that returns a result set) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="trans">Initialized SqlTransaction object.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command (using "FOR XML AUTO").</param>
            <param name="timeout">Number of seconds to wait before execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
            <returns>An XmlReader containing the result set generated by the command.</returns>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Prepares the provided SqlCommand for execution with the default timeout period.
            The connection is opened if necessary.
            </summary>
            <param name="command">The SqlCommand to be prepared.</param>
            <param name="conn">A valid SqlConnection on which to execute this command.</param>
            <param name="trans">A valid SqlTransaction object, or 'null'.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters to be associated with the command or 'null' if no parameters are required.</param>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Int32)">
            <summary>
            Prepares the provided SqlCommand for execution with a specific timeout period.
            The connection is opened if necessary.
            </summary>
            <param name="command">The SqlCommand to be prepared.</param>
            <param name="conn">A valid SqlConnection on which to execute this command.</param>
            <param name="trans">A valid SqlTransaction object, or 'null'.</param>
            <param name="type">The CommandType (stored procedure, text, etc.) of the command text.</param>
            <param name="text">Stored procedure name or T-SQL command.</param>
            <param name="parameters">Array of SqlParameters to be associated with the command or 'null' if no parameters are required.</param>
            <param name="timeout">Number of seconds to wait before command execution is terminated.  A value of zero (infinite timeout) is not allowed.</param>
        </member>
        <member name="M:QCI.DataAccess.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            A value of DBNull will be assigned to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">Command to which the parameters will be added.</param>
            <param name="parameters">Array of SqlParameters used to execute the command.</param>
        </member>
        <member name="T:QCI.Diagnostics.EventLogHelper">
            <summary>
            Provides utility methods to interact with Windows Event Logs. 
            Works around a limitation with System.Diagnostics.EventLog class that causes exceptions when checking and 
            creating event sources due to the new security restrictions added to Vista/Win2008.
            </summary>
            <remarks>
            References:
            - EventLog Key: http://msdn.microsoft.com/en-us/library/aa363648(VS.85).aspx
            - Event Sources: http://msdn.microsoft.com/en-us/library/aa363661(VS.85).aspx
            </remarks>
        </member>
        <member name="M:QCI.Diagnostics.EventLogHelper.SourceExists(System.String)">
            <summary>
            Determines whether an event source is registered on the local computer.       
            The Application event log is checked first for the source and must be accessable or an exception is thrown.
            No exception is thrown if a any other log cannot be accessed due to permissions (the Security log in particular).
            </summary>
            <param name="sourceName">The name of the event source.</param>
            <returns>true if the event source is registered on the local computer; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Diagnostics.EventLogHelper.SourceExists(System.String,System.String)">
            <summary>
            Determines whether an event source is registered on the local computer
            The specified event log is checked first for the source and must be accessable or an exception is thrown.
            No exception is thrown if a any other log cannot be accessed due to permissions (the Security log in particular).
            </summary>
            <param name="logName">The name of the log file to use.</param>
            <param name="sourceName">The name of the event source.</param>
            <returns>true if the event source is registered on the local computer; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Diagnostics.EventLogHelper.CreateEventSource(System.String)">
            <summary>
            Creates a valid event source for writing entries to the Application log on the local computer.
            This method cannot create new custom logs on the local computer; use <see cref="M:System.Diagnostics.EventLog.CreateEventSource"/> if this is needed.
            </summary>
            <param name="sourceName">The source name to be registered on the local computer.</param>
            <remarks>
            The source cannot already exists on the local computer.
            The source name cannot match an existing event log name.
            The full registry key path to the source name cannot be longer than 254 characters.
            </remarks>
        </member>
        <member name="M:QCI.Diagnostics.EventLogHelper.CreateEventSource(System.String,System.String)">
            <summary>
            Creates a valid event source for writing entries to an existing log on the local computer.
            This method cannot create new custom logs on the local computer; use <see cref="M:System.Diagnostics.EventLog.CreateEventSource"/> if this is needed.
            </summary>
            <param name="sourceName">The source name to be registered on the local computer.</param>
            <param name="logName">The name of the log the source's entries will be written to. Possible values include: Application, System, or a custom event log already created.</param>
            <remarks>
            The source cannot already exists on the local computer.
            The source name cannot match an existing event log name.
            The full registry key path to the source name cannot be longer than 254 characters.
            </remarks>
        </member>
        <member name="M:QCI.Diagnostics.EventLogHelper.EventLog_SkipRegPatch">
            <remarks>
            Taken from System.Diagnostics.EventLog class using .NET Reflector
            </remarks>
        </member>
        <member name="M:QCI.Diagnostics.EventLogHelper.EventLog_SetSpecialLogRegValues(Microsoft.Win32.RegistryKey,System.String)">
            <remarks>
            Taken from System.Diagnostics.EventLog class using .NET Reflector
            </remarks>
        </member>
        <member name="M:QCI.Diagnostics.EventLogHelper.EventLog_GetDllPath">
            <remarks>
            Taken from System.Diagnostics.EventLog class using .NET Reflector
            </remarks>
        </member>
        <member name="T:QCI.Diagnostics.EventLogHelper.SharedUtils">
            <remarks>
            methods taken from System.Diagnostics.SharedUtils class using .NET Reflector.
            </remarks>
        </member>
        <member name="M:QCI.Diagnostics.EventLogHelper.SharedUtils.GetLocalBuildDirectory">
            <remarks>
            Taken from System.Diagnostics.SharedUtils class using .NET Reflector.
            </remarks>
        </member>
        <member name="M:QCI.Diagnostics.EventLogHelper.SharedUtils.CreateSafeWin32Exception(System.Int32)">
            <remarks>
            Taken from System.Diagnostics.SharedUtils class using .NET Reflector.
            </remarks>
        </member>
        <member name="T:QCI.Diagnostics.EventLogHelper.NativeMethods">
            <remarks>
            Taken from Microsoft.Win32.NativeMethods class using .NET Reflector.
            </remarks>
        </member>
        <member name="M:QCI.Diagnostics.EventLogHelper.NativeMethods.GetRequestedRuntimeInfo(System.String,System.String,System.String,System.UInt32,System.UInt32,System.Text.StringBuilder,System.Int32,System.UInt32@,System.Text.StringBuilder,System.Int32,System.UInt32@)">
            <remarks>
            Taken from Microsoft.Win32.NativeMethods class using .NET Reflector.
            </remarks>
        </member>
        <member name="T:QCI.Encryption.CryptoService">
            <summary>
            Provides utility methods to more easily use the symmetric cryptographic algorithms.
            </summary>
        </member>
        <member name="M:QCI.Encryption.CryptoService.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a string using Triple-DES and a password.
            This method should not be used for high volume encryption.
            If many cryptographic operations are required, use an instance of the <see cref="T:CryptoService"/> instead.
            </summary>
            <param name="value">String balue to be encrypted.</param>
            <param name="password">Password to be used for Key and IV. Must be at least 8 characters in length.</param>
            <returns>Returns encrypted Base64 String</returns>
        </member>
        <member name="M:QCI.Encryption.CryptoService.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a string previously encrypted with a password using <see cref="M:Encrypt"/>.
            This method should not be used for high volume encryption.
            If many cryptographic operations are required, use an instance of the <see cref="T:CryptoService"/> instead.
            </summary>
            <param name="value">The encrypted string to decrypt.</param>
            <param name="password">Password to be used for Key and IV. Must be at least 8 characters in length.</param>
            <returns>The result from base-64 decoding, then decrypting the passed string value.</returns>
        </member>
        <member name="M:QCI.Encryption.CryptoService.GenerateSalt(System.Int32)">
            <summary>
            Creates a byte array filled with a cryptographically strong sequence of random values
            for use as salt for other cryptographic operations.
            A minimum length of 16 bytes is recommended for salt values.
            </summary>
            <param name="length">Length of the byte array to be returned.</param>
            <returns>Byte array filled with random values.</returns>
        </member>
        <member name="M:QCI.Encryption.CryptoService.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:CryptoService"/> to use Triple-DES with a secure password.
            </summary>
            <param name="password">Secret password to use to generate the Key and IV.</param>
        </member>
        <member name="M:QCI.Encryption.CryptoService.#ctor(QCI.Encryption.EncryptionAlgorithm,System.String)">
            <summary>
            Creates a new instance of <see cref="T:CryptoService"/> to use the specified encryption with a secure password.
            </summary>
            <param name="algorithm">Cryptographic algorithm to use.</param>
            <param name="password">Secret password to use to generate the Key and IV.</param>
        </member>
        <member name="M:QCI.Encryption.CryptoService.#ctor(QCI.Encryption.EncryptionAlgorithm,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm, 
            secret key, and initialization vector (IV).
            </summary>
            <param name="algorithm">Cryptographic algorithm to use.</param>
            <param name="key">Secret key for the encryption algorithm.</param>
            <param name="initVector">Initialization vector (IV) for the encryption algorithm.</param>
        </member>
        <member name="M:QCI.Encryption.CryptoService.#ctor(QCI.Encryption.EncryptionAlgorithm,System.String,System.String)">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm, 
            base-64 encoded secret key, and base-64 encoded initialization vector (IV).
            </summary>
            <param name="algorithm">Cryptographic algorithm to use.</param>
            <param name="key">Secret key for the encryption algorithm (encoded as a base-64 string).</param>
            <param name="initVector">Initialization vector (IV) for the encryption algorithm (encoded as a base-64 string).</param>
        </member>
        <member name="M:QCI.Encryption.CryptoService.#ctor(QCI.Encryption.EncryptionAlgorithm)">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm.
            </summary>
            <param name="algorithm">Cryptographic algorithm to use for data encryption.</param>
        </member>
        <member name="P:QCI.Encryption.CryptoService.Key">
            <summary>
            Gets or sets the secret key used for encryption operation.
            </summary>
        </member>
        <member name="P:QCI.Encryption.CryptoService.IV">
            <summary>
            Gets or sets the initialization vector (IV) used during encryption.
            </summary>
        </member>
        <member name="M:QCI.Encryption.CryptoService.Encrypt(System.String)">
            <summary>
            Encrypts a string using the current secret key and initialization vector (IV) of this <see cref="T:CryptoService"/> instance.
            </summary>
            <param name="value">The string to encrypt.</param>
            <returns>The results from encrypting and base-64 encoding the original string.</returns>
        </member>
        <member name="M:QCI.Encryption.CryptoService.Encrypt(System.Byte[])">
            <summary>
            Encrypts a byte array using the current secret key and initialization vector (IV) of this <see cref="T:CryptoService"/> instance.
            </summary>
            <param name="value">The data value to encrypt.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:QCI.Encryption.CryptoService.Decrypt(System.String)">
            <summary>
            Decrypts a string previously encrypted using the current secret key 
            and initialization vector (IV) of this <see cref="T:CryptoService"/> instance.
            </summary>
            <param name="value">The encrypted string to decrypt.</param>
            <returns>The result from base-64 decoding, then decrypting the passed string value.</returns>
        </member>
        <member name="M:QCI.Encryption.CryptoService.Decrypt(System.Byte[])">
            <summary>
            Decrypts a byte array previously encrypted using the current secret key 
            and initialization vector (IV) of this <see cref="T:CryptoService"/> instance.
            </summary>
            <param name="value">The data value to decrypt.</param>
            <returns>The decrypted data.</returns>
        </member>
        <member name="M:QCI.Encryption.CryptoService.Dispose">
            <summary>
            Clears the Key and IV values from memory and release used resources.
            </summary>
        </member>
        <member name="M:QCI.Encryption.CryptoService.Dispose(System.Boolean)">
            <summary>
            Clears the Key and IV values from memory and release used resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
        </member>
        <member name="T:QCI.Encryption.Decryptor">
            <summary>
            Provides a generic wrapper for data decryption using symmetric cryptographic algorithms.
            </summary>
        </member>
        <member name="M:QCI.Encryption.Decryptor.#ctor(QCI.Encryption.EncryptionAlgorithm)">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm.
            A default secret key and initialization vector (IV) will automatically be generated.
            </summary>
            <param name="algorithm">Cryptographic algorithm to use for data decryption.</param>
        </member>
        <member name="M:QCI.Encryption.Decryptor.#ctor(QCI.Encryption.EncryptionAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm 
            and secret key.
            A default initialization vector (IV) will automatically be generated.
            </summary>
            <param name="algorithm">Cryptographic algorithm to use for data decryption.</param>
            <param name="key">Secret key to use for decryption.</param>
        </member>
        <member name="M:QCI.Encryption.Decryptor.#ctor(QCI.Encryption.EncryptionAlgorithm,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm, 
            secret key, and initialization vector (IV).
            </summary>
            <param name="algorithm">Cryptographic algorithm to use for data decryption.</param>
            <param name="key">Secret key to use for decryption.</param>
            <param name="initVector">Initialization vector (IV) to use for decryption.</param>
        </member>
        <member name="M:QCI.Encryption.Decryptor.#ctor(QCI.Encryption.EncryptionAlgorithm,System.String,System.String)">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm, 
            secret key, and initialization vector (IV).
            </summary>
            <param name="algorithm">Cryptographic algorithm to use for data decryption.</param>
            <param name="key">Secret key to use for decryption( encoded as a base-64 string).</param>
            <param name="initVector">Initialization vector (IV) to use for decryption (encoded as a base-64 string).</param>
        </member>
        <member name="P:QCI.Encryption.Decryptor.Key">
            <summary>
            Gets or set this secret key used during decryption.
            </summary>
        </member>
        <member name="P:QCI.Encryption.Decryptor.IV">
            <summary>
            Gets or sets the initialization vector (IV) used during decryption.
            </summary>
        </member>
        <member name="M:QCI.Encryption.Decryptor.Decrypt(System.Byte[])">
            <summary>
            Decrypts a data value using the secret key and initialization vector (IV) properties.
            </summary>
            <param name="value">The data value to decrypt.</param>
            <returns>The decrypted data value.</returns>
        </member>
        <member name="M:QCI.Encryption.Decryptor.DecryptFromBase64String(System.String)">
            <summary>
            Decrypts a base-64 encoded string using the specified secret key and 
            initialization vector (IV) properties values.
            </summary>
            <param name="value">The string to decrypt (encoded as a base-64 string).</param>
            <returns>The decrypted string.</returns>
        </member>
        <member name="T:QCI.Encryption.EncryptionAlgorithm">
            <summary>
            Specifies the symmetric cryptographic algorithm to use for data encryption or decryption.
            </summary>
        </member>
        <member name="F:QCI.Encryption.EncryptionAlgorithm.Aes">
            <summary>
            Indicates the Advanced Encryption Standard (AES) algorithm.
            </summary>
        </member>
        <member name="F:QCI.Encryption.EncryptionAlgorithm.Des">
            <summary>
            Indicates the Data Encryption Standard (DES) algorithm.
            </summary>
        </member>
        <member name="F:QCI.Encryption.EncryptionAlgorithm.TripleDes">
            <summary>
            Indicates the Triple Data Encryption Standard algorithm.
            </summary>
        </member>
        <member name="F:QCI.Encryption.EncryptionAlgorithm.Rijndael">
            <summary>
            Indicates the Rijndael symmetric encryption algorithm.
            </summary>
        </member>
        <member name="F:QCI.Encryption.EncryptionAlgorithm.Rc2">
            <summary>
            Indicates the RC2 symmetric encryption algorithm.
            </summary>
        </member>
        <member name="T:QCI.Encryption.Encryptor">
            <summary>
            Provides a generic wrapper for data encryption using symmetric cryptographic algorithms.
            </summary>
        </member>
        <member name="M:QCI.Encryption.Encryptor.#ctor(QCI.Encryption.EncryptionAlgorithm)">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm.
            A secret key and initialization vector (IV) will automatically be generated.
            </summary>
            <param name="algorithm">Cryptographic algorithm to use for data encryption.</param>
        </member>
        <member name="M:QCI.Encryption.Encryptor.#ctor(QCI.Encryption.EncryptionAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm 
            and secret key.
            An initialization vector (IV) will automatically be generated.
            </summary>
            <param name="algorithm">Cryptographic algorithm to use for data encryption.</param>
            <param name="key">Secret key for the encryption algorithm.</param>
        </member>
        <member name="M:QCI.Encryption.Encryptor.#ctor(QCI.Encryption.EncryptionAlgorithm,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm, 
            secret key, and initialization vector (IV).
            </summary>
            <param name="algorithm">Cryptographic algorithm to use for data encryption.</param>
            <param name="key">Secret key for the encryption algorithm.</param>
            <param name="initVector">Initialization vector (IV) for the encryption algorithm.</param>
        </member>
        <member name="M:QCI.Encryption.Encryptor.#ctor(QCI.Encryption.EncryptionAlgorithm,System.String,System.String)">
            <summary>
            Initializes a new instance of this class with the specified encryption algorithm, 
            secret key, and initialization vector (IV).
            </summary>
            <param name="algorithm">Cryptographic algorithm to use for data encryption.</param>
            <param name="key">Secret key for the encryption algorithm (encoded as a base-64 string).</param>
            <param name="initVector">Initialization vector (IV) for the encryption algorithm (encoded as a base-64 string).</param>
        </member>
        <member name="P:QCI.Encryption.Encryptor.Key">
            <summary>
            Gets or set this secret key used during encryption.
            </summary>
        </member>
        <member name="P:QCI.Encryption.Encryptor.IV">
            <summary>
            Gets or sets the initialization vector (IV) used during encryption.
            </summary>
        </member>
        <member name="M:QCI.Encryption.Encryptor.Encrypt(System.Byte[])">
            <summary>
            Encrypts a data value using the secret key and initialization vector (IV) properties.
            </summary>
            <param name="value">The data value to encrypt.</param>
            <returns>The encrypted data value.</returns>
        </member>
        <member name="M:QCI.Encryption.Encryptor.EncryptToBase64String(System.String)">
            <summary>
            Encrypts a string using the specified secret key and initialization vector (IV) property values.
            The encrypted value is returned as a base-64 encoded string.
            </summary>
            <param name="value">The string to encrypt.</param>
            <returns>The encrypted string, encoded as a base-64 string.</returns>
        </member>
        <member name="T:QCI.Encryption.DpapiSecurity">
            <summary>
            Uses the Data Protection API (DPAPI) to encrypt strings using information from the 
            current user account or computer. Using DPAPI alleviates the difficult problem of 
            explicitly generating and storing a cryptographic key.
            </summary>
            <remarks>
            TODO: Consider converting these methods to use the ProtectedData class.
            It does not require packing bytes into 16-byte units, but does seem to explode the 
            size of the data (150 plain chars into 350 encrypted chars).
            </remarks>
        </member>
        <member name="M:QCI.Encryption.DpapiSecurity.Encrypt(System.String)">
            <summary>
            Creates a protected string with SameLogon scope, which only the current system user can unprotect.
            </summary>
            <param name="str">String to protect.</param>
            <returns>A protected string.</returns>
        </member>
        <member name="M:QCI.Encryption.DpapiSecurity.Encrypt(System.String,System.Security.Cryptography.MemoryProtectionScope)">
            <summary>
            Creates a protected string with a specified scope of protection.
            </summary>
            <param name="str">String to be protected.</param>
            <param name="scope">Scope of protection to be applied.</param>
            <returns>A protected string.</returns>
        </member>
        <member name="M:QCI.Encryption.DpapiSecurity.Decrypt(System.String)">
            <summary>
            Unprotects a string previously protected with SameLogon scope.
            </summary>
            <param name="str">String to be unprotected.</param>
            <returns>An unprotected copy of the string.</returns>
        </member>
        <member name="M:QCI.Encryption.DpapiSecurity.Decrypt(System.String,System.Security.Cryptography.MemoryProtectionScope)">
            <summary>
            Unprotects a string previously protected with a specified scope of protection.
            </summary>
            <param name="str">String to be unprotected.</param>
            <param name="scope">Scope of protection used.</param>
            <returns>An unprotected copy of the string.</returns>
        </member>
        <member name="M:QCI.Encryption.DpapiSecurity.Encrypt(System.Byte[])">
            <summary>
            Creates a protected byte array with SameLogon scope, which only the current system user can unprotect.
            </summary>
            <param name="data">Array containing data to protect.</param>
            <returns>A protected copy of byte array.</returns>
        </member>
        <member name="M:QCI.Encryption.DpapiSecurity.Encrypt(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)">
            <summary>
            Creates a protected byte array with a specified scope of protection.
            </summary>
            <param name="data">Array containing data to be protected.</param>
            <param name="scope">Scope of protection to be applied.</param>
            <returns>A protected copy of the byte array.</returns>
        </member>
        <member name="M:QCI.Encryption.DpapiSecurity.Decrypt(System.Byte[])">
            <summary>
            Unprotects a byte array previously protected with SameLogon scope.
            </summary>
            <param name="data">Byte array containing data to be unprotected.</param>
            <returns>An unprotected copy of the byte array.</returns>
        </member>
        <member name="M:QCI.Encryption.DpapiSecurity.Decrypt(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)">
            <summary>
            Unprotects a byte array previously protected with a specified scope of protection.
            </summary>
            <param name="data">Byte array to be unprotected.</param>
            <param name="scope">Scope of protection used.</param>
            <returns>An unprotected copy of the byte array.</returns>
        </member>
        <member name="T:QCI.ExceptionManagement.PublisherException">
            <summary>
            Exception that is throw when a custom publisher throws an exception to the ExceptionManager.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.PublisherException.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.PublisherException.#ctor(System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:QCI.ExceptionManagement.PublisherException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="message">Message of the exception.</param>
            <param name="inner">Reference to the InnerException.</param>
        </member>
        <member name="M:QCI.ExceptionManagement.PublisherException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:QCI.ExceptionManagement.ExceptionManager">
            <summary>
            Manages the publishing of exception information based on settings in the configuration file.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.ExceptionManager.Publish(System.Exception)">
            <summary>
            Publishes an exception using the configured publishers.
            </summary>
            <param name="exception">Exception to publish.</param>
        </member>
        <member name="M:QCI.ExceptionManagement.ExceptionManager.Publish(System.Exception,System.Object)">
            <summary>
            Publishes an exception using the configured publishers.
            </summary>
            <param name="exception">Exception to publish.</param>
            <param name="additionalInfo">Additional data that should be published with the exception.</param>
        </member>
        <member name="M:QCI.ExceptionManagement.ExceptionManager.SerializeToXml(System.Exception,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Public static helper method to serialize the exception information into XML.
            </summary>
            <param name="exception">The exception object whose information should be published.</param>
            <param name="additionalInfo">A collection of additional data that should be published along with the exception information.</param>
        </member>
        <member name="T:QCI.ExceptionManagement.Publishers.SQLPublisher">
            <summary>
            Allows publishing exceptions to plain text/log files.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.Publishers.SQLPublisher.Initialize(QCI.Framework.Configuration.PublisherSettings)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="settings">Settings for this publisher to use.</param>
        </member>
        <member name="P:QCI.ExceptionManagement.Publishers.SQLPublisher.Settings">
            <summary>
            Gets the configuration settings being used by this publisher.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.Publishers.SQLPublisher.Publish(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Publishes details about an exception to the configured text file.
            </summary>
            <param name="exception">Exception to publish.</param>
            <param name="contextInfo">Context information about the exception.</param>
            <param name="additionalInfo">Additional data that should be published with the exception.</param>
        </member>
        <member name="T:QCI.ExceptionManagement.Publishers.EmailPublisher">
            <summary>
            Allows publishing exceptions via email.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.Publishers.EmailPublisher.Initialize(QCI.Framework.Configuration.PublisherSettings)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="settings">Settings for this publisher to use.</param>
        </member>
        <member name="P:QCI.ExceptionManagement.Publishers.EmailPublisher.Settings">
            <summary>
            Gets the configuration settings being used by this publisher.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.Publishers.EmailPublisher.Publish(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Publishes details about an exception to recipients via email.
            </summary>
            <param name="exception">Exception to publish.</param>
            <param name="contextInfo">Context information about the exception.</param>
            <param name="additionalInfo">Additional data that should be published with the exception.</param>
        </member>
        <member name="T:QCI.ExceptionManagement.Publishers.EventLogPublisher">
            <summary>
            Allows publishing exceptions to the Windows Event Log.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.Publishers.EventLogPublisher.Initialize(QCI.Framework.Configuration.PublisherSettings)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="settings">Settings for this publisher to use.</param>
        </member>
        <member name="P:QCI.ExceptionManagement.Publishers.EventLogPublisher.Settings">
            <summary>
            Gets the configuration settings being used by this publisher.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.Publishers.EventLogPublisher.Publish(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Publishes details about an exception to the Windows Event Log.
            </summary>
            <param name="exception">Exception to publish.</param>
            <param name="contextInfo">Context information about the exception.</param>
            <param name="additionalInfo">Additional data that should be published with the exception.</param>
        </member>
        <member name="T:QCI.ExceptionManagement.Publishers.LogFilePublisher">
            <summary>
            Allows publishing exceptions to plain text/log files.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.Publishers.LogFilePublisher.Initialize(QCI.Framework.Configuration.PublisherSettings)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="settings">Settings for this publisher to use.</param>
        </member>
        <member name="P:QCI.ExceptionManagement.Publishers.LogFilePublisher.Settings">
            <summary>
            Gets the configuration settings being used by this publisher.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.Publishers.LogFilePublisher.Publish(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Publishes details about an exception to the configured text file.
            </summary>
            <param name="exception">Exception to publish.</param>
            <param name="contextInfo">Context information about the exception.</param>
            <param name="additionalInfo">Additional data that should be published with the exception.</param>
        </member>
        <member name="T:QCI.ExceptionManagement.TypeFilter">
            <summary>
            TypeFilter class stores contents of the Include and Exclude filters provided in the
            configuration file
            </summary>
        </member>
        <member name="P:QCI.ExceptionManagement.TypeFilter.Types">
            <summary>
            Collection of types for the filter
            </summary>
        </member>
        <member name="P:QCI.ExceptionManagement.TypeFilter.AcceptAllTypes">
            <summary>
            Indicates if all types should be accepted for a filter
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.TypeFilter.Create(System.String[])">
            <summary>
            Creates a TypeFilter from the string array of type names.
            </summary>
            <param name="rawFilter">String array containing names of types to be included in the filter.</param>
            <returns>TypeFilter object containing type filter information.</returns>
        </member>
        <member name="T:QCI.ExceptionManagement.TypeInfo">
            <summary>
            TypeInfo class contains information about each type within a TypeFilter
            </summary>
        </member>
        <member name="P:QCI.ExceptionManagement.TypeInfo.IncludeSubClasses">
            <summary>
            Indicates if subclasses are to be included with the type specified in the Include and Exclude filters
            </summary>
        </member>
        <member name="P:QCI.ExceptionManagement.TypeInfo.ClassType">
            <summary>
            The Type class representing the type specified in the Include and Exclude filters
            </summary>
        </member>
        <member name="T:QCI.ExceptionManagement.Util">
            <summary>
            Contains utility methods for use during exception management and publishing.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.Util.GetFullDetailsString(System.Exception)">
            <summary>
            Returns a formatted, multi-line string containing complete details of the specified exception.
            </summary>
            <param name="exception">Exception to evaluate.</param>
            <returns>String containing the exception details.</returns>
        </member>
        <member name="M:QCI.ExceptionManagement.Util.GetFullDetailsString(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a formatted, multi-line string containing complete details of the 
            specified exception and additional information.
            </summary>
            <param name="exception">Exception to evaluate.</param>
            <param name="contextInfo">Context information about the exception.  Null is allowed.</param>
            <param name="additionalInfo">Additional information about the exception.  Null is allowed.</param>
            <returns>String containing the exception details.</returns>
        </member>
        <member name="M:QCI.ExceptionManagement.Util.GetFullDetailsString(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,QCI.ExceptionManagement.ExceptionDetail@)">
            <summary>
            Returns a formatted, multi-line string containing complete details of the 
            specified exception and additional information.
            </summary>
            <param name="exception">Exception to evaluate.</param>
            <param name="contextInfo">Context information about the exception.  Null is allowed.</param>
            <param name="additionalInfo">Additional information about the exception.  Null is allowed.</param>
            <param name="details"></param>
            <returns>String containing the exception details.</returns>
        </member>
        <member name="M:QCI.ExceptionManagement.Util.TryGetRootLocationWithinApp(System.Exception,System.String@,System.String@,System.String@)">
            <summary>
            Processes the exception tree and stack trace of an exception and returns the root location of the error
            within the source code (method, file, and line number) if one can be found.
            </summary>
            <param name="ex">The exception to process.</param>
            <param name="methodName">Full signature of the method.</param>
            <param name="fileName">Name of the source code file.</param>
            <param name="lineNumber">Line number in the source code file.</param>
            <returns>True if a error location could be determined; otherwise, false.</returns>
        </member>
        <member name="M:QCI.ExceptionManagement.Util.IsEventSourceUsable(System.String,System.String,System.Boolean)">
            <summary>
            Determines if an event source in a Windows EventLog on the local machine, and whether it can be written to.
            </summary>
            <param name="logName">Name of the event log.</param>
            <param name="sourceName">Name of the event source.</param>
            <param name="tryToCreateIfMissing">Whether an attempt should be made to create the event source if it does not already exist.</param>
            <returns>True if the source exists and can be used; otherwise, false.</returns>
        </member>
        <member name="M:QCI.ExceptionManagement.Util.IsLogFileUsable(System.String)">
            <summary>
            Determines if a file can be written to.
            Note: An attempt is made to open the file with write access which will attempt to create the file 
            if does not already exist. However, the path to the file will not be created if it does not already exist.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:QCI.ExceptionManagement.ExceptionPublisher">
            <summary>
            Abstract class from which all exception publishers must be derived.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.ExceptionPublisher.CreateInstance(QCI.Framework.Configuration.PublisherSettings)">
            <summary>
            Creates a new publisher instance using the specified configuration settings.
            </summary>
            <param name="settings">Configuration settings for the new publisher.</param>
            <returns>A new publisher instance.</returns>
        </member>
        <member name="M:QCI.ExceptionManagement.ExceptionPublisher.TryCreateInstance(QCI.Framework.Configuration.PublisherSettings,QCI.ExceptionManagement.ExceptionPublisher@)">
            <summary>
            Attempts to creates a new publisher instance using the specified configuration settings.
            </summary>
            <param name="settings">Configuration settings for the new publisher.</param>
            <param name="publisher">Publisher created if successful; otherwise null.</param>
            <returns>True if a new publisher instance was created; otherwise false.</returns>
        </member>
        <member name="M:QCI.ExceptionManagement.ExceptionPublisher.Initialize(QCI.Framework.Configuration.PublisherSettings)">
            <summary>
            Method used to initialize the publisher with the passed configuration settings.
            </summary>
            <param name="settings">Configuration settings for use by the publisher.</param>
        </member>
        <member name="P:QCI.ExceptionManagement.ExceptionPublisher.Settings">
            <summary>
            Gets the configuration settings being used by this publisher.
            </summary>
        </member>
        <member name="M:QCI.ExceptionManagement.ExceptionPublisher.Publish(System.Exception,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Publishes an exception using the configured settings this publisher.
            </summary>
            <param name="exception">Exception to publish.</param>
            <param name="contextInfo">Context information about the exception.</param>
            <param name="additionalInfo">Additional data to publish with the exception.</param>
            <remarks>
            Implementations of this method must be made thread safe.
            </remarks>
        </member>
        <member name="M:QCI.ExceptionManagement.ExceptionPublisher.IsExceptionFiltered(System.Type)">
            <summary>
            Determines whether the exception type is to be filtered out based on the includes and exclude
            types specified.
            </summary>
            <param name="exceptionType">The Type of the exception to check for filtering.</param>
            <returns>True is the exception type is to be filtered out, false if it is not filtered out.</returns>
        </member>
        <member name="M:QCI.ExceptionManagement.ExceptionPublisher.MatchesFilter(System.Type,QCI.ExceptionManagement.TypeFilter)">
            <summary>
            Determines if a type is contained the supplied filter. 
            </summary>
            <param name="type">The Type to look for</param> 
            <param name="typeFilter">The Filter to test against the Type</param>
            <returns>true or false</returns>
        </member>
        <member name="T:QCI.Extensions.DrawingExtensions">
            <summary>
            Extension methods associated to the <see cref="T:Graphics{}"/> class.    
            </summary>
        </member>
        <member name="M:QCI.Extensions.DrawingExtensions.DrawRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            QCI Extension:
            Draws a rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="g">Graphics instance to be used.</param>
            <param name="pen">A <see cref="T:System.Drawing.Pen"/> that determines the color, width, and style of the rectangle.</param>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF"/> tructure that represents the rectangle to draw.</param>
        </member>
        <member name="T:QCI.Globalization.SimpleTimeZone">
            <summary>
            A concrete subclass of System.TimeZone that represents a time zone for use with a Gregorian calendar.
            This class does not handle historical changes and has a limited daylight-savings time rules engine.
            </summary>
            <remarks>
            <para>
            Daylight-saving time (DST) can be supported by providing a rules string during instantiation.  The DST rules string must have the following format:
            </para>
            <para>
            [delta],[start],[end]
            </para>
            <list type="table">
            <listheader>
            	<term>Field</term>
            	<description>Description</description>
            </listheader>
            <item>
            	<term>[delta]</term>
            	<description>
            	Number or hours and minutes to shift the clock during daylight-saving time.  This value must be formatted as: [-]hh[:mm] where hour (hh) is required and can be a single digit and minutes (mm) are optional.
            	</description>
            </item>
            <item>
            	<term>[start]/[end]</term>
            	<description>
            	Indicates when the change to and from summer time occurs.  The variable [start] describes the date of the change to summer time, and [end] describes the date of the change back to standard time.
            	<para>
            	Both have the format:  M[m].[n].[d]/[hh:mm]
            	</para>
            	<para>
            	Where [m] is the numeric month (1 – 12) the change occurs, [d] is the day-of-week (0 = Sun, 6 = Sat) of the change, [n] is the number of the occurrence of the day-of-week [1 – 5] within the month, and [hh:mm] is the hour and minute of the change.  Set [n] to 5 to indicate the last occurrence of [d] in month [m]. The time [hh:mm] must be specified in 24-hour time with leading zeros as needed (e.g., 01:00 = 1:00a, 13:00 = 1:00p).
            	</para>
            	</description>
            </item>
            </list>
            
            <para></para>
            
            Examples:
            <list type="table">
            	<listheader>
            		<term>Time Zone</term>
            		<description>DST Rules String</description>
            	</listheader>
            	<item>
            		<term>US Central Time</term>
            		<description>"1:00,M4.1.0/02:00,M10.5.0/02:00"</description>
            	</item>
            	<item>
            		<term>Israel Time</term>
            		<description>"1:00,M4.3.0/2:00,M8.4.6/2:00"</description>
            	</item>
            	<item>
            		<term>New Zealand Time</term>
            		<description>"1:00,M10.5.0/2:00,M3.1.0/3:00"</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:QCI.Globalization.SimpleTimeZone.#ctor(System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of SimpleTimeZone which does not observe daylight-saving time.
            </summary>
            <param name="standardName">Value for the standard time zone name.</param>
            <param name="offset">The coordinated universal time (UTC) offset for the specified local time.</param>
        </member>
        <member name="M:QCI.Globalization.SimpleTimeZone.#ctor(System.String,System.TimeSpan,System.String,System.String)">
            <summary>
            Initializes a new instance of SimpleTimeZone which observes daylight-saving time.
            </summary>
            <param name="standardName">Value for the standard time zone name.</param>
            <param name="offset">The coordinated universal time (UTC) offset for the specified local time.</param>
            <param name="daylightName">Value for the daylight saving time zone name. Specify null to use the standard name.</param>
            <param name="daylightRule">Rules string that defines daylight-saving time. See class documentation for format details.</param>
        </member>
        <member name="P:QCI.Globalization.SimpleTimeZone.StandardName">
            <summary>
            Gets the standard time zone name.
            </summary>
        </member>
        <member name="P:QCI.Globalization.SimpleTimeZone.DaylightName">
            <summary>
            Gets the daylight saving time zone name.
            If daylight saving time is not used in the time zone, the StandardName value is returned
            </summary>
        </member>
        <member name="M:QCI.Globalization.SimpleTimeZone.GetDaylightChanges(System.Int32)">
            <summary>
            Returns the daylight saving time period for a particular year.
            </summary>
            <param name="year">The year to which the daylight saving time period applies.</param>
            <returns>A DaylightTime instance containing the start and end date for daylight saving time in year.</returns>
        </member>
        <member name="M:QCI.Globalization.SimpleTimeZone.GetUtcOffset(System.DateTime)">
            <summary>
            Returns the coordinated universal time (UTC) offset for the specified local time.
            </summary>
            <param name="time">The local date and time.</param>
            <returns>The UTC offset from time, measured in ticks.</returns>
            <remarks>Offset is the difference between local time and UTC. That is: local time = UTC + offset</remarks>
        </member>
        <member name="M:QCI.Globalization.SimpleTimeZone.ToLocalTime(System.DateTime)">
            <summary>
            Returns the local time that corresponds to a specified coordinated universal time (UTC).
            </summary>
            <param name="time">A UTC date and time.</param>
            <returns>A DateTime instance whose value is the local time that corresponds to the specified UTC time.</returns>
        </member>
        <member name="T:QCI.Globalization.SimpleTimeZone.DaylightSavingsTimeRule">
            <summary>
            Wrapper for the rules that define a daylight savings time.
            </summary>
        </member>
        <member name="M:QCI.Globalization.SimpleTimeZone.DaylightSavingsTimeRule.GetDayInMonth(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the (n)th day of week in a particular year/month.
            </summary>
        </member>
        <member name="T:QCI.IO.PathUtil">
            <summary>
            Provides path-related utility methods.
            </summary>
        </member>
        <member name="P:QCI.IO.PathUtil.AppPath">
            <summary>
            Gets the application-specific path regardless of application type.
            For web apps, the path returned is the root folder of the web site.
            For other apps, the path returned is the location of the EXE.
            </summary>
        </member>
        <member name="M:QCI.IO.PathUtil.GetAbsolutePath(System.String)">
            <summary>
            Converts an application-relative path to an absolute one.
            </summary>
            <param name="relativePath">An application-relative path.</param>
            <returns>An absolute path, based on the application path.</returns>
        </member>
        <member name="M:QCI.IO.PathUtil.GetAbsolutePath(System.String,System.String)">
            <summary>
            Creates an absolute path from a base path and a relative path.        
            </summary>
            <param name="basePath">Base path reference.</param>
            <param name="relativePath">Path relative to the base path.</param>
            <returns>An absolute path.</returns>
        </member>
        <member name="T:QCI.IO.StreamUtil">
            <summary>
            Provides stream-related utility methods.
            </summary>
        </member>
        <member name="M:QCI.IO.StreamUtil.WriteStreamToStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Reads all the bytes from an input stream and writes them to an output stream using a 1024-byte buffer.
            </summary>
            <param name="input">Input stream to be read.</param>
            <param name="output">Output stream to be written to.</param>
        </member>
        <member name="M:QCI.IO.StreamUtil.WriteStreamToStream(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Reads all the bytes from one stream and writes them to another stream.
            </summary>
            <param name="input">Input stream to be read.</param>
            <param name="output">Output stream to be written to.</param>
            <param name="chunkSize">Number of bytes to copy at a time (i.e., the internal buffer size).</param>
        </member>
        <member name="M:QCI.IO.StreamUtil.GetBestChunkSizeForStreamCopy(System.Int64)">
            <summary>
            Returns a good chunk size (buffer size) to use when copying streams based on the expected total bytes to be copied.
            </summary>
            <param name="expectedTotalByteCount">Total number of bytes expected to be copied.</param>
            <returns>The size of the buffer to use.</returns>
            <remarks>
            Please note that the logic in this method is based on an educated guess and has not be optimized using emperical testing.
            </remarks>
        </member>
        <member name="T:QCI.IRange`1">
            <summary>
            Represents a range of values defined by a minumum and maximum value.
            </summary>
            <typeparam name="T">Type of the values in the range.</typeparam>
        </member>
        <member name="P:QCI.IRange`1.Min">
            <summary>
            The lower bound of this range (value is inclusive).
            </summary>
        </member>
        <member name="P:QCI.IRange`1.Max">
            <summary>
            The upper bound of this range (value is inclusive).
            </summary>
        </member>
        <member name="M:QCI.IRange`1.Contains(`0)">
            <summary>
            Indicates if this range contains <code>value</code>.
            </summary>
            <param name="value">The value to look for.</param>
            <returns>true if this range contains <code>value</code>; otherwise false.</returns>
        </member>
        <member name="T:QCI.Net.ClientIPAddress">
            <summary>
            This class attempts to work around proxies, clusters, and other hardware to determines the correct IP address of an end-user making a HTTP request.
            It can also determine if an IP address is likely private (internal to local network).
            </summary>
        </member>
        <member name="M:QCI.Net.ClientIPAddress.DetermineClientIP">
            <summary>
            Determines the IP address of the end-user making the current request.
            This method attempts to work around proxies and other hardware that can affect the IP address normally reported.
            </summary>
            <returns>IP address of the end-user making the current request; or null if none could be found or it was a private IP address.</returns>
        </member>
        <member name="M:QCI.Net.ClientIPAddress.IsPrivateIP(System.String)">
            <summary>
            Determines if a given IP address falls within one of the addreses ranges considered private (i.e., internal to a local network).
            </summary>
            <param name="ipString">IP address to evaluate.</param>
            <returns>True if the IP address is considered private; otherwise false.</returns>
        </member>
        <member name="M:QCI.Net.ClientIPAddress.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Determines if a given IP address falls within one of the addreses ranges considered private (i.e., internal to a local network).
            </summary>
            <param name="ipAddress">IP address to evaluate.</param>
            <returns>True if the IP address is considered private; otherwise false.</returns>
        </member>
        <member name="T:QCI.Net.IPAddressRange">
            <summary>
            Represents a range of IP addresses. Supports both IPv4 and IPv6 addresses.
            </summary>
        </member>
        <member name="M:QCI.Net.IPAddressRange.#ctor(System.Net.IPAddress)">
            <summary>
            Creates a new instance of this class with minimum and maximum addresses set to a given address.
            </summary>
            <param name="address">IP address for both min and max.</param>
        </member>
        <member name="M:QCI.Net.IPAddressRange.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Creates a new instance of this class with the specified minimum and maximum addresses.
            </summary>
            <param name="minimumAddress">Lowest IP address.</param>
            <param name="maximumAddress">Highest IP address.</param>
        </member>
        <member name="M:QCI.Net.IPAddressRange.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of this class with the specified minimum and maximum addresses.
            </summary>
            <param name="minimumAddress">Lowest IP address.</param>
            <param name="maximumAddress">Highest IP address.</param>
        </member>
        <member name="P:QCI.Net.IPAddressRange.Minimum">
            <summary>
            Gets the minimum address in this range (inclusive).
            </summary>
        </member>
        <member name="P:QCI.Net.IPAddressRange.Maximum">
            <summary>
            Gets the maximum address in this range (inclusive).
            </summary>
        </member>
        <member name="M:QCI.Net.IPAddressRange.Contains(System.Net.IPAddress)">
            <summary>
            Deteremines if a given IP address falls within the range specified by this instance.
            </summary>
            <param name="address">The IP address to evaluate.</param>
            <returns>True if the address is in the range; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Net.IPAddressRange.Parse(System.String)">
            <summary>
            Parses an IPv4 address range string (example: '10.0.0.1 - 10.0.1.5').
            A single IP address containing wildcards in the second, thrid, or fourth group is also allowed (example: '209.*.*.*'). 
            </summary>
            <remarks>
            Accepted Formats:
            xxx.xxx.xxx.xxx - xxx.xxx.xxx.xxx - specific range
            xxx.* - class A range
            xxx.xxx.* - class B range
            xxx.xxx.xxx.* - class C range
            xxx.xxx.xxx.xxx - single address
            </remarks>
            <param name="pattern">The range pattern to be parsed.</param>
            <returns>A new instance of IPAddressRange.</returns>
        </member>
        <member name="M:QCI.Net.IPAddressRange.Compare(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares two specified IPAddress objects and returns an integer that indicates 
            their relationship to one another in the sort order.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            A 32-bit signed integer indicating the lexical relationship between the two comparands.
            Value Condition: 
            If less than zero, {left} is less than {right}. 
            If zero, {left} equals {right}. 
            if greater than zero, {left} is greater than {right}.
            </returns>
        </member>
        <member name="T:QCI.Net.Mail.EmailTransportSettingParser">
            <summary>
            Helps get and determine the provider of the email transmission to the recipients.
            </summary>
        </member>
        <member name="T:QCI.Net.Mail.Emailer">
            <summary>
            Provides central point for routing and processing <see cref="T:MailMessage"/> objects using <see cref="T:SmtpClient"/>.
            The ASP.NET Async page attribute is not required to send messages asyncronously, unlike using <see cref="T:SmtpClient"/> directly.
            Exceptions during asyncronous calls are published using the <see cref="T:QCI.Framework.ExceptionManager"/>.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.SetEmailTransport(QCI.Net.Mail.EmailTransports.IEmailTransport)">
            <summary>
            Sets an internal instance of the Emailer's EmailTransport to be use for the sending of a MailMessage 
            after all manipulations of the message have been done.
            </summary>
            <param name="emailTransport">Object that transmits the email to the recipients.</param>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends an email message using a default instance of <see cref="T:SmtpClient"/>.
            </summary>
            <param name="message">Email message to be sent.</param>
            <exception cref="T:QCI.Net.Mail.SmtpSendException">The message could not be delivered.</exception>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.Send(System.Net.Mail.MailMessage,QCI.Net.Mail.EmailHandlingOptions)">
            <summary>
            Sends an email message using a default instance of <see cref="T:SmtpClient"/>
            and explicitly defined handling options.
            </summary>
            <param name="message">Email message to be sent.</param>
            <param name="options">Handling options to use when sending this message.</param>
            <exception cref="T:QCI.Net.Mail.SmtpSendException">The message could not be delivered.</exception>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.Send(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient)">
            <summary>
            Sends an email message using a specified instance of <see cref="T:SmtpClient"/>.
            </summary>
            <param name="message">Email message to be sent.</param>
            <param name="smtpClient">Instance of <see cref="T:SmtpClient"/> to use to send the message.</param>
            <exception cref="T:QCI.Net.Mail.SmtpSendException">The message could not be delivered.</exception>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.Send(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient,QCI.Net.Mail.EmailHandlingOptions)">
            <summary>
            Sends an email message using a specified instance of <see cref="T:SmtpClient"/>
            and explicitly defined handling options.
            </summary>
            <param name="message">Email message to be sent.</param>
            <param name="smtpClient">Instance of <see cref="T:SmtpClient"/> to use to send the message.</param>
            <param name="options">Handling options to use when sending this message.</param>
            <exception cref="T:QCI.Net.Mail.SmtpSendException">The message could not be delivered.</exception>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.SendAsync(System.Net.Mail.MailMessage)">
            <summary>
            Sends an email message asynchronously using a default instance of <see cref="T:SmtpClient"/>.
            
            ASP.NET pages do not need to have the Async attribute set to use this method.
            No exceptions will be raised to the caller. All exceptions will be published 
            using the <see cref="T:QCI.Framework.ExceptionManager"/>.
            </summary>
            <param name="message">Email message to be sent.</param>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.SendAsync(System.Net.Mail.MailMessage,QCI.Net.Mail.EmailHandlingOptions)">
            <summary>
            Sends an email message asynchronously using a default instance of <see cref="T:SmtpClient"/>
            and explicitly defined handling options.
            
            ASP.NET pages do not need to have the Async attribute set to use this method.
            No exceptions will be raised to the caller. All exceptions will be published 
            using the <see cref="T:QCI.Framework.ExceptionManager"/>.
            </summary>
            <param name="message">Email message to be sent.</param>
            <param name="options">Handling options to use when sending this message.</param>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.SendAsync(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient)">
            <summary>
            Sends an email message asynchronously using a specified instance of <see cref="T:SmtpClient"/>.
            
            ASP.NET pages do not need to have the Async attribute set to use this method.
            No exceptions will be raised to the caller. All exceptions will be published 
            using the <see cref="T:QCI.Framework.ExceptionManager"/>.
            </summary>
            <param name="message">Email message to be sent.</param>
            <param name="smtpClient">Instance of <see cref="T:SmtpClient"/> to use to send the message.</param>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.SendAsync(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient,QCI.Net.Mail.EmailHandlingOptions)">
            <summary>
            Sends an email message asynchronously using a specified instance of <see cref="T:SmtpClient"/>
            and explicitly defined handling options.
            
            ASP.NET pages do not need to have the Async attribute set to use this method.
            No exceptions will be raised to the caller. All exceptions will be published 
            using the <see cref="T:QCI.Framework.ExceptionManager"/>.
            </summary>
            <param name="message">Email message to be sent.</param>
            <param name="smtpClient">Instance of <see cref="T:SmtpClient"/> to use to send the message.</param>
            <param name="options">Handling options to use when sending this message.</param>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.ProcessRedirectsAndOverrides(QCI.Net.Mail.IMailMessage,QCI.Net.Mail.EmailHandlingOptions)">
            <summary>
            Takes a IMailMessage and applies OverrideFrom, Redirect, and BccAdditions based on the EmailHandlingOptions passed in.
            </summary>
            <param name="message">Email message to be processed.</param>
            <param name="options">Handling options to use when sending this message.</param>
        </member>
        <member name="M:QCI.Net.Mail.Emailer.FindIndexAfterBodyTag(System.String)">
            <summary>
            Find the string index of the position after the beginning body tag of a html formatted string.
            </summary>
            <param name="htmlBody">Html formatted string to check.</param>
        </member>
        <member name="T:QCI.Net.Mail.EmailHandlingOptions">
            <summary>
            Specifies how mail messages are handled when sent using <see cref="T:QCI.Net.Mail.Emailer"/>.
            </summary>
        </member>
        <member name="F:QCI.Net.Mail.EmailHandlingOptions.Default">
            <summary>
            Indicates normal handling rules. All email handling configuration settings apply.
            </summary>
        </member>
        <member name="F:QCI.Net.Mail.EmailHandlingOptions.SkipRedirect">
            <summary>
            Indicates configuration settings that cause the email to be redirected should be ignored.
            </summary>
        </member>
        <member name="F:QCI.Net.Mail.EmailHandlingOptions.SkipFromOverride">
            <summary>
            Indicates configuration settings that override the From line should be ignored.
            </summary>
        </member>
        <member name="F:QCI.Net.Mail.EmailHandlingOptions.SkipBccAdditions">
            <summary>
            Indicates configuration settings that add to the BCC line should be ignored.
            </summary>
        </member>
        <member name="F:QCI.Net.Mail.EmailHandlingOptions.DoNotModify">
            <summary>
            Indicates all email handling configuration settings should be ignored and the message sent as-is.
            </summary>
        </member>
        <member name="T:QCI.Net.Mail.EmailTransports.IEmailTransport">
            <summary>
            Defines a inteface that can send a MailMessage to recipients.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.EmailTransports.IEmailTransport.SendEmail(System.Net.Mail.MailMessage)">
            <summary>
            Send the email.
            </summary>
            <param name="message">MailMessage to send.</param>
        </member>
        <member name="T:QCI.Net.Mail.IMailMessage">
            <summary>
            Abstracts the System.Net.Mail.MailMessage class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:QCI.Net.Mail.IMailMessage.Bcc" -->
        <member name="P:QCI.Net.Mail.IMailMessage.Body">
            <summary>
                Gets or sets the message body.
            </summary>
            <returns>
                A System.String value that contains the body text.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:QCI.Net.Mail.IMailMessage.CC" -->
        <member name="P:QCI.Net.Mail.IMailMessage.From">
            <summary>
               Gets or sets the from address for this e-mail message.
            </summary>
            <returns>
                A System.Net.Mail.MailAddress that contains the from address information.
            </returns>
        </member>
        <member name="P:QCI.Net.Mail.IMailMessage.IsBodyHtml">
            <summary>
                Gets or sets a value indicating whether the mail message body is in Html.
            </summary>
            <returns>
                true if the message body is in Html; else false. The default is false.
            </returns>
        </member>
        <member name="P:QCI.Net.Mail.IMailMessage.ReplyTo">
            <summary>
                Gets or sets the priority of this e-mail message.
            </summary>
            <returns>
                A System.Net.Mail.MailPriority that contains the priority of this message.
            </returns>
        </member>
        <member name="P:QCI.Net.Mail.IMailMessage.Sender">
            <summary>
                Gets or sets the sender's address for this e-mail message.
            </summary>
            <returns>
                A System.Net.Mail.MailAddress that contains the sender's address information.
            </returns>
        </member>
        <member name="P:QCI.Net.Mail.IMailMessage.Subject">
            <summary>
                Gets or sets the subject line for this e-mail message.
            </summary>
            <returns>
                A System.String that contains the subject content.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:QCI.Net.Mail.IMailMessage.To" -->
        <member name="T:QCI.Net.Mail.SmtpSendException">
            <summary>
            Represents the exception that is thrown when the <see cref="T:Emailer"/> is not able to complete 
            a Send or SendAsync operation for a particular <see cref="T:MailMessage"/>.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.SmtpSendException.#ctor(System.Net.Mail.MailMessage)">
            <summary>
            Initializes a new instance of this class with message that was being sent.
            </summary>
            <param name="message">The <see cref="T:MailMessage"/> that was to be sent.</param>
        </member>
        <member name="M:QCI.Net.Mail.SmtpSendException.#ctor(System.Net.Mail.MailMessage,System.Exception)">
            <summary>
            Initializes a new instance of this class with message that was being sent
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The <see cref="T:MailMessage"/> that was to be sent.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:QCI.Net.Mail.SmtpSendException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:QCI.Net.Mail.SmtpSendException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:QCI.Net.Mail.SmtpSendException.From">
            <summary>
            Gets the From line of the message that was being sent.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.SmtpSendException.To">
            <summary>
            Gets the To line of the message that was being sent.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.SmtpSendException.CC">
            <summary>
            Gets the CC line of the message that was being sent.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.SmtpSendException.Bcc">
            <summary>
            Gets the BCC line of the message that was being sent.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.SmtpSendException.Subject">
            <summary>
            Gets the Subject of the message that was being sent.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.SmtpSendException.Body">
            <summary>
            Gets the Body of the message that was being sent, or a portion of the Body if
            it was very long.
            </summary>
        </member>
        <member name="T:QCI.Net.Mail.EmailBuilder">
            <summary>
            Supports the construction of a <see cref="T:System.Net.Mail.MailMessage"/> from an <see cref="T:QCI.Net.Mail.EmailTemplate"/>.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.EmailBuilder.#ctor(System.String)">
            <summary>
            Creates a new instance of this class and loads an email template from the configuration file.
            </summary>
            <param name="templateName">The name of the template to use.</param>
        </member>
        <member name="M:QCI.Net.Mail.EmailBuilder.#ctor(QCI.Net.Mail.EmailTemplate)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="template">The <see cref="T:QCI.Net.Mail.EmailTemplate"/> to use.</param>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.Headers">
            <summary>
            Specifies the custom headers that are transmitted with the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.Priority">
            <summary>
            Gets or sets the priority of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.From">
            <summary>
            Gets or sets the e-mail address of the sender.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.To">
            <summary>
            Gets or sets a semicolon-delimited list of recipient e-mail addresses.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.Cc">
            <summary>
            Gets or sets a semicolon-delimited list of e-mail addresses that receive a carbon copy (CC) of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.Bcc">
            <summary>
            Gets or sets a semicolon-delimited list of e-mail addresses that receive a blind carbon copy (BCC) of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.ReplyTo">
            <summary>
            Gets or sets the e-mail address for replies.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.Subject">
            <summary>
            Gets or sets the subject line of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.Body">
            <summary>
            Gets or sets the body of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.BodyEncoding">
            <summary>
            Gets or sets the encoding type of the body of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.IsBodyHtml">
            <summary>
            Gets or sets a flag indicating whether the body of the e-mail message is HTML.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.Repeaters">
            <summary>
            Gets the collection of repeaters defined within the body of the message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailBuilder.Variables">
            <summary>
            Gets the collection of variables to be used when generating the subject and body of the message.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.EmailBuilder.CreateMailMessage">
            <summary>
            Creates a MailMessage instance constructed by this specified EmailBuilder instance.
            </summary>
            <returns>A MailMessage constructed by the EmailBuilder.</returns>
        </member>
        <member name="T:QCI.Net.Mail.EmailRepeater">
            <summary>
            Represents a section of an email message which can be data-bound to produce repeating content.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeater.#ctor(System.String)">
            <summary>
            Creates an instance of EmailRepeater with the specified ID. 
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.ID">
            <summary>
            Gets the ID assigned to this repeater.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.VariableName">
            <summary>
            Gets the unique variable name that can be used as a place holder in the body of an EmailTemplate.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.HeaderTemplate">
            <summary>
            Gets or sets the string that defines how the header section of the repeater is displayed.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.FooterTemplate">
            <summary>
            Gets or sets the string that defines how the footer section of the repeater is displayed.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.ItemTemplate">
            <summary>
            Gets or sets the string that defines how items in the repeater are displayed.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.AlternatingItemTemplate">
            <summary>
            Gets or sets the string that defines how alternating items in the repeater are displayed.
            If not defined, the ItemTemplate will be used.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.SeparatorTemplate">
            <summary>
            Gets or sets the string that defines how the separator between items are displayed.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.DataSource">
            <summary>
            Gets or sets the data source that provides data for populating the repeater.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.DataMember">
            <summary>
            Gets or sets the specific member in the DataSource to bind.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.Bindings">
            <summary>
            Gets the 
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.DataBindResults">
            <summary>
            Gets the results from the last call to the DataBind method.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeater.Variables">
            <summary>
            Gets the collection of variables to be used when generating the content of this repeater.
            </summary>
        </member>
        <member name="E:QCI.Net.Mail.EmailRepeater.DataBound">
            <summary>
            Occurs after the EmailRepeater has been bound to the data source.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeater.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeater.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeater.DataBind">
            <summary>
            Binds a data source to the repeater, storing the rendered output in the DataBindResults 
            then invoking the DataBound event.
            </summary>
        </member>
        <member name="T:QCI.Net.Mail.EmailRepeaterCollection">
            <summary>
            Defines a dictionary that stores EmailRepeater objects.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeaterCollection.#ctor">
            <summary>
            Initializes a new instance of EmailRepeaterCollection.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeaterCollection.Item(System.String)">
            <summary>
            Gets or sets the EmailRepeater with the specified key in the dictionary. 
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeaterCollection.Keys">
            <summary>
            Get an array filled with all the keys found in the dictionary.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailRepeaterCollection.Values">
            <summary>
            Get an array filled with all the EmailRepeater objects found in the dictionary.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeaterCollection.Add(QCI.Net.Mail.EmailRepeater)">
            <summary>
            Adds an EmailRepeater to the dictionary using the objects ID property value as the key.
            </summary>
            <param name="value">The item to add to the dictionary.</param>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeaterCollection.Contains(System.String)">
            <summary>
            Determines whether the dictionary contains an EmailRepeater with the specified key.
            </summary>
            <param name="key">The key of the item to locate in the dictionary.</param>
            <returns>True if the item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeaterCollection.Remove(System.String)">
            <summary>
            Removes the EmailRepeater with the specific key from the dictionary.
            </summary>
            <param name="key">The key of the EmailRepeater to remove.</param>
        </member>
        <member name="E:QCI.Net.Mail.EmailRepeaterCollection.RepeaterDataBound">
            <summary>
            Occurs when an EmailRepeater in this collection has been data bound.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeaterCollection.OnValidate(System.Object,System.Object)">
            <summary>
            Performs additional custom processes when validating the element with the specified key and value.
            </summary>
            <param name="key">The key of the element to validate.</param>
            <param name="value">The value of the element to validate.</param>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeaterCollection.OnClear">
            <summary>
            Performs additional custom processes before clearing the contents of the DictionaryBase instance.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeaterCollection.OnInsertComplete(System.Object,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the DictionaryBase instance.
            </summary>
            <param name="key">The key of the element inserted.</param>
            <param name="value">The value of the element inserted.</param>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeaterCollection.OnRemoveComplete(System.Object,System.Object)">
            <summary>
            Performs additional custom processes after removing an element from the DictionaryBase instance.
            </summary>
            <param name="key">The key of the element removed.</param>
            <param name="value">The value of the element removed.</param>
        </member>
        <member name="M:QCI.Net.Mail.EmailRepeaterCollection.OnSetComplete(System.Object,System.Object,System.Object)">
            <summary>
            Performs additional custom processes after setting a value in the DictionaryBase instance.
            </summary>
            <param name="key">The key of the element modified.</param>
            <param name="oldValue">The old value of the element associated with key.</param>
            <param name="newValue">The new value of the element associated with key.</param>
        </member>
        <member name="T:QCI.Net.Mail.EmailTemplate">
            <summary>
            Defines a template that can be used to generate MailMessage objects.
            </summary>
            <remarks>
            TODO: Consider a MailMessageTemplate which inherits directly from MailMessage
            and adds the functions in EmailTemplate.
            </remarks>
        </member>
        <member name="M:QCI.Net.Mail.EmailTemplate.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:EmailTemplate"/> with the specified name.
            </summary>
            <param name="name">A unique name for this template.</param>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.ID">
            <summary>
            Gets the ID assigned to this template.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.Headers">
            <summary>
            Specifies the custom headers that are transmitted with the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.Priority">
            <summary>
            Gets or sets the priority of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.From">
            <summary>
            Gets or sets the e-mail address of the sender of this e-mail.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.To">
            <summary>
            Gets or sets the address list of the recipients of this e-mail.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.Cc">
            <summary>
            Gets the address list or the carbon copy (CC) recipients for this e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.Bcc">
            <summary>
            Gets or sets the address list of the blind carbon copy (BCC) recipients for this e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.ReplyTo">
            <summary>
            Gets or sets the e-mail address for replies to this e-mail.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.Subject">
            <summary>
            Gets or sets the subject line of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.Body">
            <summary>
            Gets or sets the body of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.BodyEncoding">
            <summary>
            Gets or sets the encoding type of the body of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.IsBodyHtml">
            <summary>
            Gets or sets the content type of the body of the e-mail message.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.EmailTemplate.Repeaters">
            <summary>
            Gets the collection of repeaters defined within the body of the message.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.EmailTemplate.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:QCI.Net.Mail.EmailTemplate.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:QCI.Net.Mail.EmailTemplate.CreateMailMessage">
            <summary>
            Creates a new MailMessage object using data from this template.
            </summary>
            <returns>A MailMessage object containing current values from this template.</returns>
        </member>
        <member name="M:QCI.Net.Mail.EmailTemplate.ExtractRepeatersFromBody">
            <summary>
            Processes the Body string, extracting all repeaters found within it.  The repeater blocks are replaced with a variable string.
            </summary>
        </member>
        <member name="T:QCI.Net.Mail.EmailTemplatesSectionHandler">
            <summary>
            Defines a configuration section handler that can read email templates stored in a configuration file.
            </summary>
            <remarks>
            The following App.config syntax is supported:
            <code>
              <emailTemplates>
                <template name="templateName1"
                     fromAddress="from@qci.com"
                     toAddress="to@qci.com"
                     ccAddress="cc@qci.com"
                     bccAddress="bcc@qci.com"
                     replyToAddress="replyto@qci.com"    
                     priority="[High|Normal|Low]"
                     urlContentBase="[string]"
                     UrlContentLocation="[string]"
                     subjectLine="Requested QCI Account Information">
                  <body format="[Html|Text]" encoding="[System.Text.Encoding value]" file="[path]">
                  Body of email here, unless an external file is specified using the file attribute.
                  </body>
                </template>
              </emailTemplates>
            </code>
            </remarks>
        </member>
        <member name="M:QCI.Net.Mail.EmailTemplatesSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a new configuration handler and adds it to the section handler collection.
            </summary>
            <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
            <param name="configContext">The virtual path for which the configuration section handler computes configuration values. Normally this parameter is reserved and is a null reference.</param>
            <param name="sectionNode">The XmlNode that contains the configuration information to be handled. Provides direct access to the XML contents of the configuration section.</param>
            <returns>A Hashtable containing email templates as EmailTemplate objects, stored by their key value.</returns>
        </member>
        <member name="T:QCI.Net.Mail.TemplateBinding">
            <summary>
            Contains information about a single data-binding expression for a string variable in a template.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBinding.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of TemplateBinding.
            </summary>
            <param name="variable">The name of the variable within the template to be replaced with the results from evaluating the data-binding expression.</param>
            <param name="expression">The navigation path from the data-binding container to the property value that will replace the variable. This must be a string type of property or field names separated by dots, such as Tables[0].DefaultView.[0].Price.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBinding.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new instance of TemplateBinding.
            </summary>
            <param name="variable">The name of the variable within the template to be replaced with the results from evaluating the data-binding expression.</param>
            <param name="expression">The navigation path from the data-binding container to the property value that will replace the variable.  This must be a string type of property or field names separated by dots, such as Tables[0].DefaultView.[0].Price.</param>
            <param name="format">A format string like those used by String.Format, that converts the Object (which results from the evaluation of the data-binding expression) to a String.</param>
        </member>
        <member name="P:QCI.Net.Mail.TemplateBinding.Variable">
            <summary>
            Gets the name of the variable within the template that is replaced with the results from evaluating the data-binding expression.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.TemplateBinding.Expression">
            <summary>
            Gets the navigation path from the data-binding container to the property value that will replace the variable.  This must be a string type of property or field names separated by dots, such as Tables[0].DefaultView.[0].Price.
            </summary>
        </member>
        <member name="P:QCI.Net.Mail.TemplateBinding.Format">
            <summary>
            Gets the format string that converts the Object (which results from the evaluation of the data-binding expression) to a String.
            </summary>
        </member>
        <member name="T:QCI.Net.Mail.TemplateBindingCollection">
            <summary>
            Defines a collection that stores TemplateBinding objects.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.#ctor">
            <summary>
            Initializes a new instance of the TemplateBindingCollection class.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.#ctor(QCI.Net.Mail.TemplateBinding[])">
            <summary>
            Initializes a new instance of the TemplateBindingCollection class that contains 
            elements copied from the specified array.
            </summary>
            <param name="value">The array whose elements are copied to the new list.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.#ctor(QCI.Net.Mail.TemplateBindingCollection)">
            <summary>
            Initializes a new instance of the TemplateBindingCollection class that contains 
            elements copied from the specified collection.
            </summary>
            <param name="value">The TemplateBindingCollection whose elements are copied to the new list.</param>
        </member>
        <member name="P:QCI.Net.Mail.TemplateBindingCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.Add(QCI.Net.Mail.TemplateBinding)">
            <summary>
            Adds an item to the end of the collection.
            </summary>
            <param name="value">The item to add to the collection.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.Add(System.String,System.String)">
            <summary>
            Adds an item to the end of the collection.
            </summary>
            <param name="variable">The name of the variable within the template to be replaced with the results from evaluating the data-binding expression.</param>
            <param name="expression">The navigation path from the data-binding container to the property value that will replace the variable. This must be a string type of property or field names separated by dots, such as Tables[0].DefaultView.[0].Price.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.Add(System.String,System.String,System.String)">
            <summary>
            Adds an item to the end of the collection.
            </summary>
            <param name="variable">The name of the variable within the template to be replaced with the results from evaluating the data-binding expression.</param>
            <param name="expression">The navigation path from the data-binding container to the property value that will replace the variable.  This must be a string type of property or field names separated by dots, such as Tables[0].DefaultView.[0].Price.</param>
            <param name="format">A format string like those used by String.Format, that converts the Object (which results from the evaluation of the data-binding expression) to a String.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.AddRange(QCI.Net.Mail.TemplateBinding[])">
            <summary>
            Adds all the elements in the specified array to the end of the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.AddRange(QCI.Net.Mail.TemplateBindingCollection)">
            <summary>
            Adds all the elements in the specified collection to the end of the current collection.
            </summary>
            <param name="value">The collection containing the objects to add to the collection.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.Contains(QCI.Net.Mail.TemplateBinding)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="value">The item to locate in the collection.</param>
            <returns>True if the item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.CopyTo(QCI.Net.Mail.TemplateBinding[],System.Int32)">
            <summary>
            Copies all elements in the collection to a compatible one-dimensional Array, 
            starting at the specified Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the copied elements. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index at which copying begins.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.IndexOf(QCI.Net.Mail.TemplateBinding)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="value">The item to locate in the collection.</param>
            <returns>The index of the item found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.Insert(System.Int32,QCI.Net.Mail.TemplateBinding)">
            <summary>
            Inserts a item to the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="value">The item to insert into the collection.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.Remove(QCI.Net.Mail.TemplateBinding)">
            <summary>
            Removes the first occurrence of a specific item from the collection.
            </summary>
            <param name="value">The item to remove from the collection.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.Sort">
            <summary>
            Sorts all elements in the collection using the IComparable implementation 
            of each element.
            </summary>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts all elements in the collection using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing elements.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a section of the collection using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer implementation to use when comparing elements.</param>
        </member>
        <member name="M:QCI.Net.Mail.TemplateBindingCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="T:QCI.Range`1">
            <summary>
            Represents an range of values defined by a minumum and maximum value.
            </summary>
            <typeparam name="T">Type of the values in the range.</typeparam>
            <remarks>
            TODO: Add unit tests to verify all members.
            </remarks>
        </member>
        <member name="M:QCI.Range`1.#ctor(`0,`0)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="min">The lower bound of the range (value is inclusive).</param>
            <param name="max">The upper bound of the range (value is inclusive).</param>
        </member>
        <member name="P:QCI.Range`1.Min">
            <summary>
            The lower bound of this range (value is inclusive).
            </summary>
        </member>
        <member name="P:QCI.Range`1.Max">
            <summary>
            The upper bound of this range (value is inclusive).
            </summary>
        </member>
        <member name="M:QCI.Range`1.Contains(`0)">
            <summary>
            Indicates if this range contains <code>value</code>.
            </summary>
            <param name="value">The value to look for.</param>
            <returns>true if this range contains <code>value</code>, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:QCI.Range`1.Contains(QCI.Range{`0})">
            <summary>
            Indicates if this range fully contains the specified range.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if the entire range in <code>value</code> is within this range.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:QCI.Range`1.IsContainedBy(QCI.Range{`0})">
            <summary>
            Indicates if this range is fully contained by the specified range.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if the entire range is within <code>value</code>.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:QCI.Range`1.Overlaps(QCI.Range{`0})">
            <summary>
            Indicates if this range overlaps another range.
            </summary>
            <param name="value">The range to test.</param>
            <returns>true if any of value is within both ranges; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:QCI.Range`1.IsContiguousWith(QCI.Range{`0})">
            <summary>
            Indicates if this range is contiguous with another range.
            </summary>
            <param name="value">The range to check.</param>
            <returns>true if the two ranges are contiguous, false otherwise.</returns>
        </member>
        <member name="M:QCI.Range`1.IntersectWith(QCI.Range{`0})">
            <summary>
            Returns a range that represents the intersection of this range with another.
            </summary>
            <param name="value">The range to intersect with.</param>
            <returns>A range that contains the values that are common in both ranges; or null if there is no intersection.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>value</code> does not overlap the range.</exception>
        </member>
        <member name="M:QCI.Range`1.UnionWith(QCI.Range{`0})">
            <summary>
            Returns a range that represents the union of this range with another.
            The specified range must overlap this range or an exception will be throw.
            </summary>
            <param name="value">The range to intersect with.</param>
            <returns>A range that contains all values found in the two ranges.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>value</code> does not overlap the range.</exception>
        </member>
        <member name="M:QCI.Range`1.Split(`0)">
            <summary>
            Splits this range into two ranges at the specified value.
            </summary>
            <param name="position">The value position to split the range.</param>
            <returns>The split ranges.</returns>
            <exception cref="T:System.ArgumentNullException"><code>position</code> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><code>position</code> is not contained within the range.</exception>
        </member>
        <member name="M:QCI.Range`1.Subtract(QCI.Range{`0})">
            <summary>
            Returns a range that represents the subtraction of a given range from this instance.
            The specified range cannot be contained by this range or an exception will be throw.
            </summary>
            <param name="other">The range to intersect with.</param>
            <returns>A range containing values found in the current instance but not the other; or null if there is complete overlap.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>value</code> is fully within the range. Subtraction would result it two ranges.</exception>
        </member>
        <member name="M:QCI.Range`1.ToString">
            <summary>
            Returns a string that represents the current range.
            </summary>
        </member>
        <member name="M:QCI.Range`1.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>true if obj is an instance of matching type and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Range`1.Equals(QCI.Range{`0})">
            <summary>
            Determines whether this instance is equal to a specified <see cref="T:Range" /> object.
            </summary>
            <param name="other">The <see cref="T:Range" /> to compare with the current instance.</param>
            <returns>true if the specified <see cref="T:Range" /> equal the value of the current instance; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Range`1.GetHashCode">
            <summary>
            Returns the hash code for this instance based on the Min and Max property values.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:QCI.Range`1.op_Equality(QCI.Range{`0},QCI.Range{`0})">
            <summary>
            Determines whether two instances of <see cref="T:Range" /> are equal.
            </summary>
            <param name="left">A <see cref="T:Range"/> object to compare.</param>
            <param name="right">A <see cref="T:Range"/> object to compare.</param>
            <returns>true if a and b are equal; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Range`1.op_Inequality(QCI.Range{`0},QCI.Range{`0})">
            <summary>
            Overrides the not equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the two ranges are equal, false otherwise.</returns>
            <summary>
            Overrides the equals operator.
            </summary>
            <returns>true if the two ranges are equal, false otherwise.</returns>
        </member>
        <member name="T:QCI.Reflection.GenericInvoker">
            <summary>
            Represents a generic method.
            </summary>
        </member>
        <member name="T:QCI.Reflection.DynamicMethods">
            <summary>
            Generates high-performance delegates that can be used to invoke methods with generic signatures.
            </summary>
            <remarks>
            Adapted from:
            http://www.codeproject.com/KB/dotnet/InvokeGenericMethods.aspx
            </remarks>
        </member>
        <member name="M:QCI.Reflection.DynamicMethods.BuildGenericMethodInvoker(System.Type,System.String,System.Type[])">
            <summary>
            Creates a high-performance delegate for the specified generic method which invokes this method when called.
            </summary>
            <param name="type">The type containing the method.</param>
            <param name="methodName">The name of the method.</param>
            <param name="typeArguments">Array of generic type parameters for the specified generic method.</param>
            <returns>A <see cref="T:QCI.Reflection.GenericInvoker"/> designed to invoke the specified method when called.</returns>
        </member>
        <member name="M:QCI.Reflection.DynamicMethods.BuildGenericMethodInvoker(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Creates a high-performance delegate for the specified generic method which invokes this method when called.
            </summary>
            <param name="type">The type containing the method.</param>
            <param name="methodName">The name of the method.</param>
            <param name="typeArguments">Array of generic type parameters for the specified generic method.</param>
            <param name="parameterTypes">Array of method parameter types which identifies a specific overload.</param>
            <returns>A <see cref="T:QCI.Reflection.GenericInvoker"/> designed to invoke the specified method when called.</returns>
        </member>
        <member name="T:QCI.Reflection.FastReflection">
            <summary>
            Provides methods for fast property and field reflection.
            </summary>
        </member>
        <member name="M:QCI.Reflection.FastReflection.GetValue(System.Object,System.String)">
            <summary>
            Returns the value of a specified member or field from an object.
            </summary>
            <param name="instance">Object whose member value will be returned.</param>
            <param name="memberName">Name of the member to evaluate.</param>
            <returns>Value of the member.</returns>
        </member>
        <member name="M:QCI.Reflection.FastReflection.GetValue``1(System.Object,System.String)">
            <summary>
            Returns the value of a specified property or field from an object.
            </summary>
            <typeparam name="T">Return type of the member.</typeparam>
            <param name="instance">Object whose member value will be returned.</param>
            <param name="memberName">Name of the member to evaluate.</param>
            <returns>Value of the member.</returns>
        </member>
        <member name="M:QCI.Reflection.FastReflection.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a specified property or field for an object.
            </summary>
            <param name="instance">Object whose member value will be set.</param>
            <param name="memberName">Name of the member to evaluate.</param>
            <param name="value">New value for the member.</param>
        </member>
        <member name="M:QCI.Reflection.FastReflection.SetValue``1(System.Object,System.String,``0)">
            <summary>
            Sets the value of a specified property or field for an object.
            </summary>
            <typeparam name="T">Return type of the member.</typeparam>
            <param name="instance">Object whose member value will be set.</param>
            <param name="memberName">Name of the member to evaluate.</param>
            <param name="value">New value for the member.</param>
        </member>
        <member name="M:QCI.Reflection.FastReflection.GetAccessor(System.Type,System.String)">
            <summary>
            Returns a <see cref="T:QCI.Reflection.MemberAccessor"/> for a public property or field associated to a type,
            which can be used for high-performance reflection.
            </summary>
            <param name="type">Type containing the member to access.</param>
            <param name="memberName">Name of the member to be accessed.</param>
            <returns>A <see cref="T:QCI.Reflection.MemberAccessor"/> instance configured to access the member specified.</returns>
        </member>
        <member name="T:QCI.Reflection.FieldAccessor`2">
            <summary>
            Provides high-performance read/write access to a field within a type.
            </summary>
            <typeparam name="TObject">Type of the object to be accessed.</typeparam>
            <typeparam name="TValue">Data type of the field being accessed.</typeparam>
        </member>
        <member name="M:QCI.Reflection.FieldAccessor`2.#ctor(System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="fieldName">Name of the field to be accessed.</param>
        </member>
        <member name="M:QCI.Reflection.FieldAccessor`2.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="fi"><see cref="P:QCI.Reflection.FieldAccessor`2.FieldInfo"/> of the field to be accessed.</param>
        </member>
        <member name="P:QCI.Reflection.FieldAccessor`2.MemberInfo">
            <summary>
            Gets the metadata of the member accessed by this instance.
            </summary>
        </member>
        <member name="P:QCI.Reflection.FieldAccessor`2.FieldInfo">
            <summary>
            Gets the metadata of the field accessed by this instance.
            </summary>
        </member>
        <member name="M:QCI.Reflection.FieldAccessor`2.GetValue(`0)">
            <summary>
            Returns the value of the field accessed by this instance.
            </summary>
            <param name="instance">Object whose field value will be returned.</param>
            <returns>The value of the field.</returns>
        </member>
        <member name="M:QCI.Reflection.FieldAccessor`2.SetValue(`0,`1)">
            <summary>
            Sets the value of the field accessed by this instance.
            </summary>
            <param name="instance">Object whose field value will be set.</param>
            <param name="value">New value for the field.</param>
        </member>
        <member name="T:QCI.Reflection.MemberAccessor">
            <summary>
            Provides high-performance read/write access to a property or field of a type.
            </summary>
        </member>
        <member name="P:QCI.Reflection.MemberAccessor.MemberInfo">
            <summary>
            Gets the metadata of the member accessed by this instance.
            </summary>
        </member>
        <member name="P:QCI.Reflection.MemberAccessor.Type">
            <summary>
            Gets the type of this member's value.
            </summary>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor.GetBoxedValue(System.Object)">
            <summary>
            Returns the value of the member accessed by this instance.
            </summary>
            <param name="instance">Object whose member value will be returned.</param>
            <returns>The value of the member.</returns>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor.SetBoxedValue(System.Object,System.Object)">
            <summary>
            Sets the value of the member accessed by this instance.
            </summary>
            <param name="instance">Object whose member value will be set.</param>
            <param name="value">New value for the member.</param>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor.GetBoxedDefaultValue">
            <summary>
            Returns the default value for the type of the member accessed by this instance.
            </summary>
            <returns>The default value of the member's type.</returns>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor.CopyTo(System.Object,System.Object)">
            <summary>
            Copies the value of the member referenced by this instance from a source
            object to another object.
            </summary>
            <param name="source">Object holding the value to be copied.</param>
            <param name="destination">Object to receive the copied value.</param>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor.CreateAccessor(System.Reflection.MemberInfo)">
            <summary>
            Creates a <see cref="T:QCI.Reflection.MemberAccessor"/> providing high-performance access to a member of a type.
            </summary>
            <param name="mi">Member to be accessed.</param>
            <returns>A <see cref="T:QCI.Reflection.MemberAccessor"/> with access to the specified member.</returns>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor.CreateAccessor(System.Type,System.String)">
            <summary>
            Create a <see cref="T:QCI.Reflection.MemberAccessor"/> providing high-performance access to a member of a type.
            </summary>
            <param name="declaringType">Type containing the member to access.</param>
            <param name="memberName">Name of the member to be accessed.</param>
            <returns>A <see cref="T:QCI.Reflection.MemberAccessor"/> instance configured to access the member specified.</returns>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor.CreateAccessor(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Create a <see cref="T:QCI.Reflection.MemberAccessor"/> providing high-performance access to a member of a type.
            </summary>
            <param name="accessorType">Type in the inheritance tree of the specified MemberInfo.</param>
            <param name="mi">Member to be accessed.</param>
            <returns>A <see cref="T:QCI.Reflection.MemberAccessor"/> with access to the specified member.</returns>
        </member>
        <member name="T:QCI.Reflection.MemberAccessor`2">
            <summary>
            Provides high-performance read/write access to a member of a type.
            </summary>
            <typeparam name="TObject">Type of the object to be accessed.</typeparam>
            <typeparam name="TValue">Data type of the member being accessed.</typeparam>
        </member>
        <member name="P:QCI.Reflection.MemberAccessor`2.Type">
            <summary>
            Gets the type of this member's value.
            </summary>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor`2.GetValue(`0)">
            <summary>
            Returns the value of the member accessed by this instance.
            </summary>
            <param name="instance">Object whose member value will be returned.</param>
            <returns>The value of the member.</returns>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor`2.SetValue(`0,`1)">
            <summary>
            Sets the value of the member accessed by this instance.
            </summary>
            <param name="instance">Object whose member value will be set.</param>
            <param name="value">New value for the member.</param>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor`2.GetBoxedValue(System.Object)">
            <summary>
            Returns the value of the member accessed by this instance.
            </summary>
            <param name="instance">Object whose member value will be returned.</param>
            <returns>The value of the member.</returns>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor`2.SetBoxedValue(System.Object,System.Object)">
            <summary>
            Sets the value of the member accessed by this instance.
            </summary>
            <param name="instance">Object whose member value will be set.</param>
            <param name="value">New value for the member.</param>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor`2.GetBoxedDefaultValue">
            <summary>
            Returns the default value for the type of the member accessed by this instance.
            </summary>
            <returns>The default value of the member's type.</returns>
        </member>
        <member name="M:QCI.Reflection.MemberAccessor`2.CopyTo(System.Object,System.Object)">
            <summary>
            Copies the value of the member referenced by this instance from a source
            object to another object.
            </summary>
            <param name="source">Object holding the value to be copied.</param>
            <param name="destination">Object to receive the copied value.</param>
        </member>
        <member name="T:QCI.Reflection.PropertyAccessor`2">
            <summary>
            Provides high-performance read/write access to a property of a type.
            </summary>
            <typeparam name="TObject">Type of the object to be accessed.</typeparam>
            <typeparam name="TValue">Data type of the property being accessed.</typeparam>
        </member>
        <member name="M:QCI.Reflection.PropertyAccessor`2.#ctor(System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="propertyName">Name of the property to be accessed.</param>
        </member>
        <member name="M:QCI.Reflection.PropertyAccessor`2.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="pi"><see cref="P:QCI.Reflection.PropertyAccessor`2.PropertyInfo"/> of the property to be accessed.</param>
        </member>
        <member name="P:QCI.Reflection.PropertyAccessor`2.MemberInfo">
            <summary>
            Gets the metadata of the member accessed by this instance.
            </summary>
        </member>
        <member name="P:QCI.Reflection.PropertyAccessor`2.PropertyInfo">
            <summary>
            Gets the metadata of the field accessed by this instance.
            </summary>
        </member>
        <member name="M:QCI.Reflection.PropertyAccessor`2.GetValue(`0)">
            <summary>
            Returns the value of the property accessed by this instance.
            </summary>
            <param name="instance">Object whose property value will be returned.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:QCI.Reflection.PropertyAccessor`2.SetValue(`0,`1)">
            <summary>
            Sets the value of the property accessed by this instance.
            </summary>
            <param name="instance">Object whose property value will be set.</param>
            <param name="value">New value for the property.</param>
        </member>
        <member name="T:QCI.Reflection.TypeSystem">
            <summary>
            Provides helper methods for common type-related operations.
            </summary>
        </member>
        <member name="M:QCI.Reflection.TypeSystem.IsNullableType(System.Type)">
            <summary>
            Indicates whether the specific type inherits from <see cref="T:Nullable{}"/>.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>True if the type is nullable; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Reflection.TypeSystem.IsNullAssignable(System.Type)">
            <summary>
            Indicates whether the specified type can be assigned a value of <value>null</value>.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>True if the type supports null assignment; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Reflection.TypeSystem.GetNonNullableType(System.Type)">
            <summary>
            For types that implement <see cref="T:Nullable{}"/>, the underlying type is returned.
            For typee that do not implement <see cref="T:Nullable{}"/>, the specified type is returned.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>The underlying non-nullable type; or the passed type if already not nullable.</returns>
        </member>
        <member name="M:QCI.Reflection.TypeSystem.IsSimpleType(System.Type)">
            <summary>
            Determines if the specified type is considered "simple".
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:QCI.Reflection.TypeSystem.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Returns the type of a <see cref="T:System.Reflection.MemberInfo"/> object.
            </summary>
            <param name="mi">The <see cref="T:MemberInfo"/> to evaluate.</param>
            <returns>The <see cref="T:Type"/> of the class member.</returns>
        </member>
        <member name="T:QCI.Reflection.ResourceHelper">
            <summary>
            Utility class to assist with finding and extracting embedded resources within assemblies.
            </summary>
        </member>
        <member name="M:QCI.Reflection.ResourceHelper.FindAssemblyByName(System.String)">
            <summary>
            Finds a loaded assembly by it's simple name.
            </summary>
            <param name="assemblyName">Assembly simple name (usually the physical file name minus the extension).</param>
            <returns>The assembly with the specified name; or null if no assembly was found.</returns>
        </member>
        <member name="M:QCI.Reflection.ResourceHelper.ResolveFileName(System.Reflection.Assembly,System.String)">
            <summary>
            Resolves an embedding file to its fully-qualified resource name based on it's original file name.
            An exception is throw if the name could not be resolved.
            </summary>
            <param name="assembly">Assembly containing the resource to be located.</param>
            <param name="fileName">Name of the file embedded as a resource.</param>
            <returns>Fully-qualified resource name.</returns>
        </member>
        <member name="M:QCI.Reflection.ResourceHelper.TryResolveFileName(System.Reflection.Assembly,System.String,System.String@)">
            <summary>
            Attempts to resolve an embedding file to its fully-qualified resource name based on it's original file name.
            </summary>
            <param name="assembly">Assembly containing the resource to be located.</param>
            <param name="fileName">Name of the file embedded as a resource.</param>
            <param name="fullResourceName">Fully-qualified resource name.</param>
            <returns>True if the name was resolved; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Reflection.ResourceHelper.LoadXmlDoc(System.String)">
            <summary>
            Loads an XML file embedded in an assembly as a resource.
            </summary>
            <param name="resourceName">Fully-qualified name of the resource to load.</param>
            <returns>Populated XmlDocument.</returns>
        </member>
        <member name="M:QCI.Reflection.ResourceHelper.LoadXmlDoc(System.Type,System.String)">
            <summary>
            Loads an XML file embedded in an assembly as a resource.
            </summary>
            <param name="contextType">The type whose namespace is used to scope the manifest resource name.</param>
            <param name="resourceName">Short name of the resource to load.</param>
            <returns>A stream representing the manifest resource.</returns>
        </member>
        <member name="M:QCI.Reflection.ResourceHelper.GetResourceStream(System.String)">
            <summary>
            Loads the specified manifest resource.
            All loaded assemblies are searched.
            </summary>
            <param name="resourceName">Fully-qualified name of the resource to load.</param>
            <returns>A stream representing the manifest resource.</returns>
        </member>
        <member name="M:QCI.Reflection.ResourceHelper.GetResourceStream(System.Type,System.String)">
            <summary>
            Loads the specified manifest resource, scoped by the namespace of the specified type.
            All loaded assemblies are searched.
            </summary>
            <param name="contextType">The type whose namespace is used to scope the manifest resource name.</param>
            <param name="resourceName">Short name of the resource to load.</param>
            <returns>A stream representing the manifest resource.</returns>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.#ctor(System.String)">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ListSecureMethodsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadReportCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadReportDefinitionCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SetExecutionCredentialsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SetExecutionParametersCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ResetExecutionCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.RenderCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.RenderStreamCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetExecutionInfoCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetDocumentMapCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadDrillthroughTargetCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ToggleItemCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.NavigateDocumentMapCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.NavigateBookmarkCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.FindStringCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SortCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetRenderResourceCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ListRenderingExtensionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LogonUserCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LogoffCompleted">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ListSecureMethods">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ListSecureMethodsAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ListSecureMethodsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadReport(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadReportAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadReportAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadReportDefinition(System.Byte[],QCI.ReportingServices.Internals.ReportingServices2005.Warning[]@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadReportDefinitionAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadReportDefinitionAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SetExecutionCredentials(QCI.ReportingServices.Internals.ReportingServices2005.DataSourceCredentials[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SetExecutionCredentialsAsync(QCI.ReportingServices.Internals.ReportingServices2005.DataSourceCredentials[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SetExecutionCredentialsAsync(QCI.ReportingServices.Internals.ReportingServices2005.DataSourceCredentials[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SetExecutionParameters(QCI.ReportingServices.Internals.ReportingServices2005.ParameterValue[],System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SetExecutionParametersAsync(QCI.ReportingServices.Internals.ReportingServices2005.ParameterValue[],System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SetExecutionParametersAsync(QCI.ReportingServices.Internals.ReportingServices2005.ParameterValue[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ResetExecution">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ResetExecutionAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ResetExecutionAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.Render(System.String,System.String,System.String@,System.String@,System.String@,QCI.ReportingServices.Internals.ReportingServices2005.Warning[]@,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.RenderAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.RenderAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.RenderStream(System.String,System.String,System.String,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.RenderStreamAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.RenderStreamAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetExecutionInfo">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetExecutionInfoAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetExecutionInfoAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetDocumentMap">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetDocumentMapAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetDocumentMapAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadDrillthroughTarget(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadDrillthroughTargetAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LoadDrillthroughTargetAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ToggleItem(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ToggleItemAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ToggleItemAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.NavigateDocumentMap(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.NavigateDocumentMapAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.NavigateDocumentMapAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.NavigateBookmark(System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.NavigateBookmarkAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.NavigateBookmarkAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.FindString(System.Int32,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.FindStringAsync(System.Int32,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.FindStringAsync(System.Int32,System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.Sort(System.String,QCI.ReportingServices.Internals.ReportingServices2005.SortDirectionEnum,System.Boolean,System.String@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SortAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2005.SortDirectionEnum,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.SortAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2005.SortDirectionEnum,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetRenderResource(System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetRenderResourceAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.GetRenderResourceAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ListRenderingExtensions">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ListRenderingExtensionsAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.ListRenderingExtensionsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LogonUser(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LogonUserAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LogonUserAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.Logoff">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LogoffAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.LogoffAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2005.ReportExecutionService2005.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ServerInfoHeader">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ServerInfoHeader.ReportServerVersionNumber">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ServerInfoHeader.ReportServerEdition">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ServerInfoHeader.ReportServerVersion">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ServerInfoHeader.ReportServerDateTime">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ServerInfoHeader.AnyAttr">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.Extension">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.Extension.ExtensionType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.Extension.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.Extension.LocalizedName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.Extension.Visible">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.Extension.IsModelGenerationSupported">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ExtensionTypeEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ExtensionTypeEnum.Delivery">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ExtensionTypeEnum.Render">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ExtensionTypeEnum.Data">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ExtensionTypeEnum.All">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.DocumentMapNode">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.DocumentMapNode.Label">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.DocumentMapNode.UniqueName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.DocumentMapNode.Children">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ParameterValueOrFieldReference">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ParameterValue">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ParameterValue.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ParameterValue.Value">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ParameterValue.Label">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.DataSourceCredentials">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.DataSourceCredentials.DataSourceName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.DataSourceCredentials.UserName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.DataSourceCredentials.Password">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.Warning">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.Warning.Code">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.Warning.Severity">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.Warning.ObjectName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.Warning.ObjectType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.Warning.Message">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ReportMargins">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportMargins.Top">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportMargins.Bottom">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportMargins.Left">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportMargins.Right">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ReportPaperSize">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportPaperSize.Height">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportPaperSize.Width">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.PageSettings">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.PageSettings.PaperSize">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.PageSettings.Margins">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.DataSourcePrompt">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.DataSourcePrompt.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.DataSourcePrompt.DataSourceID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.DataSourcePrompt.Prompt">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ValidValue">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ValidValue.Label">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ValidValue.Value">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.Type">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.TypeSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.Nullable">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.NullableSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.AllowBlank">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.AllowBlankSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.MultiValue">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.MultiValueSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.QueryParameter">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.QueryParameterSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.Prompt">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.PromptUser">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.PromptUserSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.Dependencies">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.ValidValuesQueryBased">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.ValidValuesQueryBasedSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.ValidValues">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.DefaultValuesQueryBased">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.DefaultValuesQueryBasedSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.DefaultValues">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.State">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.StateSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ReportParameter.ErrorMessage">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ParameterTypeEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ParameterTypeEnum.Boolean">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ParameterTypeEnum.DateTime">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ParameterTypeEnum.Integer">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ParameterTypeEnum.Float">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ParameterTypeEnum.String">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ParameterStateEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ParameterStateEnum.HasValidValue">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ParameterStateEnum.MissingValidValue">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ParameterStateEnum.HasOutstandingDependencies">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.ParameterStateEnum.DynamicValuesUnavailable">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.HasSnapshot">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.NeedsProcessing">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.AllowQueryExecution">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.CredentialsRequired">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.ParametersRequired">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.ExpirationDateTime">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.ExecutionDateTime">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.NumPages">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.Parameters">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.DataSourcePrompts">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.HasDocumentMap">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.ExecutionID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.ReportPath">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.HistoryID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.ReportPageSettings">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionInfo.AutoRefreshInterval">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionHeader">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionHeader.ExecutionID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ExecutionHeader.AnyAttr">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.TrustedUserHeader">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.TrustedUserHeader.UserName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.TrustedUserHeader.UserToken">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.TrustedUserHeader.AnyAttr">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.SortDirectionEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.SortDirectionEnum.None">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.SortDirectionEnum.Ascending">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2005.SortDirectionEnum.Descending">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ListSecureMethodsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ListSecureMethodsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ListSecureMethodsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.LoadReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.LoadReportCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.LoadReportCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.LoadReportDefinitionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.LoadReportDefinitionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.LoadReportDefinitionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.LoadReportDefinitionCompletedEventArgs.warnings">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.SetExecutionCredentialsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.SetExecutionCredentialsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.SetExecutionCredentialsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.SetExecutionParametersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.SetExecutionParametersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.SetExecutionParametersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ResetExecutionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ResetExecutionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ResetExecutionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.RenderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.RenderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.RenderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.RenderCompletedEventArgs.Extension">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.RenderCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.RenderCompletedEventArgs.Encoding">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.RenderCompletedEventArgs.Warnings">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.RenderCompletedEventArgs.StreamIds">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.RenderStreamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.RenderStreamCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.RenderStreamCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.RenderStreamCompletedEventArgs.Encoding">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.RenderStreamCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.GetExecutionInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.GetExecutionInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.GetExecutionInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.GetDocumentMapCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.GetDocumentMapCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.GetDocumentMapCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.LoadDrillthroughTargetCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.LoadDrillthroughTargetCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.LoadDrillthroughTargetCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ToggleItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ToggleItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ToggleItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.NavigateDocumentMapCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.NavigateDocumentMapCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.NavigateDocumentMapCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.NavigateBookmarkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.NavigateBookmarkCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.NavigateBookmarkCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.NavigateBookmarkCompletedEventArgs.UniqueName">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.FindStringCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.FindStringCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.FindStringCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.SortCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.SortCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.SortCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.SortCompletedEventArgs.ReportItem">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.SortCompletedEventArgs.NumPages">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.GetRenderResourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.GetRenderResourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.GetRenderResourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.GetRenderResourceCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ListRenderingExtensionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.ListRenderingExtensionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2005.ListRenderingExtensionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.LogonUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2005.LogoffCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.#ctor(System.String)">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSecureMethodsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateBatchCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CancelBatchCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ExecuteBatchCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSystemPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteItemCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.MoveItemCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListChildrenCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetItemTypeCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateFolderCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateReportCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDefinitionCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportDefinitionCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateResourceCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetResourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetResourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportParametersCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportParametersCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateLinkedReportCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportLinkCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportLinkCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListLinkedReportsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.RenderCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.RenderStreamCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetRenderResourceCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetExecutionOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetExecutionOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetCacheOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetCacheOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.UpdateReportExecutionSnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FlushCacheCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListJobsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CancelJobCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetDataSourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetDataSourceContentsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.EnableDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DisableDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListReportsUsingDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportDataSourcesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDataSourcesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDataSourcePromptsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateReportHistorySnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportHistoryOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportHistoryOptionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportHistoryLimitCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportHistoryLimitCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListReportHistoryCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteReportHistorySnapshotCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FindItemsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSchedulePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSchedulePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListScheduledReportsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSchedulesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.PauseScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ResumeScheduleCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateDataDrivenSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetDataDrivenSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetDataDrivenSubscriptionPropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteSubscriptionCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.PrepareQueryCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetExtensionSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ValidateExtensionSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSubscriptionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSubscriptionsUsingDataSourceCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListExtensionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListEventsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FireEventCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSystemTasksCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListTasksCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSystemRolesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListRolesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateRoleCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteRoleCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetRolePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetRolePropertiesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSystemPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetPoliciesCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.InheritParentSecurityCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPermissionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPermissionsCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.LogonUserCompleted">
            <remarks/>
        </member>
        <member name="E:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.LogoffCompleted">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSecureMethods">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSecureMethodsAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSecureMethodsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateBatch">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateBatchAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateBatchAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CancelBatch">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CancelBatchAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CancelBatchAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ExecuteBatch">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ExecuteBatchAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ExecuteBatchAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemProperties(QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPropertiesAsync(QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPropertiesAsync(QCI.ReportingServices.Internals.ReportingServices2003.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSystemProperties(QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSystemPropertiesAsync(QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSystemPropertiesAsync(QCI.ReportingServices.Internals.ReportingServices2003.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteItem(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteItemAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteItemAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.MoveItem(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.MoveItemAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.MoveItemAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListChildren(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListChildrenAsync(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListChildrenAsync(System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetProperties(System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPropertiesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPropertiesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetProperties(System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetPropertiesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetPropertiesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetItemType(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetItemTypeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetItemTypeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateFolder(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateFolderAsync(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateFolderAsync(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateReport(System.String,System.String,System.Boolean,System.Byte[],QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateReportAsync(System.String,System.String,System.Boolean,System.Byte[],QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateReportAsync(System.String,System.String,System.Boolean,System.Byte[],QCI.ReportingServices.Internals.ReportingServices2003.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDefinition(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDefinitionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDefinitionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportDefinition(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportDefinitionAsync(System.String,System.Byte[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportDefinitionAsync(System.String,System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateResource(System.String,System.String,System.Boolean,System.Byte[],System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateResourceAsync(System.String,System.String,System.Boolean,System.Byte[],System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateResourceAsync(System.String,System.String,System.Boolean,System.Byte[],System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetResourceContents(System.String,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetResourceContentsAsync(System.String,System.Byte[],System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetResourceContentsAsync(System.String,System.Byte[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetResourceContents(System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetResourceContentsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetResourceContentsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportParameters(System.String,System.String,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[],QCI.ReportingServices.Internals.ReportingServices2003.DataSourceCredentials[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportParametersAsync(System.String,System.String,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[],QCI.ReportingServices.Internals.ReportingServices2003.DataSourceCredentials[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportParametersAsync(System.String,System.String,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[],QCI.ReportingServices.Internals.ReportingServices2003.DataSourceCredentials[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportParameters(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportParametersAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportParametersAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateLinkedReport(System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateLinkedReportAsync(System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateLinkedReportAsync(System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportLink(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportLinkAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportLinkAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportLink(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportLinkAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportLinkAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListLinkedReports(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListLinkedReportsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListLinkedReportsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.Render(System.String,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[],QCI.ReportingServices.Internals.ReportingServices2003.DataSourceCredentials[],System.String,System.String@,System.String@,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[]@,QCI.ReportingServices.Internals.ReportingServices2003.Warning[]@,System.String[]@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.RenderAsync(System.String,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[],QCI.ReportingServices.Internals.ReportingServices2003.DataSourceCredentials[],System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.RenderAsync(System.String,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[],QCI.ReportingServices.Internals.ReportingServices2003.DataSourceCredentials[],System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.RenderStream(System.String,System.String,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[],System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.RenderStreamAsync(System.String,System.String,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.RenderStreamAsync(System.String,System.String,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetRenderResource(System.String,System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetRenderResourceAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetRenderResourceAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetExecutionOptions(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExecutionSettingEnum,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetExecutionOptionsAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExecutionSettingEnum,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetExecutionOptionsAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExecutionSettingEnum,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinitionOrReference,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetExecutionOptions(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinitionOrReference@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetExecutionOptionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetExecutionOptionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetCacheOptions(System.String,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.ExpirationDefinition)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetCacheOptionsAsync(System.String,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.ExpirationDefinition)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetCacheOptionsAsync(System.String,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.ExpirationDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetCacheOptions(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExpirationDefinition@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetCacheOptionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetCacheOptionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.UpdateReportExecutionSnapshot(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.UpdateReportExecutionSnapshotAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.UpdateReportExecutionSnapshotAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FlushCache(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FlushCacheAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FlushCacheAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListJobs">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListJobsAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListJobsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CancelJob(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CancelJobAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CancelJobAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateDataSource(System.String,System.String,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateDataSourceAsync(System.String,System.String,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition,QCI.ReportingServices.Internals.ReportingServices2003.Property[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateDataSourceAsync(System.String,System.String,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition,QCI.ReportingServices.Internals.ReportingServices2003.Property[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetDataSourceContents(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetDataSourceContentsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetDataSourceContentsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetDataSourceContents(System.String,QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetDataSourceContentsAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetDataSourceContentsAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.EnableDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.EnableDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.EnableDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DisableDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DisableDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DisableDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListReportsUsingDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListReportsUsingDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListReportsUsingDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportDataSources(System.String,QCI.ReportingServices.Internals.ReportingServices2003.DataSource[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportDataSourcesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.DataSource[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportDataSourcesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.DataSource[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDataSources(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDataSourcesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDataSourcesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDataSourcePrompts(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDataSourcePromptsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportDataSourcePromptsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateReportHistorySnapshot(System.String,QCI.ReportingServices.Internals.ReportingServices2003.Warning[]@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateReportHistorySnapshotAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateReportHistorySnapshotAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportHistoryOptions(System.String,System.Boolean,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportHistoryOptionsAsync(System.String,System.Boolean,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinitionOrReference)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportHistoryOptionsAsync(System.String,System.Boolean,System.Boolean,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinitionOrReference,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportHistoryOptions(System.String,System.Boolean@,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinitionOrReference@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportHistoryOptionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportHistoryOptionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportHistoryLimit(System.String,System.Boolean,System.Int32)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportHistoryLimitAsync(System.String,System.Boolean,System.Int32)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetReportHistoryLimitAsync(System.String,System.Boolean,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportHistoryLimit(System.String,System.Boolean@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportHistoryLimitAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetReportHistoryLimitAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListReportHistory(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListReportHistoryAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListReportHistoryAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteReportHistorySnapshot(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteReportHistorySnapshotAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteReportHistorySnapshotAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FindItems(System.String,QCI.ReportingServices.Internals.ReportingServices2003.BooleanOperatorEnum,QCI.ReportingServices.Internals.ReportingServices2003.SearchCondition[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FindItemsAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.BooleanOperatorEnum,QCI.ReportingServices.Internals.ReportingServices2003.SearchCondition[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FindItemsAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.BooleanOperatorEnum,QCI.ReportingServices.Internals.ReportingServices2003.SearchCondition[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateSchedule(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateScheduleAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateScheduleAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteSchedule(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteScheduleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteScheduleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetScheduleProperties(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSchedulePropertiesAsync(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSchedulePropertiesAsync(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetScheduleProperties(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSchedulePropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSchedulePropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListScheduledReports(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListScheduledReportsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListScheduledReportsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSchedules">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSchedulesAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSchedulesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.PauseSchedule(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.PauseScheduleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.PauseScheduleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ResumeSchedule(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ResumeScheduleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ResumeScheduleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateSubscription(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateSubscriptionAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateSubscriptionAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateDataDrivenSubscription(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,QCI.ReportingServices.Internals.ReportingServices2003.DataRetrievalPlan,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateDataDrivenSubscriptionAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,QCI.ReportingServices.Internals.ReportingServices2003.DataRetrievalPlan,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateDataDrivenSubscriptionAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,QCI.ReportingServices.Internals.ReportingServices2003.DataRetrievalPlan,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSubscriptionProperties(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSubscriptionPropertiesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSubscriptionPropertiesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetDataDrivenSubscriptionProperties(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,QCI.ReportingServices.Internals.ReportingServices2003.DataRetrievalPlan,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetDataDrivenSubscriptionPropertiesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,QCI.ReportingServices.Internals.ReportingServices2003.DataRetrievalPlan,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetDataDrivenSubscriptionPropertiesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings,QCI.ReportingServices.Internals.ReportingServices2003.DataRetrievalPlan,System.String,System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSubscriptionProperties(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings@,System.String@,QCI.ReportingServices.Internals.ReportingServices2003.ActiveState@,System.String@,System.String@,System.String@,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue[]@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSubscriptionPropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSubscriptionPropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetDataDrivenSubscriptionProperties(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings@,QCI.ReportingServices.Internals.ReportingServices2003.DataRetrievalPlan@,System.String@,QCI.ReportingServices.Internals.ReportingServices2003.ActiveState@,System.String@,System.String@,System.String@,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference[]@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetDataDrivenSubscriptionPropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetDataDrivenSubscriptionPropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteSubscription(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteSubscriptionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteSubscriptionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.PrepareQuery(QCI.ReportingServices.Internals.ReportingServices2003.DataSource,QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition,System.Boolean@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.PrepareQueryAsync(QCI.ReportingServices.Internals.ReportingServices2003.DataSource,QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.PrepareQueryAsync(QCI.ReportingServices.Internals.ReportingServices2003.DataSource,QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetExtensionSettings(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetExtensionSettingsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetExtensionSettingsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ValidateExtensionSettings(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ValidateExtensionSettingsAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ValidateExtensionSettingsAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSubscriptions(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSubscriptionsAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSubscriptionsAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSubscriptionsUsingDataSource(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSubscriptionsUsingDataSourceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSubscriptionsUsingDataSourceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListExtensions(QCI.ReportingServices.Internals.ReportingServices2003.ExtensionTypeEnum)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListExtensionsAsync(QCI.ReportingServices.Internals.ReportingServices2003.ExtensionTypeEnum)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListExtensionsAsync(QCI.ReportingServices.Internals.ReportingServices2003.ExtensionTypeEnum,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListEvents">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListEventsAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListEventsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FireEvent(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FireEventAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.FireEventAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSystemTasks">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSystemTasksAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSystemTasksAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListTasks">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListTasksAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListTasksAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSystemRoles">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSystemRolesAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListSystemRolesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListRoles">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListRolesAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.ListRolesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateRole(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Task[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateRoleAsync(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Task[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CreateRoleAsync(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Task[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteRole(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteRoleAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.DeleteRoleAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetRoleProperties(System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetRolePropertiesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetRolePropertiesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetRoleProperties(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Task[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetRolePropertiesAsync(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Task[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetRolePropertiesAsync(System.String,System.String,QCI.ReportingServices.Internals.ReportingServices2003.Task[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPolicies">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPoliciesAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPoliciesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSystemPolicies(QCI.ReportingServices.Internals.ReportingServices2003.Policy[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSystemPoliciesAsync(QCI.ReportingServices.Internals.ReportingServices2003.Policy[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetSystemPoliciesAsync(QCI.ReportingServices.Internals.ReportingServices2003.Policy[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPolicies(System.String,System.Boolean@)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPoliciesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPoliciesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetPolicies(System.String,QCI.ReportingServices.Internals.ReportingServices2003.Policy[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetPoliciesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.Policy[])">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.SetPoliciesAsync(System.String,QCI.ReportingServices.Internals.ReportingServices2003.Policy[],System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.InheritParentSecurity(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.InheritParentSecurityAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.InheritParentSecurityAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPermissions">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPermissionsAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetSystemPermissionsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPermissions(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPermissionsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.GetPermissionsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.LogonUser(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.LogonUserAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.LogonUserAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.Logoff">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.LogoffAsync">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.LogoffAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:QCI.ReportingServices.Internals.ReportingServices2003.ReportingService2003.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ServerInfoHeader">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ServerInfoHeader.ReportServerVersionNumber">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ServerInfoHeader.ReportServerEdition">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Policy">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Policy.GroupUserName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Policy.Roles">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Role">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Role.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Role.Description">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Task">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Task.TaskID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Task.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Task.Description">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Event">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Event.Type">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Extension">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Extension.ExtensionType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Extension.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Extension.LocalizedName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Extension.Visible">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionTypeEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionTypeEnum.Delivery">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionTypeEnum.Render">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionTypeEnum.Data">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionTypeEnum.All">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Subscription">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.SubscriptionID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.Owner">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.Path">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.VirtualPath">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.Report">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.DeliverySettings">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.Description">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.Status">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.Active">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.LastExecuted">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.LastExecutedSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.ModifiedBy">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.EventType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Subscription.IsDataDriven">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings.Extension">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionSettings.ParameterValues">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ParameterFieldReference">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ParameterFieldReference.ParameterName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ParameterFieldReference.FieldAlias">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ParameterValueOrFieldReference">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue.Value">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ParameterValue.Label">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState.DeliveryExtensionRemoved">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState.DeliveryExtensionRemovedSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState.SharedDataSourceRemoved">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState.SharedDataSourceRemovedSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState.MissingParameterValue">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState.MissingParameterValueSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState.InvalidParameterValue">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState.InvalidParameterValueSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState.UnknownReportParameter">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ActiveState.UnknownReportParameterSpecified">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter.DisplayName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter.Required">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter.RequiredSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter.ReadOnly">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter.Value">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter.Error">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter.Encrypted">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter.IsPassword">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ExtensionParameter.ValidValues">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ValidValue">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ValidValue.Label">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ValidValue.Value">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.QueryDefinition">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.QueryDefinition.CommandType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.QueryDefinition.CommandText">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.QueryDefinition.Timeout">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.QueryDefinition.TimeoutSpecified">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Field">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Field.Alias">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Field.Name">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.Fields">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.Query">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.CaseSensitivity">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.CaseSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.Collation">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.AccentSensitivity">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.AccentSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.KanatypeSensitivity">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.KanatypeSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.WidthSensitivity">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.WidthSensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSetDefinition.Name">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SensitivityEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.SensitivityEnum.True">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.SensitivityEnum.False">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.SensitivityEnum.Auto">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DataRetrievalPlan">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataRetrievalPlan.Item">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataRetrievalPlan.DataSet">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.Extension">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.ConnectString">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.CredentialRetrieval">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.WindowsCredentials">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.ImpersonateUser">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.ImpersonateUserSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.Prompt">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.UserName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.Password">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.Enabled">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinition.EnabledSpecified">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CredentialRetrievalEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.CredentialRetrievalEnum.Prompt">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.CredentialRetrievalEnum.Store">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.CredentialRetrievalEnum.Integrated">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.CredentialRetrievalEnum.None">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceDefinitionOrReference">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceReference">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceReference.Reference">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.InvalidDataSourceReference">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Schedule">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.ScheduleID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.Definition">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.Description">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.Creator">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.NextRunTime">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.NextRunTimeSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.LastRunTime">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.LastRunTimeSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.ReferencesPresent">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Schedule.State">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition.StartDateTime">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition.EndDate">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition.EndDateSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinition.Item">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DailyRecurrence">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DailyRecurrence.DaysInterval">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.RecurrencePattern">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.WeeklyRecurrence">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.WeeklyRecurrence.WeeksInterval">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.WeeklyRecurrence.WeeksIntervalSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.WeeklyRecurrence.DaysOfWeek">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DaysOfWeekSelector">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DaysOfWeekSelector.Sunday">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DaysOfWeekSelector.Monday">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DaysOfWeekSelector.Tuesday">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DaysOfWeekSelector.Wednesday">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DaysOfWeekSelector.Thursday">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DaysOfWeekSelector.Friday">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DaysOfWeekSelector.Saturday">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.MinuteRecurrence">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MinuteRecurrence.MinutesInterval">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.MonthlyRecurrence">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthlyRecurrence.Days">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthlyRecurrence.MonthsOfYear">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.January">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.February">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.March">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.April">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.May">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.June">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.July">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.August">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.September">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.October">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.November">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthsOfYearSelector.December">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.MonthlyDOWRecurrence">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthlyDOWRecurrence.WhichWeek">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthlyDOWRecurrence.WhichWeekSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthlyDOWRecurrence.DaysOfWeek">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.MonthlyDOWRecurrence.MonthsOfYear">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.WeekNumberEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.WeekNumberEnum.FirstWeek">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.WeekNumberEnum.SecondWeek">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.WeekNumberEnum.ThirdWeek">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.WeekNumberEnum.FourthWeek">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.WeekNumberEnum.LastWeek">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleDefinitionOrReference">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleReference">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleReference.ScheduleID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleReference.Definition">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.NoSchedule">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleStateEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleStateEnum.Ready">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleStateEnum.Running">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleStateEnum.Paused">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleStateEnum.Expired">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleStateEnum.Failing">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ReportHistorySnapshot">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportHistorySnapshot.HistoryID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportHistorySnapshot.CreationDate">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportHistorySnapshot.Size">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DataSourcePrompt">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourcePrompt.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourcePrompt.DataSourceID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourcePrompt.Prompt">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DataSource">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSource.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSource.Item">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Job">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Job.JobID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Job.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Job.Path">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Job.Description">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Job.Machine">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Job.User">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Job.StartDateTime">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Job.Action">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Job.Type">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Job.Status">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.JobActionEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.JobActionEnum.Render">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.JobActionEnum.SnapshotCreation">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.JobActionEnum.ReportHistoryCreation">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.JobTypeEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.JobTypeEnum.User">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.JobTypeEnum.System">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.JobStatusEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.JobStatusEnum.New">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.JobStatusEnum.Running">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.JobStatusEnum.CancelRequested">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ExpirationDefinition">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.TimeExpiration">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.TimeExpiration.Minutes">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleExpiration">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ScheduleExpiration.Item">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.Type">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.TypeSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.Nullable">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.NullableSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.AllowBlank">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.AllowBlankSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.MultiValue">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.MultiValueSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.QueryParameter">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.QueryParameterSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.Prompt">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.PromptUser">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.PromptUserSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.Dependencies">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.ValidValuesQueryBased">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.ValidValuesQueryBasedSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.ValidValues">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.DefaultValuesQueryBased">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.DefaultValuesQueryBasedSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.DefaultValues">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.State">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.StateSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ReportParameter.ErrorMessage">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ParameterTypeEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ParameterTypeEnum.Boolean">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ParameterTypeEnum.DateTime">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ParameterTypeEnum.Integer">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ParameterTypeEnum.Float">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ParameterTypeEnum.String">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ParameterStateEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ParameterStateEnum.HasValidValue">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ParameterStateEnum.MissingValidValue">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ParameterStateEnum.HasOutstandingDependencies">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ParameterStateEnum.DynamicValuesUnavailable">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceCredentials">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceCredentials.DataSourceName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceCredentials.UserName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.DataSourceCredentials.Password">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Warning">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Warning.Code">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Warning.Severity">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Warning.ObjectName">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Warning.ObjectType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Warning.Message">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.ID">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.Path">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.VirtualPath">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.Type">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.Size">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.SizeSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.Description">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.Hidden">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.HiddenSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.CreationDate">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.CreationDateSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.ModifiedDate">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.ModifiedDateSpecified">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.CreatedBy">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.ModifiedBy">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.MimeType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.ExecutionDate">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CatalogItem.ExecutionDateSpecified">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ItemTypeEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ItemTypeEnum.Unknown">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ItemTypeEnum.Folder">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ItemTypeEnum.Report">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ItemTypeEnum.Resource">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ItemTypeEnum.LinkedReport">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ItemTypeEnum.DataSource">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.Property">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Property.Name">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.Property.Value">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SearchCondition">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.SearchCondition.Condition">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.SearchCondition.ConditionSpecified">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ConditionEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ConditionEnum.Contains">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ConditionEnum.Equals">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SessionHeader">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.SessionHeader.SessionId">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.SessionHeader.IsNewExecution">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.SessionHeader.ExecutionDateTime">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.SessionHeader.ExpirationDateTime">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ItemNamespaceHeader">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ItemNamespaceHeader.ItemNamespace">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ItemNamespaceEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ItemNamespaceEnum.PathBased">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ItemNamespaceEnum.GUIDBased">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.BatchHeader">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.BatchHeader.BatchID">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ExecutionSettingEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ExecutionSettingEnum.Live">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.ExecutionSettingEnum.Snapshot">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.BooleanOperatorEnum">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.BooleanOperatorEnum.And">
            <remarks/>
        </member>
        <member name="F:QCI.ReportingServices.Internals.ReportingServices2003.BooleanOperatorEnum.Or">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSecureMethodsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSecureMethodsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListSecureMethodsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateBatchCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CreateBatchCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CancelBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ExecuteBatchCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetSystemPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetSystemPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSystemPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetSystemPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DeleteItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.MoveItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListChildrenCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListChildrenCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListChildrenCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetItemTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetItemTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetItemTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateReportCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CreateReportCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportDefinitionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportDefinitionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportDefinitionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetReportDefinitionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetReportDefinitionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.SetReportDefinitionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateResourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetResourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetResourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetResourceContentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetResourceContentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetResourceContentsCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportParametersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportParametersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportParametersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetReportParametersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateLinkedReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportLinkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportLinkCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportLinkCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetReportLinkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListLinkedReportsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListLinkedReportsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListLinkedReportsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.RenderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.RenderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.RenderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.RenderCompletedEventArgs.Encoding">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.RenderCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.RenderCompletedEventArgs.ParametersUsed">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.RenderCompletedEventArgs.Warnings">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.RenderCompletedEventArgs.StreamIds">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.RenderStreamCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.RenderStreamCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.RenderStreamCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.RenderStreamCompletedEventArgs.Encoding">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.RenderStreamCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetRenderResourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetRenderResourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetRenderResourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetRenderResourceCompletedEventArgs.MimeType">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetExecutionOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetExecutionOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetExecutionOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetExecutionOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetExecutionOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetCacheOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetCacheOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetCacheOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetCacheOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetCacheOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.UpdateReportExecutionSnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.FlushCacheCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListJobsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListJobsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListJobsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CancelJobCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CancelJobCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CancelJobCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetDataSourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetDataSourceContentsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetDataSourceContentsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetDataSourceContentsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.EnableDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DisableDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListReportsUsingDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListReportsUsingDataSourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListReportsUsingDataSourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetReportDataSourcesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportDataSourcesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportDataSourcesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportDataSourcesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportDataSourcePromptsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportDataSourcePromptsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportDataSourcePromptsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateReportHistorySnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateReportHistorySnapshotCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CreateReportHistorySnapshotCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CreateReportHistorySnapshotCompletedEventArgs.Warnings">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetReportHistoryOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportHistoryOptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportHistoryOptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportHistoryOptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportHistoryOptionsCompletedEventArgs.KeepExecutionSnapshots">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportHistoryOptionsCompletedEventArgs.Item">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetReportHistoryLimitCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportHistoryLimitCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetReportHistoryLimitCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportHistoryLimitCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportHistoryLimitCompletedEventArgs.IsSystem">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetReportHistoryLimitCompletedEventArgs.SystemLimit">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListReportHistoryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListReportHistoryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListReportHistoryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DeleteReportHistorySnapshotCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.FindItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.FindItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.FindItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateScheduleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CreateScheduleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DeleteScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetSchedulePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetSchedulePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetSchedulePropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSchedulePropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListScheduledReportsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListScheduledReportsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListScheduledReportsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSchedulesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSchedulesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListSchedulesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.PauseScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ResumeScheduleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateSubscriptionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CreateSubscriptionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateDataDrivenSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateDataDrivenSubscriptionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.CreateDataDrivenSubscriptionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetDataDrivenSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetSubscriptionPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSubscriptionPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSubscriptionPropertiesCompletedEventArgs.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSubscriptionPropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSubscriptionPropertiesCompletedEventArgs.Active">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSubscriptionPropertiesCompletedEventArgs.Status">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSubscriptionPropertiesCompletedEventArgs.EventType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSubscriptionPropertiesCompletedEventArgs.MatchData">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSubscriptionPropertiesCompletedEventArgs.Parameters">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.ExtensionSettings">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.DataRetrievalPlan">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Active">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Status">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.EventType">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.MatchData">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetDataDrivenSubscriptionPropertiesCompletedEventArgs.Parameters">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DeleteSubscriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.PrepareQueryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.PrepareQueryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.PrepareQueryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.PrepareQueryCompletedEventArgs.Changed">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetExtensionSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetExtensionSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetExtensionSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ValidateExtensionSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ValidateExtensionSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ValidateExtensionSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSubscriptionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSubscriptionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListSubscriptionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSubscriptionsUsingDataSourceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSubscriptionsUsingDataSourceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListSubscriptionsUsingDataSourceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListExtensionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListExtensionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListExtensionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListEventsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListEventsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListEventsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.FireEventCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSystemTasksCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSystemTasksCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListSystemTasksCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListTasksCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListTasksCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListTasksCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSystemRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListSystemRolesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListSystemRolesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListRolesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.ListRolesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.ListRolesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.CreateRoleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.DeleteRoleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetRolePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetRolePropertiesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetRolePropertiesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetRolePropertiesCompletedEventArgs.Description">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetRolePropertiesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetSystemPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetSystemPoliciesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSystemPoliciesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetSystemPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetPoliciesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetPoliciesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetPoliciesCompletedEventArgs.InheritParent">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.SetPoliciesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.InheritParentSecurityCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetSystemPermissionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetSystemPermissionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetSystemPermissionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetPermissionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.GetPermissionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:QCI.ReportingServices.Internals.ReportingServices2003.GetPermissionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.LogonUserCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.Internals.ReportingServices2003.LogoffCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:QCI.ReportingServices.ReportFormat">
            <summary>
            Specifies the format of the generated report.
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportFormat.CSV">
            <summary>
            Comma-Separated Values Format
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportFormat.Excel">
            <summary>
            Microsoft Excel Format
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportFormat.Image">
            <summary>
            TIFF Image Format
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportFormat.HTML32">
            <summary>
            HTML 3.2 Format
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportFormat.HTML40">
            <summary>
            HTML 4.0 Format
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportFormat.MHTML">
            <summary>
            MIME HTML Format
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportFormat.PDF">
            <summary>
            Adobe PDF Format
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportFormat.Word">
            <summary>
            Microsoft Word Format
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportFormat.XML">
            <summary>
            XML Format
            </summary>
        </member>
        <member name="T:QCI.ReportingServices.ReportParameter">
            <summary>
            Represents a parameter of a report.
            </summary>
        </member>
        <member name="M:QCI.ReportingServices.ReportParameter.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the report parameter.</param>
            <param name="value">Value of the report parameter, converted to a string.</param>
        </member>
        <member name="P:QCI.ReportingServices.ReportParameter.Name">
            <summary>
            Gets or sets the name of this report parameter.
            </summary>
        </member>
        <member name="P:QCI.ReportingServices.ReportParameter.Value">
            <summary>
            Gets or sets the value of this report parameter.
            </summary>
        </member>
        <member name="T:QCI.ReportingServices.ReportRequest">
            <summary>
            Makes a request to a SQL Reporting Services server to have a report created and returned.
            </summary>
            <remarks>
            TODO: Add proper support for HTTP report gen.
                    Url needs to be constructed, not a format string from the config.
            </remarks>
        </member>
        <member name="M:QCI.ReportingServices.ReportRequest.#ctor">
            <summary>
            Creates an new request for the default report server.
            </summary>
        </member>
        <member name="M:QCI.ReportingServices.ReportRequest.#ctor(System.String)">
            <summary>
            Creates an new request for the default report server.
            </summary>
            <param name="reportName">Name of the report including path relative to the configured root folder.</param>
        </member>
        <member name="M:QCI.ReportingServices.ReportRequest.#ctor(System.String,QCI.ReportingServices.ReportParameter[],QCI.ReportingServices.ReportFormat)">
            <summary>
            Creates an new request for the default report server.
            </summary>
            <param name="reportName">Name of the report including path relative to the configured root folder.</param>
            <param name="parameters">Parameters of the report; or null if none.</param>
            <param name="format">Format of the report document.</param>
        </member>
        <member name="M:QCI.ReportingServices.ReportRequest.#ctor(System.String,System.String,QCI.ReportingServices.ReportParameter[],QCI.ReportingServices.ReportFormat)">
            <summary>
            Creates an new request for the specified report server.
            </summary>
            <param name="serverName">Name of the report server to use.</param>
            <param name="reportName">Name of the report including path relative to the configured root folder.</param>
            <param name="parameters">Parameters of the report; or null if none.</param>
            <param name="format">Format of the report document.</param>
        </member>
        <member name="P:QCI.ReportingServices.ReportRequest.ServerName">
            <summary>
            Gets the name of the Reporting Server that will be used.
            </summary>
        </member>
        <member name="P:QCI.ReportingServices.ReportRequest.ReportName">
            <summary>
            Gets or sets the name of the report on the Reporting Server, including the path relative to the root folder.
            </summary>
        </member>
        <member name="P:QCI.ReportingServices.ReportRequest.Parameters">
            <summary>
            Gets the list of parameters for the report.
            </summary>
        </member>
        <member name="P:QCI.ReportingServices.ReportRequest.Format">
            <summary>
            Gets or sets the format of the report when generated.
            </summary>
        </member>
        <member name="P:QCI.ReportingServices.ReportRequest.RequestMethod">
            <summary>
            Gets or sets the method of communication to use when requesting the report from the Report Server.
            </summary>
        </member>
        <member name="P:QCI.ReportingServices.ReportRequest.Timeout">
            <summary>
            Gets or sets the period of time, in second, to wait for a response from the report server
            before timing out and throwing an exception.
            </summary>
        </member>
        <member name="M:QCI.ReportingServices.ReportRequest.CreateReport">
            <summary>
            Generates the report by making a request to the Report Server.
            </summary>
            <returns>Byte array of the generated document.</returns>
        </member>
        <member name="M:QCI.ReportingServices.ReportRequest.CreateReportAsResponse(System.Web.HttpResponse)">
            <summary>
            Generates the report by making a request to the Report Server
            and then load the documented into the passed HTTP Response.
            NOTE: The HttpResponse is closed after the document is written.
            </summary>
            <param name="response">The HttpResponse instance to write the document to.</param>
        </member>
        <member name="T:QCI.ReportingServices.ReportRequestMethod">
            <summary>
            Specifies the method of communication to use when requesting reports from a SQL Reporting Services server.
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportRequestMethod.WebService">
            <summary>
            Report is requested using the web services of the report server.
            </summary>
        </member>
        <member name="F:QCI.ReportingServices.ReportRequestMethod.HTTP">
            <summary>
            Report is requested using a HTTP GET.
            </summary>
        </member>
        <member name="T:QCI.Text.Base32Encoding">
            <summary>
            Provides methods to encode and decode data using the Base32 encoding standard, as defined in RFP 4648.
            </summary>
        </member>
        <member name="M:QCI.Text.Base32Encoding.Encode(System.Byte[])">
            <summary>
            Converts a byte array into a Base32 encoded string.
            </summary>
            <param name="input">The byte array to encode.</param>
            <returns>An Base32 encoded string representing the bytes found in the specified array.</returns>
        </member>
        <member name="M:QCI.Text.Base32Encoding.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a portion of a byte array into a Base32 encoded string.
            </summary>
            <param name="input">Byte array containing data to be encoded.</param>
            <param name="offset">Location within the byte array to begin encoding.</param>
            <param name="length">Number of bytes to encode.</param>
            <returns>An Base32 encoded string representing the bytes found in the specified range.</returns>
        </member>
        <member name="M:QCI.Text.Base32Encoding.Encode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a portion of a byte array into a Base32 encoded string.
            </summary>
            <param name="input">Byte array containing data to be encoded.</param>
            <param name="offset">Location within the byte array to begin encoding.</param>
            <param name="length">Number of bytes to encode.</param>
            <param name="includePadding">Flag value indicating if padding should be used in the output string.</param>
            <returns>An Base32 encoded string representing the bytes found in the specified range.</returns>
        </member>
        <member name="M:QCI.Text.Base32Encoding.Decode(System.String)">
            <summary>
            Converts a Base32 encoded string into a byte array.
            </summary>
            <param name="str">The encoded string to decode.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:QCI.Text.Base32Encoding.Decode(System.String,System.Int32,System.Int32)">
            <summary>
            Converts a portion of a Base32 encoded string into a byte array.
            </summary>
            <param name="str">The encoded string to decode.</param>
            <param name="offset">Location within the string to begin decoding.</param>
            <param name="length">Number of characters to decode.</param>
            <returns>An array of bytes representing the encoded data found in the specified range.</returns>
        </member>
        <member name="T:QCI.Text.Base32HexEncoding">
            <summary>
            Provides methods to encode and decode data using the Base-32-Hex encoding standard, as defined in RFP 4648.
            Base32-Hex is a variant of the standard Base32 encoding, but uses a different alphabet.
            Unlike Base32, data encoded with Base32-Hex maintains its sort order when the encoded data is compared bit-wise.
            </summary>
        </member>
        <member name="M:QCI.Text.Base32HexEncoding.Encode(System.Byte[])">
            <summary>
            Converts a byte array into a Base32Hex encoded string.
            </summary>
            <param name="input">The byte array to encode.</param>
            <returns>An Base32Hex encoded string representing the bytes found in the specified array.</returns>
        </member>
        <member name="M:QCI.Text.Base32HexEncoding.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a portion of a byte array into a Base32Hex encoded string.
            </summary>
            <param name="input">Byte array containing data to be encoded.</param>
            <param name="offset">Location within the byte array to begin encoding.</param>
            <param name="length">Number of bytes to encode.</param>
            <returns>An Base32Hex encoded string representing the bytes found in the specified range.</returns>
        </member>
        <member name="M:QCI.Text.Base32HexEncoding.Encode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a portion of a byte array into a Base32Hex encoded string.
            </summary>
            <param name="input">Byte array containing data to be encoded.</param>
            <param name="offset">Location within the byte array to begin encoding.</param>
            <param name="length">Number of bytes to encode.</param>
            <param name="includePadding">Flag value indicating if padding should be used in the output string.</param>
            <returns>An Base32Hex encoded string representing the bytes found in the specified range.</returns>
        </member>
        <member name="M:QCI.Text.Base32HexEncoding.Decode(System.String)">
            <summary>
            Converts a Base32Hex encoded string into a byte array.
            </summary>
            <param name="str">The encoded string to decode.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:QCI.Text.Base32HexEncoding.Decode(System.String,System.Int32,System.Int32)">
            <summary>
            Converts a portion of a Base32Hex encoded string into a byte array.
            </summary>
            <param name="str">The encoded string to decode.</param>
            <param name="offset">Location within the string to begin decoding.</param>
            <param name="length">Number of characters to decode.</param>
            <returns>An array of bytes representing the encoded data found in the specified range.</returns>
        </member>
        <member name="T:QCI.Text.HexEncoding">
            <summary>
            Provides methods to encode and decode data using the Base16 (hexadecimal) encoding standard, as defined in RFP 4648.
            </summary>
        </member>
        <member name="M:QCI.Text.HexEncoding.Encode(System.Byte[])">
            <summary>
            Converts a byte array into a hexadecimal-encoded string.
            </summary>
            <param name="value">The byte array to encode.</param>
            <returns>An hexadecimal-encoded string representing the bytes found in the specified array.</returns>
        </member>
        <member name="M:QCI.Text.HexEncoding.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a portion of a byte array into a hexadecimal-encoded string.
            </summary>
            <param name="buffer">Byte array containing data to be encoded.</param>
            <param name="offset">Location within the byte array to begin encoding.</param>
            <param name="count">Number of bytes to encode.</param>
            <returns>An hexadecimal-encoded string representing the bytes found in the specified range.</returns>
        </member>
        <member name="M:QCI.Text.HexEncoding.Decode(System.String)">
            <summary>
            Converts a hexadecimal-encoded string into a byte array.
            </summary>
            <param name="str">The encoded string to dencode.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:QCI.Text.HexEncoding.Decode(System.String,System.Int32,System.Int32)">
            <summary>
            Converts a portion of a hexadecimal-encoded string into a byte array.
            </summary>
            <param name="str">The encoded string to decode.</param>
            <param name="offset">Location within the string to begin decoding.</param>
            <param name="count">Number of characters to decode. Must be an even number (i.e., a multiple of two).</param>
            <returns>An array of bytes representing the encoded data found in the specified range.</returns>
        </member>
        <member name="T:QCI.Text.ZBase32Encoding">
            <summary>
            Provides methods to encode and decode data using the Z-Base32 encoding standard.
            Z-Base32 is a variant of the standard Base32 encoding but uses a different alphabet with lower case letters 
            and does not use padding.
            </summary>
        </member>
        <member name="M:QCI.Text.ZBase32Encoding.Encode(System.Byte[])">
            <summary>
            Converts a byte array into a z-Base32 encoded string.
            </summary>
            <param name="input">The byte array to encode.</param>
            <returns>An z-Base32 encoded string representing the bytes found in the specified array.</returns>
        </member>
        <member name="M:QCI.Text.ZBase32Encoding.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a portion of a byte array into a z-Base32 encoded string.
            </summary>
            <param name="input">Byte array containing data to be encoded.</param>
            <param name="offset">Location within the byte array to begin encoding.</param>
            <param name="length">Number of bytes to encode.</param>
            <returns>An z-Base32 encoded string representing the bytes found in the specified range.</returns>
        </member>
        <member name="M:QCI.Text.ZBase32Encoding.Decode(System.String)">
            <summary>
            Converts a z-Base32 encoded string into a byte array.
            </summary>
            <param name="str">The encoded string to dencode.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:QCI.Text.ZBase32Encoding.Decode(System.String,System.Int32,System.Int32)">
            <summary>
            Converts a portion of a z-Base32 encoded string into a byte array.
            </summary>
            <param name="str">The encoded string to decode.</param>
            <param name="offset">Location within the string to begin decoding.</param>
            <param name="length">Number of characters to decode.</param>
            <returns>An array of bytes representing the encoded data found in the specified range.</returns>
        </member>
        <member name="T:QCI.Timers.ClockSynchronizedTimer">
            <summary>
            A specialized timer, modeled after <see cref="T:System.Timers.Timer"/>, designed to generate recurring events 
            aligned with the system clock such that events are raised on the same second of each minute.
            For example, if the timer is setup to generate events every 20 seconds, events will be raised at 
            the 00th, 20th, and 40th second of every minute.
            A small (100 ms) delay is included in the scheduling so events do not get raised just shy of the correct second.
            </summary>
        </member>
        <member name="M:QCI.Timers.ClockSynchronizedTimer.#ctor">
            <summary>
            Initializes a new instance of this class, and sets all properties to their default initial values.
            </summary>
        </member>
        <member name="M:QCI.Timers.ClockSynchronizedTimer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of this class, and sets the <see cref="P:Interval"/> property to the specified time period.
            </summary>
            <param name="interval">The time, in milliseconds, between events.</param>
            <exception cref="T:System.ArgumentException">The value of the interval parameter is less than zero.</exception>
        </member>
        <member name="M:QCI.Timers.ClockSynchronizedTimer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of this class, and sets the <see cref="P:Interval"/> and <see cref="P:Offset"/> properties.
            </summary>
            <param name="interval">The time, in milliseconds, between events.</param>
            <param name="offset">The amount of time, in milliseconds, to shift the raising of events.</param>
            <exception cref="T:System.ArgumentException">The value of the interval parameter is less than zero.</exception>
        </member>
        <member name="E:QCI.Timers.ClockSynchronizedTimer.Elapsed">
            <summary>
            Occurs when the timed interval elapses.
            The timer is stopped before this event and restarted afterward to prevent overlapping event periods.
            </summary>
        </member>
        <member name="P:QCI.Timers.ClockSynchronizedTimer.Interval">
            <summary>
            Gets or sets the interval (in milliseconds) at which to raise the <see cref="E:Elapsed"/> event.
            The interval must evenly divide a minute so all events can start at 00 seconds each minute.
            </summary>
            <returns>The time, in milliseconds, between raisings of the <see cref="E:Elapsed"/> event. The default is 60 seconds.</returns>
            <exception cref="T:System.ArgumentException">The interval is less than or equal to zero, or it does not evenly divide one minute.</exception>
        </member>
        <member name="P:QCI.Timers.ClockSynchronizedTimer.IntervalInSeconds">
            <summary>
            Gets or sets the interval (in seconds) at which to raise the <see cref="E:Elapsed"/> event.
            The interval must evenly divide a minute so all events can start at 00 seconds each minute.
            </summary>
            <returns>The time, in seconds, between raisings of the <see cref="E:Elapsed"/> event. The default is 60 seconds.</returns>
            <exception cref="T:System.ArgumentException">The interval is less than or equal to zero, or it does not evenly divide one minute.</exception>
        </member>
        <member name="P:QCI.Timers.ClockSynchronizedTimer.Offset">
            <summary>
            Gets or sets the amount of offset (in milliseconds) used to adjust the times at which the <see cref="E:Elapsed"/> event is raised.
            </summary>
        </member>
        <member name="P:QCI.Timers.ClockSynchronizedTimer.Enabled">
            <summary>
            Gets or sets a value indicating whether this timer should raise the <see cref="E:Elapsed"/> event.</summary>
            <returns>true if the <see cref="T:System.Timers.Timer"/> should raise the <see cref="E:Elapsed"/> event; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:QCI.Timers.ClockSynchronizedTimer.AutoReset">
            <summary>
            Gets or sets a value indicating whether this timer should raise the <see cref="E:Elapsed"/> event each time the specified interval elapses, or only after the first time it elapses.
            </summary>
            <returns>true if this timer should raise the <see cref="E:Elapsed"></see> event each time the interval elapses; false if it should raise the <see cref="E:Elapsed"></see> event only once, after the first time the interval elapses. The default is true.</returns>
        </member>
        <member name="P:QCI.Timers.ClockSynchronizedTimer.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.
            </summary>
            <returns>
            The <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> representing the object used to marshal the 
            event-handler calls that are issued when an interval has elapsed. The default is null.
            </returns>
        </member>
        <member name="M:QCI.Timers.ClockSynchronizedTimer.Start">
            <summary>
            Starts raising the <see cref="E:Elapsed"/> event by setting <see cref="P:Enabled" /> to true.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The timer was created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue"/> + 1, or set to an interval less than zero.</exception>
        </member>
        <member name="M:QCI.Timers.ClockSynchronizedTimer.Stop">
            <summary>
            Stops raising the <see cref="E:Elapsed"/> event by setting <see cref="P:Enabled"/> to false.
            </summary>
        </member>
        <member name="M:QCI.Timers.ClockSynchronizedTimer.Close">
            <summary>
            Releases the resources used by this timer.
            </summary>
        </member>
        <member name="M:QCI.Timers.ClockSynchronizedTimer.Dispose">
            <summary>
            Releases all resources used by the current timer instance.
            </summary>
        </member>
        <member name="M:QCI.Timers.ClockSynchronizedTimer.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current timer instance.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:QCI.Timers.ElapsedEventArgs">
            <summary>
            Provides data for the <see cref="E:ClockSynchronizedTimer.Elapsed"/> event.
            </summary>
        </member>
        <member name="M:QCI.Timers.ElapsedEventArgs.#ctor(System.DateTime)">
            <summary>
            Creates a new instance of this class with the specified signal time.
            </summary>
            <param name="signalTime"></param>
        </member>
        <member name="P:QCI.Timers.ElapsedEventArgs.SignalTime">
            <summary>
            Gets the time the <see cref="E:ClockSynchronizedTimer.Elapsed"/> event was raised.
            </summary>
            <returns>The time the <see cref="E:ClockSynchronizedTimer.Elapsed"/> event was raised.</returns>
        </member>
        <member name="T:QCI.WCF.GenericServiceProxy`1">
            <summary>
            Provides a generic way to create Windows Communication Foundation (WCF) client objects that can call services.
            </summary>
            <typeparam name="TContract">The service contract handled by this proxy.</typeparam>
        </member>
        <member name="M:QCI.WCF.GenericServiceProxy`1.#ctor">
            <summary>
            Initializes a new instance of this class using the endpoint defined in the application configuration file.
            This constructor cannot be used if more than one endpoint is defined for the contract type of this proxy.
            </summary>
        </member>
        <member name="M:QCI.WCF.GenericServiceProxy`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class using the configuration information specified 
            in the application configuration file by endpointConfigurationName.
            </summary>
            <param name="endpointName">The name of the endpoint in the application configuration file.</param>
        </member>
        <member name="M:QCI.WCF.GenericServiceProxy`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of this class using information from the application configuration file
            and a specified service address.
            </summary>
            <param name="endpointName">The name of the endpoint in the application configuration file.</param>
            <param name="remoteAddress">The address of the service.</param>
        </member>
        <member name="P:QCI.WCF.GenericServiceProxy`1.Channel">
            <summary>
            Returns the transparent proxy channel used to communicate with the service.
            </summary>
        </member>
        <member name="M:QCI.WCF.GenericServiceProxy`1.CreateChannel">
            <summary>
            When creating the channel, sets the credentials
            </summary>
        </member>
        <member name="T:QCI.Web.ListHelper">
            <summary>
            Utility class that provides methods to easily data bind a <see cref="T:System.Web.UI.WebControls.ListControl"/>.
            </summary>
        </member>
        <member name="M:QCI.Web.ListHelper.BindList(System.Web.UI.WebControls.ListControl,System.Data.DataSet,System.String,System.String)">
            <summary>
            Binds a DataSet to the specified <see cref="T:System.Web.UI.WebControls.ListControl"/>.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="ds">DataSet that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textField">Name of the field that provides the text of each list item.</param>
        </member>
        <member name="M:QCI.Web.ListHelper.BindList(System.Web.UI.WebControls.ListControl,System.Data.DataTable,System.String,System.String)">
            <summary>
            Binds a DataTable to the specified <see cref="T:System.Web.UI.WebControls.ListControl"/>.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="dt">DataTable that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textField">Name of the field that provides the text of each list item.</param>
        </member>
        <member name="M:QCI.Web.ListHelper.BindList(System.Web.UI.WebControls.ListControl,System.Object,System.String,System.String)">
            <summary>
            Populates a <see cref="T:System.Web.UI.WebControls.ListControl"/> with items from the specified data source.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="dataSource">Data source that provides data for populating the control. The data source must implement IEnumerable or IListSource.</param>
            <param name="valueExpression">Expression that provides the value of each list item.</param>
            <param name="textExpression">Expression that provide the text caption value for the list item.</param>
        </member>
        <member name="M:QCI.Web.ListHelper.BindList(System.Web.UI.WebControls.ListControl,System.Data.DataSet,System.String,System.String,System.String[])">
            <summary>
            Populates a <see cref="T:System.Web.UI.WebControls.ListControl"/> with items from the specified DataTable, formatted using the 
            specified text format and text fields.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="ds">DataSet that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textFormat">Formatting string used to control how items are displayed.</param>
            <param name="textFields">Field names that provide text caption values for the list item.</param>
        </member>
        <member name="M:QCI.Web.ListHelper.BindList(System.Web.UI.WebControls.ListControl,System.Data.DataTable,System.String,System.String,System.String[])">
            <summary>
            Populates a <see cref="T:System.Web.UI.WebControls.ListControl"/> with items from the specified DataTable, formatted using the 
            specified text format and text fields.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="dt">DataTable that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textFormat">Formatting string used to control how items are displayed.</param>
            <param name="textFields">Field names that provide text caption values for the list item.</param>
        </member>
        <member name="M:QCI.Web.ListHelper.BindList(System.Web.UI.WebControls.ListControl,System.Object,System.String,System.String,System.String[])">
            <summary>
            Populates a <see cref="T:System.Web.UI.WebControls.ListControl"/> with items from the specified data source, formatted using the 
            specified text format and text fields.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="dataSource">Data source that provides data for populating the control. The data source must implement IEnumerable or IListSource.</param>
            <param name="valueExpression">Expression that provides the value of each list item.</param>
            <param name="textFormat">Formatting string used to control how items are displayed.</param>
            <param name="textExpressions">Expressions that provide text caption values for the list item.</param>
        </member>
        <member name="M:QCI.Web.ListHelper.TrySelectItem(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>
            Attempts to select the item in a <see cref="T:System.Web.UI.WebControls.ListControl"/> with the specified value.
            If no item is found, the current selection is not modified.
            </summary>
            <param name="control">List control to be modified.</param>
            <param name="itemValue">Value of the item to be selected.</param>
            <returns>True if the item was found and selected; otherwise false.</returns>
        </member>
        <member name="T:QCI.Web.Security.CustomMembershipProviderBase">
            <summary>
            Extends <see cref="T:System.Web.Security.MembershipProvider"/> to add common reusable methods for custom providers.
            </summary>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes this provider instance.
            This method is sealed to prevent it from being overridden by the inheriting class;
            the protected method OnInitialize() should be used instead.
            </summary>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.OnInitialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Allows the inheriting provider instance to initialize and load custom configuration settings.
            This method is called after all default settings have been loaded (and removed) from the collection, 
            but before the collection is checked for unrecognized settings.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.ApplicationName">
            <summary>
            Gets or sets the name of the application using this custom provider.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.EnablePasswordReset">
            <summary>
            Indicates whether the membership provider is configured to allow users to reset their passwords.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.EnablePasswordRetrieval">
            <summary>
            Indicates whether the membership provider is configured to allow users to retrieve their passwords.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.PasswordFormat">
            <summary>
            Gets a value indicating the format for storing passwords in the membership data store.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.RequireStrongPasswords">
            <summary>
            Gets a value indicating whether the membership provider is configured to require strong passwords.
            Strong passwords meet the following requirements: At least six characters in length, does not contain three 
            or more characters from the user's full name or account name, and contains characters from at least three of 
            the following five categories: (1) uppercase characters (A-Z), (2) lowercase characters (a-z), (3) base-10 digits (0-9),
            (4) non-alphanumeric (for example: !, $, #, or %), (5) certain Unicode characters).
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.MaxEncodedPasswordLength">
            <summary>
            Gets the maximum length allowed for an encoded password.
            If this value is set to 0, no maximum length is enforced.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.PasswordSaltByteCount">
            <summary>
            Gets the number of cryptographically strong random bytes to used when generating salt values.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomMembershipProviderBase.AccountLockoutDurationInMinutes">
            <summary>
            Gets the number of minutes a locked-out account remains locked before automatically becoming unlocked.
            The available range is from 0 minutes through 99,999 minutes. If you set the account lockout duration 
            to 0, the account will be locked out until an administrator explicitly unlocks it.
            </summary>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.ValidatePassword(System.String,System.String,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Verifies whether a given password meets the requirements configured for this provider.
            </summary>
            <param name="password">Password to validate.</param>
            <param name="username">Username of the user that will be assigned the password.</param>
            <param name="firstName">First name of the user that will be assigned the password.</param>
            <param name="lastName">Last name of the user that will be assigned the password.</param>
            <param name="isNewUser">Value indicating if the password is for a new user is being created or an existing user.</param>
            <param name="errorMessage">Error message that can be displayed to the end-user if the password is invalid.</param>
            <returns>True if the specified password is valid; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.CompareClearToEncodedPassword(System.String,System.String,System.String,System.String)">
            <summary>
            Compares a new plain-text password to an encoded password and determines if they are equal.
            </summary>
            <param name="clearPassword">Plain-text password to be compared.</param>
            <param name="encodedPassword">Encoded password to be compared.</param>
            <param name="passwordFormat">Encoding format used to protect the encoded password.</param>
            <param name="passwordSalt">Salt value used to protect the encoded password.</param>
            <returns>True if the two passwords match; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.CompareClearToEncodedPassword(System.String,System.String,System.Web.Security.MembershipPasswordFormat,System.String)">
            <summary>
            Compares a new plain-text password to an encoded password and determines if they are equal.
            </summary>
            <param name="clearPassword">Plain-text password to be compared.</param>
            <param name="encodedPassword">Encoded password to be compared.</param>
            <param name="passwordFormat">Encoding format used to protect the encoded password.</param>
            <param name="passwordSalt">Salt value used to protect the encoded password.</param>
            <returns>True if the two passwords match; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.IsStrongPassword(System.String,System.String,System.String,System.String)">
            <summary>
            Determines if a specified password is a strong passwords that meet the following requirements: 
            At least six characters in length, does not contain three or more characters from the user's full name or 
            account name, and contains characters from at least three of the following five categories: (1) uppercase 
            characters (A-Z), (2) lowercase characters (a-z), (3) base 10 digits (0-9), (4) non-alphanumeric 
            (for example: !, $, #, or %), (5) certain Unicode characters.
            </summary>
            <param name="password">The password to be checked.</param>
            <param name="username">Username of the user user that will be assigned the password.</param>
            <param name="firstName">First name of the user that will be assigned the password.</param>
            <param name="lastName">First name of the user that will be assigned the password.</param>
            <returns>True if the password is considered strong; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.IsStrongPassword(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            Determines if a specified password is a strong passwords that meet the following requirements: 
            At least six characters in length, does not contain three or more characters from the user's full name or 
            account name, and contains characters from at least three of the following five categories: (1) uppercase 
            characters (A-Z), (2) lowercase characters (a-z), (3) base 10 digits (0-9), (4) non-alphanumeric 
            (for example: !, $, #, or %), (5) certain Unicode characters.
            </summary>
            <param name="password">The password to be checked.</param>
            <param name="username">Username of the user user that will be assigned the password.</param>
            <param name="firstName">First name of the user that will be assigned the password.</param>
            <param name="lastName">Last name of the user that will be assigned the password.</param>
            <param name="errorMessage">A detailed error message describing why the password is not strong; or null if the password is strong.</param>
            <returns>True if the password is considered strong; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.EncodePassword(System.String,System.String@)">
            <summary>
            Encodes a password based on the <see cref="P:QCI.Web.Security.CustomMembershipProviderBase.PasswordFormat"/> defined in the configuration for this provider.
            A random salt value is always returned regardless of password format.
            </summary>
            <param name="password">Password string to encode.</param>
            <param name="salt">Salt generated during the encoding.</param>
            <returns>The password encoded with the configured PasswordFormat setting.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.EncodePassword(System.String,System.String)">
            <summary>
            Encodes a password with a specific salt value based on the <see cref="P:QCI.Web.Security.CustomMembershipProviderBase.PasswordFormat"/> 
            defined in the configuration for this provider.
            </summary>
            <param name="password">Password string to encode.</param>
            <param name="salt">Salt string to use during encoding, if needed.</param>
            <returns>The password encoded with the configured PasswordFormat setting.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.EncodePassword(System.String,System.String,System.String)">
            <summary>
            Encodes a password based on the specified password format and salt value.
            </summary>
            <param name="password">Password string to encode.</param>
            <param name="passwordFormat">Name of the encoding type to use. Must be a member of <see cref="T:System.Web.Security.MembershipPasswordFormat"/>.</param>
            <param name="salt">Auto generated salt. Required for comparison.</param>
            <returns>The password encoded with the specified password format.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.EncodePassword(System.String,System.Web.Security.MembershipPasswordFormat,System.String)">
            <summary>
            Encodes a password based on the specified <see cref="P:QCI.Web.Security.CustomMembershipProviderBase.PasswordFormat"/> and salt value.
            </summary>
            <param name="password">Password string to encode.</param>
            <param name="passwordFormat">Type of encoding to use.</param>
            <param name="salt">Auto generated salt. Required for comparison.</param>
            <returns>The password encoded with the specified PasswordFormat.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.GenerateSalt">
            <summary>
            Creates a cryptographically strong sequence of random values (encoded as a Base64 string) for use as salt in cryptographic operations.
            The salt length is based on the <see cref="P:QCI.Web.Security.CustomMembershipProviderBase.PasswordSaltByteCount"/> defined in the configuration for this provider.
            </summary>
            <returns>Base64-encoded array filled with random values.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.GenerateSalt(System.Int32)">
            <summary>
            Creates a cryptographically strong sequence of random values (encoded as a Base64 string) for use as salt in cryptographic operations.
            </summary>
            <param name="byteCount">Length of the byte array to be created.</param>
            <returns>Base64-encoded array filled with random values.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.GenerateRandomPassword">
            <summary>
            Generates a random password that is at least 8 characters long.
            </summary>
            <returns>A random password that is at least 8 characters long.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.ParsePasswordFormat(System.String)">
            <summary>
            Converts a string representation of the name of an <see cref="T:System.Web.Security.MembershipPasswordFormat"/> value to the equivalent enumerated value.
            </summary>
            <param name="passwordFormat"> A string containing the name to convert.</param>
            <returns>An object of type <see cref="T:System.Web.Security.MembershipPasswordFormat"/> whose value is represented by the specified string.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.GetUser(System.Object,System.Boolean)">
            <summary>
            NOT IMPLEMENTED: Gets information from the data source for a user based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>A <see cref="T:.MembershipUser"/> object populated with the specified user's information from the data source.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.UnlockUser(System.String)">
            <summary>
            NOT IMPLEMENTED: Clears a lock so that the membership user can be validated.
            </summary>
            <param name="username">The membership user to clear the lock status for.</param>
            <returns>true if the membership user was successfully unlocked; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            NOT IMPLEMENTED: Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"/> enumeration value indicating whether the user was created successfully.</param>
            <returns>A <see cref="T:MembershipUser"/> object populated with the information for the newly created user.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            NOT IMPLEMENTED: Updates information about a user in the data source.
            </summary>
            <param name="user">A <see cref="T:MembershipUser"/> object that represents the user to update and the updated information for the user.</param>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.DeleteUser(System.String,System.Boolean)">
            <summary>
            NOT IMPLEMENTED: Removes a user from the membership data source.
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">true to delete data related to the user from the database; false to leave data related to the user in the database.</param>
            <returns>true if the user was successfully deleted; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.GetPassword(System.String,System.String)">
            <summary>
            NOT IMPLEMENTED: Gets the password for the specified user name from the data source.
            </summary>
            <param name="username">The user to retrieve the password for. </param>
            <param name="answer">The password answer for the user. </param>
            <returns>The password for the specified user name.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.ResetPassword(System.String,System.String)">
            <summary>
            NOT IMPLEMENTED: Resets a user's password to a new, automatically generated password.
            </summary>
            <param name="username">The user to reset the password for. </param>
            <param name="answer">The password answer for the specified user. </param>
            <returns>The new password for the specified user.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.ChangePassword(System.String,System.String,System.String)">
            <summary>
            NOT IMPLEMENTED: Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for. </param>
            <param name="oldPassword">The current password for the specified user. </param>
            <param name="newPassword">The new password for the specified user. </param>
            <returns>true if the password was updated successfully; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            NOT IMPLEMENTED: Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="newPasswordQuestion">The new password question for the specified user. </param>
            <param name="newPasswordAnswer">The new password answer for the specified user. </param>
            <param name="username">The user to change the password question and answer for. </param>
            <param name="password">The password for the specified user. </param>
            <returns>true if the password question and answer are updated successfully; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.GetNumberOfUsersOnline">
            <summary>
            NOT IMPLEMENTED: Gets the number of users currently accessing the application.
            </summary>
            <returns>The number of users currently accessing the application.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.GetUserNameByEmail(System.String)">
            <summary>
            NOT IMPLEMENTED: Gets the user name associated with the specified e-mail address.
            </summary>
            <param name="email">The e-mail address to search for.</param>
            <returns>The user name associated with the specified e-mail address. If no match is found, return null.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            NOT IMPLEMENTED: Gets a collection of all the users in the data source in pages of data.
            </summary>
            <param name="totalRecords">The total number of matched users.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <returns>A <see cref="T:MembershipUserCollection" /> collection that contains a page of pageSize <see cref="T:MembershipUser" /> objects beginning at the page specified by pageIndex.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            NOT IMPLEMENTED: Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="totalRecords">The total number of matched users.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <returns>A <see cref="T:MembershipUserCollection"/> collection that contains a page of pageSize <see cref="T:MembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomMembershipProviderBase.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            NOT IMPLEMENTED: Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="totalRecords">The total number of matched users.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <returns>A <see cref="T:MembershipUserCollection"/> collection that contains a page of pageSize <see cref="T:MembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
        </member>
        <member name="T:QCI.Web.Security.CustomRoleProviderBase">
            <summary>
            Extends <see cref="T:System.Web.Security.RoleProvider"/> to add common reusable methods for custom providers.
            </summary>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes this provider instance.
            </summary>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.OnInitialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Allows the inheriting provider instance to initalize and load custom configuration settings.
            This method is called after all default settings have been loaded (and removed) from the collection, 
            but before the collection is checked for unrecognized settings.
            </summary>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.VerifyCacheRolesInCookieSetting">
            <summary>
            Checks the RoleManager to verify roles are setup to be cached.
            </summary>
        </member>
        <member name="P:QCI.Web.Security.CustomRoleProviderBase.ApplicationName">
            <summary>
            Gets or sets the name of the application using this custom provider.
            </summary>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            NOT IMPLEMENTED: Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be added to the specified roles.</param>
            <param name="roleNames">A string array of the role names to add the specified user names to.</param>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.CreateRole(System.String)">
            <summary>
            NOT IMPLEMENTED: Adds a new role to the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to create.</param>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.DeleteRole(System.String,System.Boolean)">
            <summary>
            NOT IMPLEMENTED: Removes a role from the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throw an exception if roleName has one or more members and do not delete roleName.</param>
            <returns>true if the role was successfully deleted; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.FindUsersInRole(System.String,System.String)">
            <summary>
            NOT IMPLEMENTED: Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
            <param name="roleName">The role to search in.</param>
            <param name="usernameToMatch">The user name to search for.</param>
            <returns>A string array containing the names of all the users where the user name matches usernameToMatch and the user is a member of the specified role.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.GetAllRoles">
            <summary>
            NOT IMPLEMENTED: Gets a list of all the roles for the configured applicationName.
            </summary>
            <returns>A string array containing the names of all the roles stored in the data source for the configured applicationName.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.GetUsersInRole(System.String)">
            <summary>
            NOT IMPLEMENTED: Gets a list of users in the specified role for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to get the list of users for.</param>
            <returns>A string array containing the names of all the users who are members of the specified role for the configured applicationName.</returns>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            NOT IMPLEMENTED: Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be removed from the specified roles.</param>
            <param name="roleNames">A string array of role names to remove the specified user names from.</param>
        </member>
        <member name="M:QCI.Web.Security.CustomRoleProviderBase.RoleExists(System.String)">
            <summary>
            NOT IMPLEMENTED: Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to search for in the data source.</param>
            <returns>true if the role name already exists in the data source for the configured applicationName; otherwise, false.</returns>
        </member>
        <member name="T:QCI.Web.Security.InvalidPasswordException">
            <summary>
            Exception that is thrown when a password fails validation.
            </summary>
        </member>
        <member name="M:QCI.Web.Security.InvalidPasswordException.#ctor(System.String)">
            <summary>
            Initializes a new instance of this class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:QCI.Web.Security.InvalidPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:QCI.Web.Security.InvalidPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:QCI.Web.Security.ProviderUtil">
            <summary>
            Provides utility methods for common operations performed by ASP.NET providers.
            </summary>
        </member>
        <member name="M:QCI.Web.Security.ProviderUtil.GetConfigValue``1(System.Collections.Specialized.NameValueCollection,System.String,``0)">
            <summary>
            Gets a configuration setting value and converts it to the method's return type.
            </summary>
            <typeparam name="T">Type to which to convert the value.</typeparam>
            <param name="config">Collection of configuration settings to use.</param>
            <param name="attributeName">Name of the setting to retreive.</param>
            <param name="defaultValue">Default value to return if no value exists is found for the setting.</param>
            <returns>The configuration value converted to the method's return type, or <paramref name="defaultValue"/> if no value could be found.</returns>
        </member>
        <member name="M:QCI.Web.Security.ProviderUtil.GetAndRemoveConfigValue``1(System.Collections.Specialized.NameValueCollection,System.String,``0)">
            <summary>
            Gets a configuration setting value and converts it to the method's return type, then removes the setting from the collection.
            </summary>
            <typeparam name="T">Type to which to convert the value.</typeparam>
            <param name="config">Collection of configuration settings to use.</param>
            <param name="attributeName">Name of the setting to retreive.</param>
            <param name="defaultValue">Default value to return if no value exists is found for the setting.</param>
            <returns>The configuration value converted to the method's return type, or <paramref name="defaultValue"/> if no value could be found.</returns>
        </member>
        <member name="M:QCI.Web.Security.ProviderUtil.GetDefaultAppName">
            <summary>
            Builds a default application name using information about the currently running instance of ASP.NET.
            </summary>
        </member>
        <member name="M:QCI.Web.Security.ProviderUtil.GetCurrentUserName">
            <summary>
            Gets the username of the user of the current HTTP Context of Thread.
            </summary>
            <returns>Username of the current user, or empty string if none was found.</returns>
        </member>
        <member name="T:QCI.Web.UrlResolver">
            <summary>
            Contains utility methods for resolving virtual paths outside the standard Page framework
            and does not contain the limitations of <see cref="T:VirtualPathUtility"/> with respect to URL's
            containing query strings.
            </summary>
            <remarks>
            ADAPTED FROM: http://www.west-wind.com/Weblog/posts/154812.aspx
            </remarks>
        </member>
        <member name="M:QCI.Web.UrlResolver.ResolveUrl(System.String)">
            <summary>
            Expands a virtual paths starting with a '~' into a application-relative HTTP path.
            Works like Control.ResolveUrl, including support for '~' syntax, but returns an absolute URL.
            This method can be used outside of the Page framework (unlike the Control.ResolveUrl method).
            </summary>
            <param name="url">Any Url including those starting with ~</param>
            <returns>Application-relative absolute URL.</returns>
        </member>
        <member name="M:QCI.Web.UrlResolver.ResolveServerUrl(System.String)">
            <summary>
            This method returns a fully qualified absolute server URL which includes
            the protocol, server, port in addition to the server-relative URL.
            Works like the Page.ResolveUrl() method, but returns a fully-qualified URL.
            This method requires a current <see cref="T:System.Web.HttpContext"/>.
            </summary>
            <param name="url">Any Url, either App relative or fully qualified</param>
            <returns>A fully qualified absolute server URL which includes protocol, server, port, and server-relative URL.</returns>
        </member>
        <member name="M:QCI.Web.UrlResolver.ResolveServerUrl(System.String,System.Boolean)">
            <summary>
            This method returns a fully qualified absolute server URL which includes
            the protocol, server, port in addition to the server relative URL.
            Works like Control.ResolveUrl, including support for '~' syntax, but returns an absolute URL.
            This method requires a current <see cref="T:System.Web.HttpContext"/>.
            </summary>
            <param name="url">Any Url, either app-relative or fully-qualified.</param>
            <param name="forceHttps">Flag value indicating if the returned URL should use HTTPS.</param>
            <returns>A fully qualified absolute server URL which includes protocol, server, port, and server-relative URL.</returns>
        </member>
        <member name="T:QCI.Web.ComboHelper">
            <summary>
            Utility class that provides methods to easily data bind a DropDownList control.
            </summary>
        </member>
        <member name="M:QCI.Web.ComboHelper.BindCombo(System.Web.UI.WebControls.DropDownList,System.Data.DataSet,System.String,System.String)">
            <summary>
            Binds a DataSet to the specified DropDownList.
            </summary>
            <param name="combo">DropDownList to be data bound.</param>
            <param name="ds">DataSet that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textField">Name of the field that provides the text of each list item.</param>
        </member>
        <member name="M:QCI.Web.ComboHelper.BindCombo(System.Web.UI.WebControls.DropDownList,System.Data.DataTable,System.String,System.String)">
            <summary>
            Binds a DataTable to the specified DropDownList.
            </summary>
            <param name="combo">DropDownList to be data bound.</param>
            <param name="dt">DataTable that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textField">Name of the field that provides the text of each list item.</param>
        </member>
        <member name="M:QCI.Web.ComboHelper.BindCombo(System.Web.UI.WebControls.DropDownList,System.Object,System.String,System.String)">
            <summary>
            Populates a DropDownList control with items from the specified data source.
            </summary>
            <param name="combo">DropDownList to be data bound.</param>
            <param name="dataSource">Data source that provides data for populating the control.</param>
            <param name="valueExpression">Expression that provides the value of each list item.</param>
            <param name="textExpression">Expression that provide the text caption value for the list item.</param>
        </member>
        <member name="M:QCI.Web.ComboHelper.BindCombo(System.Web.UI.WebControls.DropDownList,System.Data.DataSet,System.String,System.String,System.String[])">
            <summary>
            Populates a DropDownList control with items from the specified DataTable, formatted using the 
            specified text format and text fields.
            </summary>
            <param name="combo">DropDownList to be data bound.</param>
            <param name="ds">DataSet that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textFormat">Formatting string used to control how items are displayed.</param>
            <param name="textFields">Field names that provide text caption values for the list item.</param>
        </member>
        <member name="M:QCI.Web.ComboHelper.BindCombo(System.Web.UI.WebControls.DropDownList,System.Data.DataTable,System.String,System.String,System.String[])">
            <summary>
            Populates a DropDownList control with items from the specified DataTable, formatted using the 
            specified text format and text fields.
            </summary>
            <param name="combo">DropDownList to be data bound.</param>
            <param name="dt">DataTable that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textFormat">Formatting string used to control how items are displayed.</param>
            <param name="textFields">Field names that provide text caption values for the list item.</param>
        </member>
        <member name="M:QCI.Web.ComboHelper.BindCombo(System.Web.UI.WebControls.DropDownList,System.Object,System.String,System.String,System.String[])">
            <summary>
            Populates a DropDownList control with items from the specified data source, formatted using the 
            specified text format and text fields.
            </summary>
            <param name="combo">DropDownList to be data bound.</param>
            <param name="dataSource">Data source that provides data for populating the control.</param>
            <param name="valueExpression">Expression that provides the value of each list item.</param>
            <param name="textFormat">Formatting string used to control how items are displayed.</param>
            <param name="textExpressions">Expressions that provide text caption values for the list item.</param>
        </member>
        <member name="M:QCI.Web.ComboHelper.SelectComboItem(System.Web.UI.WebControls.DropDownList,System.String)">
            <summary>
            Selects the item in a ComboBox with the specified item value.
            If no item is found, the current selection is not modified.
            </summary>
            <param name="combo">ComboBox to be modified.</param>
            <param name="itemValue">Value of the item to be selected.</param>
            <returns>True if the item was found and selected; otherwise false.</returns>
        </member>
        <member name="T:QCI.Web.DataGridHelper">
            <summary>
            Provides a set of utility methods to help data bind DataGrid controls.
            </summary>
            <remarks>
            <para>
            The DataGridHelper class provides a set of utility methods designed easily add 
            the following behaviors to a standard WebForm DataGrid control.
            </para>
            <para>
            <list type="bullet">
            	<item>Display a 'no records' message when the grid is bound to an empty data source.</item>
            	<item>Keep the page index in bounds (to prevent out-of-range exceptions).</item>
            	<item>Show the Pager row only when there is more than one page.</item>
            </list>
            </para>
            <para>
            Note that the Footer row is used to display the no-records message.
            </para>
            <para>
            Limitations:
            The design of this application block requires that the record count be known before the grid 
            is bound.  This limitation prevents a SqlDataReader from being used as a data source - or any 
            other object that does not implement ICollection.
            </para>
            </remarks>
            <example>
            Binding to a standard DataGrid:
            <code>DataGridHelper.BindGrid(gridUsers, userArrayList, "UserID", "No users found.");</code>
            
            Binding to a paging DataGrid:
            <code>DataGridHelper.BingPagingGrid(gridUsers, dt, "user_id", "No users found.");</code>
            </example>
        </member>
        <member name="M:QCI.Web.DataGridHelper.BindGrid(System.Web.UI.WebControls.DataGrid,System.Data.DataSet,System.String,System.String)">
            <summary>
            Binds a DataGrid using data from a DataSet while forcing the page index 
            in bounds (to avoid out-of-range exceptions). The Footer row will be used for the 
            'no records' message when the DataGrid is empty. The Pager row is made visible when 
            there is more than one page of items.
            </summary>
            <param name="grid">The DataGrid to be bound.</param>
            <param name="ds">The DataSet containing values for the grid. Only the first table is used.</param>
            <param name="dataKeyField">The DataKeyField property for the DataGrid.</param>
            <param name="noRecordsText">The message text to display in the footer when the DataGrid contains no items. Use 'null' to specify no message.</param>
        </member>
        <member name="M:QCI.Web.DataGridHelper.BindGrid(System.Web.UI.WebControls.DataGrid,System.Data.DataTable,System.String,System.String)">
            <summary>
            Binds a DataGrid using data from a DataTable while forcing the page index 
            in bounds (to avoid out-of-range exceptions). The Footer row will be used for the 
            'no records' message when the DataGrid is empty. The Pager row is made visible when 
            there is more than one page of items.
            </summary>
            <param name="grid">The DataGrid to be bound.</param>
            <param name="dt">The DataTable containing values for the grid.</param>
            <param name="dataKeyField">The DataKeyField property for the DataGrid.</param>
            <param name="noRecordsText">The message text to display in the footer when the DataGrid contains no items. Use 'null' to specify no message.</param>
        </member>
        <member name="M:QCI.Web.DataGridHelper.BindGrid(System.Web.UI.WebControls.DataGrid,System.Data.DataView,System.String,System.String)">
            <summary>
            Binds a DataGrid using data from a DataView while forcing the page index 
            in bounds (to avoid out-of-range exceptions). The Footer row will be used for the 
            'no records' message when the DataGrid is empty. The Pager row is made visible when 
            there is more than one page of items.
            </summary>
            <param name="grid">The DataGrid to be bound.</param>
            <param name="dv">The DataView containing values for the grid.</param>
            <param name="dataKeyField">The DataKeyField property for the DataGrid.</param>
            <param name="noRecordsText">The message text to display in the footer when the DataGrid contains no items. Use 'null' to specify no message.</param>
        </member>
        <member name="M:QCI.Web.DataGridHelper.BindGrid(System.Web.UI.WebControls.DataGrid,System.Collections.ICollection,System.String,System.String)">
            <summary>
            Binds a DataGrid using data from an ICollection object while forcing the page 
            index in bounds (to avoid out-of-range exceptions). The Footer row will be used for the
            'no records' message when the DataGrid is empty. The Pager row is made visible when
            there is more than one page of items.
            </summary>
            <param name="grid">The DataGrid to be bound.</param>
            <param name="data">The ICollection containing data values for the DataGrid.</param>
            <param name="dataKeyField">The DataKeyField property for the DataGrid.</param>
            <param name="noRecordsText">The message text to display in the footer when the DataGrid contains no items. Use 'null' to specify no message.</param>
        </member>
        <member name="M:QCI.Web.DataGridHelper.BindPagingGrid(System.Web.UI.WebControls.DataGrid,System.Data.DataSet,System.String,System.String)">
            <summary>
            Binds a paging DataGrid using data from a DataSet while forcing the page index 
            in bounds (to avoid out-of-range exceptions). The Footer row will be used for the 
            'no records' message when the DataGrid is empty. The Pager row is made visible when 
            there is more than one page of items.
            </summary>
            <param name="grid">The DataGrid to be bound.</param>
            <param name="ds">The DataSet containing values for the grid. Only the first table is used.</param>
            <param name="dataKeyField">The DataKeyField property for the DataGrid.</param>
            <param name="noRecordsText">The message text to display in the footer when the DataGrid contains no items. Use 'null' to specify no message.</param>
        </member>
        <member name="M:QCI.Web.DataGridHelper.BindPagingGrid(System.Web.UI.WebControls.DataGrid,System.Data.DataTable,System.String,System.String)">
            <summary>
            Binds a paging DataGrid using data from a DataTable while forcing the page index 
            in bounds (to avoid out-of-range exceptions). The Footer row will be used for the 
            'no records' message when the DataGrid is empty. The Pager row is made visible when 
            there is more than one page of items.
            </summary>
            <param name="grid">The DataGrid to be bound.</param>
            <param name="dt">The DataTable containing values for the grid.</param>
            <param name="dataKeyField">The DataKeyField property for the DataGrid.</param>
            <param name="noRecordsText">The message text to display in the footer when the DataGrid contains no items. Use 'null' to specify no message.</param>
        </member>
        <member name="M:QCI.Web.DataGridHelper.BindPagingGrid(System.Web.UI.WebControls.DataGrid,System.Data.DataView,System.String,System.String)">
            <summary>
            Binds a paging DataGrid using data from a DataView while forcing the page index 
            in bounds (to avoid out-of-range exceptions). The Footer row will be used for the 
            'no records' message when the DataGrid is empty. The Pager row is made visible when 
            there is more than one page of items.
            </summary>
            <param name="grid">The DataGrid to be bound.</param>
            <param name="dv">The DataView containing values for the grid.</param>
            <param name="dataKeyField">The DataKeyField property for the DataGrid.</param>
            <param name="noRecordsText">The message text to display in the footer when the DataGrid contains no items. Use 'null' to specify no message.</param>
        </member>
        <member name="M:QCI.Web.DataGridHelper.BindPagingGrid(System.Web.UI.WebControls.DataGrid,System.Collections.ICollection,System.String,System.String)">
            <summary>
            Binds a paging DataGrid using data from an ICollection object while forcing the page 
            index in bounds (to avoid out-of-range exceptions). The Footer row will be used for the
            'no records' message when the DataGrid is empty. The Pager row is made visible when
            there is more than one page of items.
            </summary>
            <param name="grid">The DataGrid to be bound.</param>
            <param name="data">The ICollection containing data values for the DataGrid.</param>
            <param name="dataKeyField">The DataKeyField property for the DataGrid.</param>
            <param name="noRecordsText">The message text to display in the footer when the DataGrid contains no items. Use 'null' to specify no message.</param>
        </member>
        <member name="M:QCI.Web.DataGridHelper.emptyGrid_ItemCreated(System.Object,System.Web.UI.WebControls.DataGridItemEventArgs)">
            <summary>
            Attaches to the ItemCreated event and watches for the Footer row to be created.
            The Footer row will be re-built to display the 'no-records-found' message
            properly in the grid (e.g., a message spanning all columns in the grid).
            </summary>
            <param name="sender">The source of the event. Assumed to be a DataGrid control.</param>
            <param name="e">A DataGridItemEventArgs that contains the event data.</param>
        </member>
        <member name="M:QCI.Web.DataSourceHelper.GetResolvedDataSource(System.Object,System.String)">
            <remarks>
            Source code taken from the System.Web.dll assembly.
            </remarks>
        </member>
        <member name="T:QCI.Web.ExpiredQueryStringException">
            <summary>
            The exception that is thrown when a query string has expired and is therefore no longer valid.
            </summary>
        </member>
        <member name="M:QCI.Web.ExpiredQueryStringException.#ctor">
            <summary>
            Initializes a new instance of this class with no specified message.
            </summary>
        </member>
        <member name="M:QCI.Web.ExpiredQueryStringException.#ctor(System.String)">
            <summary>
            Initializes an new instance of this class with a specified error message.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:QCI.Web.ExpiredQueryStringException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:QCI.Web.ExpiredQueryStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:QCI.Web.InvalidQueryStringException">
            <summary>
            Exception that is throw when invalid values are passed in the query string to a page.
            </summary>
        </member>
        <member name="M:QCI.Web.InvalidQueryStringException.#ctor(System.String)">
            <summary>
            Initializes an new instance of this class with a specified error message.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:QCI.Web.InvalidQueryStringException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:QCI.Web.InvalidQueryStringException.#ctor(System.String,System.String)">
            <summary>
            Initializes an new instance of this class with a specified error message and the parameter name.
            </summary>
            <param name="parameterName">Name of the parameter for which the value is invalid.</param>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:QCI.Web.InvalidQueryStringException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes an new instance of this class with the specified error message, the parameter name,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="parameterName">Name of the parameter for which the value is invalid.</param>
            <param name="message">A message that describes the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:QCI.Web.InvalidQueryStringException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes an new instance of this class with a specified error message, parameter name, and parameter value.
            </summary>
            <param name="parameterName">Name of the parameter for which the value is invalid.</param>
            <param name="parameterValue">Actual value of the parameter.</param>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:QCI.Web.InvalidQueryStringException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a specified error message, the parameter name, the parameter value,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="parameterName">Name of the parameter that caused this exception.</param>
            <param name="parameterValue">Value of the parameter that caused this exception.</param>
            <param name="message">A message that describes the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:QCI.Web.InvalidQueryStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:QCI.Web.InvalidQueryStringException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:QCI.Web.InvalidQueryStringException.ParameterName">
            <summary>
            Gets the name of the parameter that contains an invalid value.
            </summary>
        </member>
        <member name="P:QCI.Web.InvalidQueryStringException.ParameterValue">
            <summary>
            Gets the value of the parameter which is invalid.
            </summary>
        </member>
        <member name="T:QCI.Web.JavaScript">
            <summary>
            Provides general utility methods which make use of JavaScript.
            </summary>
        </member>
        <member name="M:QCI.Web.JavaScript.AddConfirmationNoticeToWebControl(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Attaches a client-side JavaScript confirmation to the passed control.  The user is promted 
            with the specified message when the control is clicked, allowing them to cancel the action.
            NOTE: A cross-browser JavaScript function is wired to the 'onclick' event of the control.
            </summary>
            <param name="webControl">WebControl to be modified.</param>
            <param name="message">Confirmation message to appear when the control is clicked.</param>
        </member>
        <member name="M:QCI.Web.JavaScript.EncodeStringForJavaScript(System.String)">
            <summary>
            Encodes the specified string for use as a string in JavaScript code.
            </summary>
            <param name="str">String value to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:QCI.Web.JavaScript.SetDefaultButton(System.Web.UI.WebControls.WebControl,System.Web.UI.Control)">
            <summary>
            Modifies the default action of a control when [enter] is pressed so that the specified 
            button is clicked, rather than the first button on the page.
            NOTE: A cross-browser JavaScript function is added to the page and wired to the 'onkeypress' 
            event of the control.
            </summary>
            <param name="control">Control to be modified (usually a TextBox control).</param>
            <param name="defaultButton">The control to click when [enter] is pressed while in the TextBox.</param>
        </member>
        <member name="M:QCI.Web.JavaScript.SetInputFocus(System.Web.UI.Control)">
            <summary>
            Adds a script to the page holding the specified control that will cause the 
            control to receive the focus page is loaded.
            </summary>
            <param name="control">Control to receive the focus on page load.</param>
        </member>
        <member name="M:QCI.Web.JavaScript.SetInputSelect(System.Web.UI.Control)">
            <summary>
            Adds a script to the page holding the specified control that will highlight 
            the input area of the control when the page is loaded.
            </summary>
            <param name="control">Control to be selected on page load.</param>
        </member>
        <member name="M:QCI.Web.JavaScript.ShowMessage(System.Web.UI.Page,System.String)">
            <summary>
            Adds a script to the specified page that will cause an alert message to be 
            displayed when the page is loaded.
            </summary>
            <param name="page">Page to which this script will be added.</param>
            <param name="message">Message to be displayed.</param>
        </member>
        <member name="M:QCI.Web.JavaScript.ShowMessageAndRedirect(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Adds a script to the specified page that will cause an alert message to be 
            displayed and the browser to be redirected to a new URL when the page is loaded.
            </summary>
            <param name="page">Page to which this script will be added.</param>
            <param name="message">Message to be displayed.</param>
            <param name="url">URL to redirect the user to after they close the message.</param>
        </member>
        <member name="M:QCI.Web.JavaScript.ShowValidationSummaryMessage(System.Web.UI.WebControls.ValidationSummary)">
            <summary>
            Creates the same validation summary message presented to clients on IE
            and adds a script to the specified page that will cause it to be 
            displayed when the page is loaded.
            </summary>
            <param name="control">The ValidationSummary control to evaluate.</param>
        </member>
        <member name="M:QCI.Web.JavaScript.RegisterAddScriptToEventFunction_FIX(System.Web.UI.Page)">
            <summary>
            Adds a generalized script to the page that allows other scripts
            to be added to object events without disrupting existing scripts 
            associated to the object.
            </summary>
            <param name="page">Page to which this script will be added.</param>
        </member>
        <member name="T:QCI.Web.QueryString">
            <summary>
            Provides utility methods to simplify accessing and converting query string values from HTTP requests.
            </summary>
        </member>
        <member name="M:QCI.Web.QueryString.GetRequiredValue``1(System.String)">
            <summary>
            Gets a required query string value from the current HTTP Request.
            An exception of type <see cref="T:QCI.Web.InvalidQueryStringException"/> is thrown if the parameter is 
            not found or has no value.
            </summary>
            <typeparam name="T">Return type for this method.</typeparam>
            <param name="name">Name of the query string parameter to retreive.</param>
            <returns>The value from the query string converted to the method's return type.</returns>
        </member>
        <member name="M:QCI.Web.QueryString.GetOptionalValue``1(System.String)">
            <summary>
            Gets an optional query string value from the current HTTP Request.
            </summary>
            <typeparam name="T">Return type for this method.</typeparam>
            <param name="name">Name of the query string parameter to retreive.</param>
            <returns>The value from the query string converted to the method's return type; otherwise the default value for the method's return type.</returns>
        </member>
        <member name="M:QCI.Web.QueryString.GetOptionalValue``1(System.String,``0)">
            <summary>
            Gets an optional query string value from the current HTTP Request.
            </summary>
            <typeparam name="T">Return type for this method.</typeparam>
            <param name="name">Name of the query string parameter to retreive.</param>
            <param name="defaultValue">Value to return if the query string parameter was not found or had no value.</param>
            <returns>The value from the query string converted to the method's return type; otherwise the specified default value.</returns>
        </member>
        <member name="M:QCI.Web.QueryString.TryGet``1(System.String,``0@)">
            <summary>
            Attempts to retreive a query string value from the current HTTP Request.
            </summary>
            <typeparam name="T">Return type for this method.</typeparam>
            <param name="name">Name of the query string parameter to retreive.</param>
            <param name="value">The value from the query string converted to the method's return type; otherwise the default value for the method's return type.</param>
            <returns>True if a value exists for the query string parameter; otherwise false.</returns>
        </member>
        <member name="T:QCI.Web.ScriptBlock">
            <summary>
            Defines a client-side script block to be included in a web page.
            </summary>
        </member>
        <member name="M:QCI.Web.ScriptBlock.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="key">Unique key that identifies this script block.</param>
            <param name="script">Content of script to be sent to the client.</param>
        </member>
        <member name="M:QCI.Web.ScriptBlock.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="key">Unique key that identifies this script block.</param>
            <param name="script">Content of script to be sent to the client.</param>
            <param name="hasScriptTags">Flag value that indicates if the script is wrapped in HTML script tags.</param>
        </member>
        <member name="M:QCI.Web.ScriptBlock.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="key">Unique key that identifies this script block.</param>
            <param name="script">Content of script to be sent to the client.</param>
            <param name="group">The number of the group to which this script should be associated.  Lower valued groups will appear higher on the page.</param>
        </member>
        <member name="M:QCI.Web.ScriptBlock.#ctor(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="key">Unique key that identifies this script block.</param>
            <param name="script">Content of script to be sent to the client.</param>
            <param name="hasScriptTags">Flag value that indicates if the script is wrapped in HTML script tags.</param>
            <param name="group">The number of the group to which this script should be associated.  Lower valued groups will appear higher on the page.</param>
        </member>
        <member name="P:QCI.Web.ScriptBlock.Key">
            <summary>
            Gets or sets the unique key that identifies this script block.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptBlock.Script">
            <summary>
            Gets or sets the content of script to be sent to the client.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptBlock.HasScriptTags">
            <summary>
            Gets or sets a value indicating if the script is wrapped in HTML script tags.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptBlock.Group">
            <summary>
            Gets or sets number of the group to which this script should be associated.  
            Lower valued groups will appear higher on the page.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptBlock.Index">
            <summary>
            Gets or sets the index of this script with respect to others in a collection.
            </summary>
        </member>
        <member name="T:QCI.Web.ScriptCollection">
            <summary>
            Defines a collection that stores ScriptBlock objects.
            </summary>
        </member>
        <member name="M:QCI.Web.ScriptCollection.#ctor">
            <summary>
            Initializes a new instance of the ScriptCollection class.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptCollection.Item(System.String)">
            <summary>
            Gets or sets the ScriptBlock with the specified key.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ScriptBlock at the specified index.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:QCI.Web.ScriptCollection.Add(QCI.Web.ScriptBlock)">
            <summary>
            Adds a ScriptBlock to the end of the collection.
            </summary>
            <param name="value">The ScriptBlock to add to the collection.</param>
        </member>
        <member name="M:QCI.Web.ScriptCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the end of the list.
            </summary>
            <param name="value">The item to add to the list.</param>
        </member>
        <member name="M:QCI.Web.ScriptCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:QCI.Web.ScriptCollection.Contains(System.String)">
            <summary>
            Determines whether a ScriptBlock is in the collection.
            </summary>
            <param name="key">The key of the ScriptBlock to locate in the collection.</param>
            <returns>True if the item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.ScriptCollection.Contains(QCI.Web.ScriptBlock)">
            <summary>
            Determines whether a ScriptBlock is in the collection.
            </summary>
            <param name="value">The ScriptBlock to locate in the collection.</param>
            <returns>True if the item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.ScriptCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether an element is in the list.
            </summary>
            <param name="value">The element to locate in the list.</param>
            <returns>True if the element is found in the list; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.ScriptCollection.IndexOf(System.String)">
            <summary>
            Searches for the specified ScriptBlock and returns the zero-based index of the first 
            occurrence within the collection.
            </summary>
            <param name="key">The key of the ScriptBlock to locate.</param>
            <returns>The index of the item found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:QCI.Web.ScriptCollection.IndexOf(QCI.Web.ScriptBlock)">
            <summary>
            Searches for the specified ScriptBlock and returns the zero-based index of the first 
            occurrence within the collection.
            </summary>
            <param name="value">The ScriptBlock to locate.</param>
            <returns>The index of the item found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:QCI.Web.ScriptCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Searches for the specified element and returns the zero-based index of the first 
            occurrence within the list.
            </summary>
            <param name="value">The item to locate in the list.</param>
            <returns>The index of the item found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:QCI.Web.ScriptCollection.Insert(System.Int32,QCI.Web.ScriptBlock)">
            <summary>
            Inserts a ScriptBlock into the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which the ScriptBlock is to be inserted.</param>
            <param name="value">The ScriptBlock to insert.</param>
        </member>
        <member name="M:QCI.Web.ScriptCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a item into the list at the specified position.
            </summary>
            <param name="index">The zero-based index at which the item is to be inserted.</param>
            <param name="value">The item to insert.</param>
        </member>
        <member name="P:QCI.Web.ScriptCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the list has a fixed size.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the list is read-only.
            </summary>
        </member>
        <member name="M:QCI.Web.ScriptCollection.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific ScriptBlock from the collection.
            </summary>
            <param name="key">The key of the ScriptBlock to remove.</param>
        </member>
        <member name="M:QCI.Web.ScriptCollection.Remove(QCI.Web.ScriptBlock)">
            <summary>
            Removes the first occurrence of a specific ScriptBlock from the collection.
            </summary>
            <param name="value">The ScriptBlock to remove.</param>
        </member>
        <member name="M:QCI.Web.ScriptCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of the specific item from the list.
            </summary>
            <param name="value">The item to remove.</param>
        </member>
        <member name="M:QCI.Web.ScriptCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the ScriptBlock at the specified position of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:QCI.Web.ScriptCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptCollection.Count">
            <summary>
            Gets the number of items contained in the collection
            </summary>
        </member>
        <member name="M:QCI.Web.ScriptCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the collection.</param>
            <param name="index">The zero-based index in the target array at which copying begins.</param>
        </member>
        <member name="P:QCI.Web.ScriptCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="M:QCI.Web.ScriptCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QCI.Web.ScriptCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the ScriptBlock collection using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing items.</param>
        </member>
        <member name="T:QCI.Web.ScriptHelper">
            <summary>
            Provides a substitute to the System.Web.UI.Page client-side scripting model, offering a number of enhancements.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptHelper.StartScriptTag">
            <summary>
            Gets or set the start of the default HTML script tag, added to all scripts marked as not having one.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptHelper.EndScriptTag">
            <summary>
            Gets or set the end of the default HTML script tag, added to all scripts marked as not having one.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptHelper.ScriptSeparator">
            <summary>
            Gets or sets the default separator added between each script block when injected into a page.
            </summary>
        </member>
        <member name="P:QCI.Web.ScriptHelper.DefaultGroup">
            <summary>
            Gets or sets the default group for scripts that do not define one explicitly when created.
            </summary>
        </member>
        <member name="M:QCI.Web.ScriptHelper.GetClientScripts(System.Web.UI.Page)">
            <summary>
            Returns the collection of client scripts that are registered with the specified page.
            </summary>
            <param name="page">A reference to the current page.</param>
            <returns>A ScriptCollection containing registered client scripts.</returns>
        </member>
        <member name="M:QCI.Web.ScriptHelper.GetStartupScripts(System.Web.UI.Page)">
            <summary>
            Returns the collection of startup scripts that are registered with the specified page.
            </summary>
            <param name="page">A reference to the current page.</param>
            <returns>A ScriptCollection containing registered startup scripts.</returns>
        </member>
        <member name="M:QCI.Web.ScriptHelper.IsClientScriptRegistered(System.Web.UI.Page,System.String)">
            <summary>
            A replacement for Page.IsClientScriptBlockRegistered.
            Determines if the client script block is registered with the page in an area before the server controls. 
            This is done by checking the ClientScripts collection for a script with the specified key.
            </summary>
            <param name="page">A reference to the page to search.</param>
            <param name="key">The string key of the client script to search for.</param>
            <returns>Returns true if the script block is registered; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.ScriptHelper.IsStartupScriptRegistered(System.Web.UI.Page,System.String)">
            <summary>
            A replacement for Page.IsStartupScriptRegistered.
            Determines if the startup script block is registered with the page in the area below the server controls.
            This is done by checking the StartupScripts collection for a script with the specified key.
            </summary>
            <param name="page">A reference to the page to search.</param>
            <param name="key">The string key of the startup script to search for.</param>
            <returns>Returns true if the script block is registered; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Web.ScriptHelper.RegisterClientScriptBlock(System.Web.UI.Page,System.String,System.String)">
            <summary>
            A replacement for Page.RegisterClientScriptBlock.
            Registers a client-side script block that will be emitted into the Page in the area above 
            the server controls.  This is done by adding the script to the ClientScripts collection.
            </summary>
            <param name="page">A reference to the current page.</param>
            <param name="key">Unique key that identifies this script block.</param>
            <param name="script">Content of script to be sent to the client.</param>
        </member>
        <member name="M:QCI.Web.ScriptHelper.RegisterClientScriptBlock(System.Web.UI.Page,System.String,System.String,System.Boolean)">
            <summary>
            A replacement for Page.RegisterClientScriptBlock.
            Registers a client-side script block that will be emitted into the Page in the area above 
            the server controls.  This is done by adding the script to the ClientScripts collection.
            </summary>
            <param name="page">A reference to the current page.</param>
            <param name="key">Unique key that identifies this script block.</param>
            <param name="script">Content of script to be sent to the client.</param>
            <param name="hasScriptTags">Flag value that indicates if the script is wrapped in HTML script tags.</param>
        </member>
        <member name="M:QCI.Web.ScriptHelper.RegisterClientScriptBlock(System.Web.UI.Page,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            A replacement for Page.RegisterClientScriptBlock.
            Registers a client-side script block that will be emitted into the Page in the area above 
            the server controls.  This is done by adding the script to the ClientScripts collection.
            </summary>
            <param name="page">A reference to the current page.</param>
            <param name="key">Unique key that identifies this script block.</param>
            <param name="script">Content of script to be sent to the client.</param>
            <param name="hasScriptTags">Flag value that indicates if the script is wrapped in HTML script tags.</param>
            <param name="group">The number of the group to which this script should be associated.  Lower valued groups will appear higher on the page.</param>
        </member>
        <member name="M:QCI.Web.ScriptHelper.RegisterStartupScript(System.Web.UI.Page,System.String,System.String)">
            <summary>
            A replacement for Page.RegisterStartupScript.
            Registers a client-side script block that will be emitted into the Page in the area below 
            the server controls.  This is done by adding the script to the StartupScripts collection.
            </summary>
            <param name="page">A reference to the current page.</param>
            <param name="key">Unique key that identifies this script block.</param>
            <param name="script">Content of script to be sent to the client.</param>
        </member>
        <member name="M:QCI.Web.ScriptHelper.RegisterStartupScript(System.Web.UI.Page,System.String,System.String,System.Boolean)">
            <summary>
            A replacement for Page.RegisterStartupScript.
            Registers a client-side script block that will be emitted into the Page in the area below 
            the server controls.  This is done by adding the script to the StartupScripts collection.
            </summary>
            <param name="page">A reference to the current page.</param>
            <param name="key">Unique key that identifies this script block.</param>
            <param name="script">Content of script to be sent to the client.</param>
            <param name="hasScriptTags">Flag value that indicates if the script is wrapped in HTML script tags.</param>
        </member>
        <member name="M:QCI.Web.ScriptHelper.RegisterStartupScript(System.Web.UI.Page,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            A replacement for Page.RegisterStartupScript.
            Registers a client-side script block that will be emitted into the Page in the area below 
            the server controls.  This is done by adding the script to the StartupScripts collection.
            </summary>
            <param name="page">A reference to the current page.</param>
            <param name="key">Unique key that identifies this script block.</param>
            <param name="script">Content of script to be sent to the client.</param>
            <param name="hasScriptTags">Flag value that indicates if the script is wrapped in HTML script tags.</param>
            <param name="group">The number of the group to which this script should be associated.  Lower valued groups will appear higher on the page.</param>
        </member>
        <member name="T:QCI.Web.SecureUrl">
            <summary>
            Generates tamper-proof URLs secured with an MD5 digest added to the query string.
            URLs generated with this class are user-specific; a url generated for one user cannot be used by another.
            MD5 digests are NOT added to URLs with no query string parameters. It is assumed
            page-level authorization is handled by the application.
            </summary>
            <remarks>
            A better name for this class would have been something like 'SecureQueryString', since this class
            only protects against tampering when there is at least one value in the query string.
            </remarks>
        </member>
        <member name="M:QCI.Web.SecureUrl.VerifyDigestOfRequest(System.Web.HttpRequest)">
            <summary>
            Verifies the URL of a request has not beed tampered with by checking any security digest present in the query string.
            If a security digest is required for the request, it must be present. If a digest is present, it must be valid.
            An <see cref="T:QCI.Web.InvalidQueryStringException"/> is thrown when a digest is required but not present, or when a digest is present but not valid.
            </summary>
            <param name="request">HttpRequest to verify.</param>
            <exception cref="T:QCI.Web.InvalidQueryStringException">Digest parameter is required but not present in the URL, or digest is present but not valid.</exception>
        </member>
        <member name="M:QCI.Web.SecureUrl.VerifyDigestOfRequest(System.Web.HttpRequest,System.String)">
            <summary>
            Verifies the URL of a request has not beed tampered with by checking any security digest present in the query string.
            If a security digest is required for the request, it must be present. If a digest is present, it must be valid.
            An <see cref="T:QCI.Web.InvalidQueryStringException"/> is thrown when a digest is required but not present, or when a digest is present but not valid.
            </summary>
            <param name="request">HttpRequest to verify.</param>
            <param name="username">Username of the user to assume will be accessing the URL.</param>
            <exception cref="T:QCI.Web.InvalidQueryStringException">Digest parameter is required but not present in the URL, or digest parameter is present in the URL but not valid.</exception>
        </member>
        <member name="M:QCI.Web.SecureUrl.IsRequestUrlValid(System.Web.HttpRequest)">
            <summary>
            Determines if the URL of a request has beed tampered with by checking the security digest present in the query string.
            If a security digest is required for the request, it must be present. If a digest is present, it must be valid.
            </summary>
            <returns>Returns false if a digest is required but not present, or if present but not valid; otherwise, returns true.</returns>
        </member>
        <member name="M:QCI.Web.SecureUrl.IsRequestUrlValid(System.Web.HttpRequest,System.String)">
            <summary>
            Determines if the URL of a request has beed tampered with by checking the security digest present in the query string.
            If a security digest is required for the request, it must be present; If a digest is present, it must be valid.
            </summary>
            <param name="request">HttpRequest to be checked.</param>
            <param name="username">Username of the user to assume will be accessing the URL.</param>
            <returns>Returns false if a digest is required but not present, or if present but not valid; otherwise, returns true.</returns>
        </member>
        <member name="M:QCI.Web.SecureUrl.CheckRequestUrl(System.Web.HttpRequest,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Checks the URL of a request and determines: 
            (a) if a digest is required to secure the URL, 
            (b) whether a digest parameter is present in the URL, and
            (c) if the digest is valid (when present) or not required (when not present).
            </summary>
            <param name="request">HttpRequest to be checked.</param>
            <param name="digestRequired">Returns a value indicating whether a digest is required to secure this URL.</param>
            <param name="digestPresent">Returns a value indicating whether the digest was found in the URL.</param>
            <param name="digestValid">Returns a value indicating if the digest is valid (when present), or not required (when not present).</param>
        </member>
        <member name="M:QCI.Web.SecureUrl.CheckRequestUrl(System.Web.HttpRequest,System.String,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Checks the URL of a request and determines: 
            (a) if a digest is required to secure the URL, 
            (b) whether a digest parameter is present in the URL, and
            (c) if the digest is valid (when present) or not required (when not present).
            </summary>
            <param name="request">HttpRequest to be checked.</param>
            <param name="username">Username of the user to assume will be accessing the URL.</param>
            <param name="digestRequired">Returns a value indicating whether a digest is required to secure this URL.</param>
            <param name="digestPresent">Returns a value indicating whether the digest was found in the URL.</param>
            <param name="digestValid">Returns a value indicating if the digest is valid (when present), or not required (when not present).</param>
        </member>
        <member name="M:QCI.Web.SecureUrl.Create(System.String)">
            <summary>
            Creates a secure URL by adding a MD5 digest to the URL passed.
            </summary>
            <param name="url">Unsecured URL to make secure.</param>
            <returns>The passed URL, secured using an MD5 digest.</returns>
        </member>
        <member name="M:QCI.Web.SecureUrl.Create(System.String,System.Object[])">
            <summary>
            Creates a secure URL by adding a MD5 digest to the URL passed.
            </summary>
            <param name="urlFormat">String format for the URL.</param>
            <param name="args">A list of arguments for the URL format string.</param>
            <returns>A formatted URL, secured using an MD5 digest.</returns>
        </member>
        <member name="M:QCI.Web.SecureUrl.CreateForUser(System.String,System.String)">
            <summary>
            Creates a secure URL for a specific user by adding a MD5 digest to the URL passed.
            </summary>
            <param name="username">Username to associate to the URL.</param>
            <param name="url">Unsecured URL to make secure.</param>
            <returns>The passed URL, secured using an MD5 digest.</returns>
        </member>
        <member name="M:QCI.Web.SecureUrl.CreateForUser(System.String,System.String,System.Object[])">
            <summary>
            Creates a secure URL for a specific user by adding a MD5 digest to the URL passed.
            </summary>
            <param name="username">Username to associate with the URL.</param>
            <param name="urlFormat">String format for the URL.</param>
            <param name="args">A list of arguments for the URL format string.</param>
            <returns>A formatted URL, secured using an MD5 digest.</returns>
        </member>
        <member name="T:QCI.Web.SecureUrl.SecureUrlSalt">
            <summary>
            Encapuslates the logic involved in getting the salt key used to secure digests generated by <see cref="T:QCI.Web.SecureUrl"/>.
            </summary>
        </member>
        <member name="T:QCI.Web.Validation.FieldValidation">
            <summary>
            Utility class to help reduce the amount of validation logic required 
            to verify user-entered data in a TextBox or DropDownList web control.
            </summary>
            <remarks>
            <para>
            The FieldValidation class is designed to greatly reduce the volume of code required 
            to perform standard validations on user-entered data in TextBox and DropDownList controls.
            </para>
            <para>
            Specifically, this class helps check for the following conditions:
            <list type="bullet">
            	<item>Required fields missing values.</item>
            	<item>Text values that are either too long or too short.</item>
            	<item>Numeric values that are too large and/or too small.</item>
            	<item>Invalid selections in DropDownList boxes.</item>
            </list>
            In most cases, only one line of code is needed to perform all the applicable checks above.
            </para>
            <para>
            Limitations:
            Regular expressions are used to verify the string values can be parsed to the data 
            type requested.  Because of this, float strings using scientific notation will be 
            considered invalid when calling ValidateFloatField overloads.
            </para>
            </remarks>
            <example>
            Validate user-input fields and add or update the record:
            
            <code>
            try
            {
            	string firstName = FieldValidation.ValidateStringField(txtFirst, "First name", 20, false);
            	string lastName = FieldValidation.ValidateStringField(txtLast, "Last name", 30, true);
            	string email = FieldValidation.ValidateStringField(txtEmail, "Email address", 70, true);
            	string password = FieldValidation.ValidateStringField(txtPassword, "Password", 15, 6);
            	string accountTypeID = FieldValidation.ValidateComboField(cboAccountType, "Type of account", "");
            	int daysActive = FieldValidation.ValidateIntegerField(txtDaysActive, "Days account is active", 1, 365);
            	bool mailingList = this.chkMailingList.Checked;
            
            	// verify: username must be globally unique
            	bool exists = StoredProcedures.User_DoesEmailExists(emailAddress)
            	if( exists ) 
            	{
            		throw new FieldValidationException("Email already exists on file and cannot be duplicated.");
            	}
            }
            catch(FieldValidationException ex) // validation failed
            {
            	// show the validation error to the user
            	this.lblErrorMessage.Text = ex.Message;
            	return;
            }
            
            // add or update the record
            // ...
            
            </code>
            </example>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateComboField(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>
            Verifies an item is selected from the specified field.
            If the field contains invalid selection an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Combo box field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <returns>The item value of the selected item.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateComboField(System.Web.UI.WebControls.ListControl,System.String,System.String)">
            <summary>
            Verifies a valid item is selected from the specified field.
            If the field contains invalid selection an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Combo box field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="invalidItemValue">An item value that is not considered a valid selection.</param>
            <returns>The item value of the selected item.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateFloatField(System.Web.UI.WebControls.TextBox,System.String)">
            <summary>
            Verifies the field contains an float value.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <returns>Float value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateFloatField(System.Web.UI.WebControls.TextBox,System.String,System.Single)">
            <summary>
            Verifies the field contains an float value no less then the specified minimum.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="minValue">Minimum value allowed.</param>
            <returns>Float value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateFloatField(System.Web.UI.WebControls.TextBox,System.String,System.Single,System.Boolean)">
            <summary>
            Verifies the field contains an float value no less then the specified minimum.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="minValue">Minimum value allowed.</param>
            <param name="isInclusive">When true, an inclusive range check is done; otherwise an exclusive range check is done.</param>
            <returns>Float value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateFloatField(System.Web.UI.WebControls.TextBox,System.String,System.Single,System.Single)">
            <summary>
            Verifies the field contains an float value in the specified range.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="minValue">Minimum value allowed.</param>
            <param name="maxValue">Maximum value allowed.</param>
            <returns>Float value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateFloatField(System.Web.UI.WebControls.TextBox,System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Verifies the field contains an float value in the specified range.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="minValue">Minimum value allowed.</param>
            <param name="maxValue">Maximum value allowed.</param>
            <param name="isInclusive">When true, an inclusive range check is done; otherwise an exclusive range check is done.</param>
            <returns>Float value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateIntegerField(System.Web.UI.WebControls.TextBox,System.String)">
            <summary>
            Verifies the field contains an integer value.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <returns>Integer value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateIntegerField(System.Web.UI.WebControls.TextBox,System.String,System.Int32)">
            <summary>
            Verifies the field contains an integer value no less then the specified minimum.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="minValue">Minimum value allowed.</param>
            <returns>Integer value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateIntegerField(System.Web.UI.WebControls.TextBox,System.String,System.Int32,System.Boolean)">
            <summary>
            Verifies the field contains an integer value no less then the specified minimum.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="minValue">Minimum value allowed.</param>
            <param name="isInclusive">When true, an inclusive range check is done; otherwise an exclusive range check is done.</param>
            <returns>Integer value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateIntegerField(System.Web.UI.WebControls.TextBox,System.String,System.Int32,System.Int32)">
            <summary>
            Verifies the field contains an integer value in the specified range.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="minValue">Minimum value allowed.</param>
            <param name="maxValue">Maximum value allowed.</param>
            <returns>Integer value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateIntegerField(System.Web.UI.WebControls.TextBox,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Verifies the field contains an integer value in the specified range.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="minValue">Minimum value allowed.</param>
            <param name="maxValue">Maximum value allowed.</param>
            <param name="isInclusive">When true, an inclusive range check is done; otherwise an exclusive range check is done.</param>
            <returns>Integer value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateStringField(System.Web.UI.WebControls.TextBox,System.String,System.Int32)">
            <summary>
            Verifies the field contains an string value no longer than the specified maximum length.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="maxLength">Maximum allowed character length.</param>
            <returns>The string value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateStringField(System.Web.UI.WebControls.TextBox,System.String,System.Int32,System.Boolean)">
            <summary>
            Verifies the field contains an string value no longer than the specified maximum length.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="maxLength">Maximum allowed character length.</param>
            <param name="isRequired">Whether the field must contain a non-empty string.</param>
            <returns>The string value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateStringField(System.Web.UI.WebControls.TextBox,System.String,System.Int32,System.Int32)">
            <summary>
            Verifies the field contains an string value having a length within the specified bounds.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="maxLength">Maximum allowed character length.</param>
            <param name="minLength">Minimum allowed character length.</param>
            <returns>The string value found in the specified TextBox.</returns>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidation.ValidateStringField(System.Web.UI.WebControls.TextBox,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Verifies the field contains an string value having a length within the specified bounds.
            If the field contains an invalid value an exception of type FieldValidationException is thrown.
            </summary>
            <param name="field">Text field to be evaluated.</param>
            <param name="fieldName">User-friendly field name used in exception messages if the validation fails.</param>
            <param name="maxLength">Maximum allowed character length.</param>
            <param name="minLength">Minimum allowed character length.</param>
            <param name="isRequired">Whether the field must contain a non-empty string.</param>
            <returns>The string value found in the specified TextBox.</returns>
        </member>
        <member name="T:QCI.Web.Validation.FieldValidationException">
            <summary>
            Exception that is throw when a user-input field fails validation.
            </summary>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidationException.#ctor(System.String)">
            <summary>
            Initializes an new instance of this class with the specified error message.
            </summary>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidationException.#ctor(System.Web.UI.Control,System.String)">
            <summary>
            Initializes an new instance of this class with the specified error message.
            </summary>
            <param name="control">Control that failed validation.</param>
            <param name="message">A message that describes the current exception.</param>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidationException.#ctor(System.Web.UI.Control,System.String,System.Exception)">
            <summary>
            Initializes a new instance of this class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="control">Control that failed validation.</param>
            <param name="message">A message that describes the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:QCI.Web.Validation.FieldValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:QCI.Web.Validation.FieldValidationException.Control">
            <summary>
            Gets the control that failed validation.
            </summary>
        </member>
        <member name="T:QCI.WindowsForms.ListManagement.ItemReselectMethod">
            <summary>
            Specifies how the selection of items should be retained when a list is 
            being re-populated using a PopulateList method.
            </summary>
        </member>
        <member name="F:QCI.WindowsForms.ListManagement.ItemReselectMethod.ByKey">
            <summary>
            Item selection should be maintained by key.
            </summary>
        </member>
        <member name="F:QCI.WindowsForms.ListManagement.ItemReselectMethod.ByIndex">
            <summary>
            Item selection should be maintained by index.
            </summary>
        </member>
        <member name="F:QCI.WindowsForms.ListManagement.ItemReselectMethod.None">
            <summary>
            No item selection should be maintained.
            </summary>
        </member>
        <member name="T:QCI.WindowsForms.ListManagement.ListHelper">
            <summary>
            General helper methods for WinForm List controls (ListBox, ComboBox, and ListView).
            </summary>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.PopulateList(System.Windows.Forms.ComboBox,QCI.WindowsForms.ListManagement.ListItemCollection)">
            <summary>
            Populates a ComboBox control with a collection of ListItem objects.
            Currently selected items are lost.
            </summary>
            <param name="comboBox">ComboBox to populate.</param>
            <param name="items">Collection of ListItem objects to add.</param>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.PopulateList(System.Windows.Forms.ComboBox,QCI.WindowsForms.ListManagement.ListItemCollection,QCI.WindowsForms.ListManagement.ItemReselectMethod)">
            <summary>
            Populates a ComboBox control with a collection of ListItem objects.
            Existing item selections are preserved using the specified reselect method.
            </summary>
            <param name="comboBox">ComboBox to populate.</param>
            <param name="items">Collection of ListItem objects to add.</param>
            <param name="reselectMethod">Determines how item selections are kept.</param>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.PopulateList(System.Windows.Forms.ListBox,QCI.WindowsForms.ListManagement.ListItemCollection)">
            <summary>
            Populates a ListBox control with a collection of ListItem objects.
            Currently selected items are lost.
            </summary>
            <param name="listBox">ListBox to populate.</param>
            <param name="items">Collection of ListItem objects to add.</param>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.PopulateList(System.Windows.Forms.ListBox,QCI.WindowsForms.ListManagement.ListItemCollection,QCI.WindowsForms.ListManagement.ItemReselectMethod)">
            <summary>
            Populates a ListBox control with a collection of ListItem objects.
            Existing item selections are preserved using the specified reselect method.
            </summary>
            <param name="listBox">ListBox to populate.</param>
            <param name="items">Collection of ListItem objects to add.</param>
            <param name="reselectMethod">Determines how item selections are kept.</param>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.PopulateList(System.Windows.Forms.ListView,System.Collections.ICollection)">
            <summary>
            Populates a ListView control with a collection of ListViewItem objects.
            Currently selected items are lost.
            </summary>
            <param name="listView">ListView to populate.</param>
            <param name="listViewItems">Collection of ListViewItem objects to add.</param>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.PopulateList(System.Windows.Forms.ListView,System.Collections.ICollection,QCI.WindowsForms.ListManagement.ItemReselectMethod)">
            <summary>
            Populates a ListView control with a collection of ListViewItem objects.
            Existing item selections are preserved using the specified reselect method.
            Note: The Tag property of the ListViewItems is used as the key.
            </summary>
            <param name="listView">ListView to populate.</param>
            <param name="listViewItems">Collection of ListViewItem objects to add.</param>
            <param name="reselectMethod">Determines how item selections are kept.</param>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.AddItem(System.Windows.Forms.ComboBox,QCI.WindowsForms.ListManagement.ListItem)">
            <summary>
            Adds a ListItem object to a ComboBox control.
            </summary>
            <param name="comboBox">ComboBox to modify.</param>
            <param name="item">ListItem to add.</param>
            <returns>The zero-based index of the new item within the list.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.AddItem(System.Windows.Forms.ComboBox,QCI.WindowsForms.ListManagement.ListItem,System.Boolean)">
            <summary>
            Adds a ListItem object to a ComboBox control and selects it.
            </summary>
            <param name="comboBox">ComboBox to modify.</param>
            <param name="item">ListItem to add.</param>
            <param name="selectItem">When true, selects the added item.</param>
            <returns>The zero-based index of the new item within the list.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.AddItem(System.Windows.Forms.ListBox,QCI.WindowsForms.ListManagement.ListItem)">
            <summary>
            Adds a ListItem object to a ListBox control.
            </summary>
            <param name="listBox">ListBox to modify.</param>
            <param name="item">ListItem to add.</param>
            <returns>The zero-based index of the new item within the list.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.AddItem(System.Windows.Forms.ListBox,QCI.WindowsForms.ListManagement.ListItem,System.Boolean)">
            <summary>
            Adds a ListItem object to a ListBox control and selects it.
            </summary>
            <param name="listBox">ListBox to modify.</param>
            <param name="item">ListItem to add.</param>
            <param name="selectItem">When true, selects the added item.</param>
            <returns>The zero-based index of the new item within the list.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.AddItem(System.Windows.Forms.ListView,System.Windows.Forms.ListViewItem)">
            <summary>
            Adds a ListViewItem object to a ListView control.
            </summary>
            <param name="listView">ListView to modify.</param>
            <param name="item">ListViewItem to add.</param>
            <returns>The zero-based index of the new item within the list.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.AddItem(System.Windows.Forms.ListView,System.Windows.Forms.ListViewItem,System.Boolean)">
            <summary>
            Adds a ListViewItem object to a ListView control and selects it.
            </summary>
            <param name="listView">ListView to modify.</param>
            <param name="item">ListViewItem to add.</param>
            <param name="selectItem">When true, selects the added item.</param>
            <returns>The zero-based index of the new item within the list.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.RemoveItem(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Removes a ListItem from a ComboBox control.
            </summary>
            <param name="comboBox">ComboBox to modify.</param>
            <param name="key">Key of the item to remove.</param>
            <returns>True, if an item was removed.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.RemoveItem(System.Windows.Forms.ListBox,System.String)">
            <summary>
            Removes a ListItem from a ListBox control.
            </summary>
            <param name="listBox">ListBox to modify.</param>
            <param name="key">Key of the item to remove.</param>
            <returns>True, if an item was removed.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.RemoveItem(System.Windows.Forms.ListView,System.String)">
            <summary>
            Removes a ListViewItem from a ListView control.
            </summary>
            <param name="listView">ListView to modify.</param>
            <param name="tag">Tag value of the item to remove.</param>
            <returns>True, if an item was removed.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.SelectItem(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Selects the first ListItem in a ComboBox control having the 
            specified Key property value.
            Keys are matched using a case-sensitive comparison.
            </summary>
            <param name="comboBox">ComboBox to modify.</param>
            <param name="key">Key of the ListItem to select.</param>
            <returns>True, if an item was selected.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.SelectItem(System.Windows.Forms.ComboBox,System.String,System.Boolean)">
            <summary>
            Selects the first ListItem in a ComboBox control having the 
            specified Key property value.
            </summary>
            <param name="comboBox">ComboBox to modify.</param>
            <param name="key">Key of the ListItem to select.</param>
            <param name="ignoreCase">Specifies if matching of keys should ignore case.</param>
            <returns>True, if an item was selected.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.SelectItem(System.Windows.Forms.ListBox,System.String)">
            <summary>
            Selects the first ListItem in a ListBox control having the 
            specified Key property value.
            Keys are matched using a case-sensitive comparison.
            </summary>
            <param name="listBox">ListBox to modify.</param>
            <param name="key">Key of the ListItem to select.</param>
            <returns>True, if an item was selected.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.SelectItem(System.Windows.Forms.ListBox,System.String,System.Boolean)">
            <summary>
            Selects the first ListItem in a ListBox control having the 
            specified Key property value.
            </summary>
            <param name="listBox">ListBox to modify.</param>
            <param name="key">Key of the ListItem to select.</param>
            <param name="ignoreCase">Specifies if matching of keys should ignore case.</param>
            <returns>True, if an item was selected.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.SelectItem(System.Windows.Forms.ListView,System.String)">
            <summary>
            Selects the first ListViewItem in a ListView control having the 
            specified Key property value.
            Tags are matched using a case-sensitive comparison.
            </summary>
            <param name="listView">ListView to modify.</param>
            <param name="tag">Tag value of the ListViewItem to select.</param>
            <returns>True, if an item was selected.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.SelectItem(System.Windows.Forms.ListView,System.String,System.Boolean)">
            <summary>
            Selects the first ListViewItem in a ListView control having the 
            specified Tag property value.
            </summary>
            <param name="listView">ListView to modify.</param>
            <param name="tag">Tag value of the ListViewItem to select.</param>
            <param name="ignoreCase">Specifies if matching of tag strings should ignore case.</param>
            <returns>True, if an item was selected.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.FindItem(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Finds the first ListItem in a ComboBox control having the 
            specified Key property value.
            Keys are matched using a case-sensitive comparison.
            </summary>
            <param name="comboBox">ComboBox to search.</param>
            <param name="key">Key of the ListItem to find.</param>
            <returns>The first ListItem found; otherwise, null.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.FindItem(System.Windows.Forms.ComboBox,System.String,System.Boolean)">
            <summary>
            Finds the first ListItem in a ComboBox control having the 
            specified Key property value.
            </summary>
            <param name="comboBox">ComboBox to search.</param>
            <param name="key">Key of the ListItem to find.</param>
            <param name="ignoreCase">Specifies if matching of keys should ignore case.</param>
            <returns>The first ListItem found; otherwise, null.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.FindItem(System.Windows.Forms.ListBox,System.String)">
            <summary>
            Finds the first ListItem in a ListBox control having the 
            specified Key property value.
            Keys are matched using a case-sensitive comparison.
            </summary>
            <param name="listBox">ListBox to search.</param>
            <param name="key">Key of the ListItem to find.</param>
            <returns>The first ListItem found; otherwise, null.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.FindItem(System.Windows.Forms.ListBox,System.String,System.Boolean)">
            <summary>
            Finds the first ListItem in a ListBox control having the 
            specified Key property value.
            </summary>
            <param name="listBox">ListBox to search.</param>
            <param name="key">Key of the ListItem to find.</param>
            <param name="ignoreCase">Specifies if matching of keys should ignore case.</param>
            <returns>The first ListItem found; otherwise, null.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.FindItem(System.Windows.Forms.ListView,System.String)">
            <summary>
            Finds the first ListViewItem in a ListView control having the 
            specified Tag property value.
            Tags are matched using a case-sensitive comparison.
            </summary>
            <param name="listView">ListView to search.</param>
            <param name="tag">Tag value of the ListViewItem to find.</param>
            <returns>The first ListViewItem found; otherwise, null.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.FindItem(System.Windows.Forms.ListView,System.String,System.Boolean)">
            <summary>
            Finds the first ListViewItem in a ListView control having the 
            specified Tag property value.
            </summary>
            <param name="listView">ListView to search.</param>
            <param name="tag">Tag value of the ListViewItem to find.</param>
            <param name="ignoreCase">Specifies if matching of keys should ignore case.</param>
            <returns>The first ListViewItem found; otherwise, null.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.SelectedItem(System.Windows.Forms.ComboBox)">
            <summary>
            Gets the currently selected ListItem object in a ComboBox control.
            </summary>
            <param name="comboBox">ComboBox to evaluate.</param>
            <returns>The currently selected item; null if no item is selected.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.SelectedItem(System.Windows.Forms.ListBox)">
            <summary>
            Gets the currently selected ListItem object in a ListBox control.
            </summary>
            <param name="listBox">ListBox to evaluate.</param>
            <returns>The currently selected item; null if no item is selected.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.SelectedItem(System.Windows.Forms.ListView)">
            <summary>
            Gets the first selected ListViewItem object in a ListView control.
            </summary>
            <param name="listView">ListView to evaluate.</param>
            <returns>The currently selected item; null if no item is selected.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.GenerateListItems(System.Data.DataTable,System.String)">
            <summary>
            Creates a ListItemCollection filled with ListItem objects generated from the
            data found in a DataTable. One ListItem object is generated for each record 
            in the DataTable.
            </summary>
            <param name="dt">Table used to populate the ListItems.</param>
            <param name="textField">Field in the DataTable used to populate the Text property of each ListItem object.</param>
            <returns>A ListItemCollection object filled with ListItem objects.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.GenerateListItems(System.Data.DataTable,System.String,System.String)">
            <summary>
            Creates a ListItemCollection filled with ListItem objects generated from the
            data found in a DataTable. One ListItem object is generated for each record 
            in the DataTable.
            </summary>
            <param name="dt">Table used to populate the ListItems.</param>
            <param name="textField">Field in the DataTable used to populate the Text property of each ListItem object.</param>
            <param name="keyField">Field in the DataTable used to populate the Key property of each ListItem object.</param>
            <returns>A ListItemCollection object filled with ListItem objects.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.GenerateListItems(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Creates a ListItemCollection filled with ListItem objects generated from the
            data found in a DataTable. One ListItem object is generated for each record 
            in the DataTable.
            </summary>
            <param name="dt">Table used to populate the ListItems.</param>
            <param name="textField">Field in the DataTable used to populate the Text property of each ListItem object.</param>
            <param name="keyField">Field in the DataTable used to populate the Key property of each ListItem object.</param>
            <param name="tagField">Field in the DataTable used to populate the Tag property of each ListItem object.  Use 'null' to specify no Tag property.</param>
            <returns>A ListItemCollection object filled with ListItem objects.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.CreateListViewItem(System.String[],System.String)">
            <summary>
            Creates a new ListViewItem with the given Items and Tag value.
            Constructor wrapper to allow specifying the Tag property during creation.
            </summary>
            <param name="items">An array of items that represent the subitems of the item.</param>
            <param name="tag">Tag value for this item.</param>
            <returns>A new ListViewItem object.</returns>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListHelper.CreateListViewItem(System.String,System.String[])">
            <summary>
            Creates a new ListViewItem with the given Items and Tag value.
            Constructor wrapper to allow specifying the Tag property during creation.
            </summary>
            <param name="tag">Tag value for this item.</param>
            <param name="items">An array of items that represent the subitems of the item.</param>
            <returns>A new ListViewItem object.</returns>
        </member>
        <member name="T:QCI.WindowsForms.ListManagement.ListItem">
            <summary>
            Stores value-key pairs for use with WinForm List and Combo boxes.
            Designed to be used with the ListHelper methods to allow standardized
            referencing of items by key.
            </summary>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ListItem class.
            The given Text value is used for the Key value.
            </summary>
            <param name="text">Value of the Text and Key properties.</param>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ListItem class.
            </summary>
            <param name="text">Value of the Text property.</param>
            <param name="key">Value of the Key property.</param>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListItem.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the ListItem class.
            </summary>
            <param name="text">Value of the Text property.</param>
            <param name="key">Value of the Key property.</param>
            <param name="tag">An object to associate with this instance.</param>
        </member>
        <member name="P:QCI.WindowsForms.ListManagement.ListItem.Text">
            <summary>
            Gets the Text value of this instance.
            </summary>
        </member>
        <member name="P:QCI.WindowsForms.ListManagement.ListItem.Key">
            <summary>
            Gets the Key value of this instance.
            </summary>
        </member>
        <member name="P:QCI.WindowsForms.ListManagement.ListItem.Tag">
            <summary>
            Gets or sets an object that contains data to associate with the item.
            </summary>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListItem.ToString">
            <summary>
            Returns the Text value of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:QCI.WindowsForms.ListManagement.ListItemCollection">
            <summary>
            Defines a collection that stores ListItem objects.
            </summary>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListItemCollection.#ctor">
            <summary>
            Initializes a new instance of the this class.
            </summary>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListItemCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of this class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> is less than 0.</exception>
        </member>
        <member name="M:QCI.WindowsForms.ListManagement.ListItemCollection.#ctor(System.Collections.Generic.IEnumerable{QCI.WindowsForms.ListManagement.ListItem})">
            <summary>
            Initializes a new instance of this class and copes elements from the specified collection.
            </summary>
            <param name="items">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:QCI.WindowsServices.IServiceModule">
            <summary>
            Provides functionality for service modules that can be hosted and managed by the ServiceManager class.
            </summary>
        </member>
        <member name="M:QCI.WindowsServices.IServiceModule.Start">
            <summary>
            Specifies actions to take when the service host starts the service.
            </summary>
        </member>
        <member name="M:QCI.WindowsServices.IServiceModule.Stop">
            <summary>
            Specifies actions to take when the service host needs to stop (and likely dispose) the service.
            </summary>
        </member>
        <member name="T:QCI.WindowsServices.ServiceManager">
            <summary>
            Represents the master controller for multiple service modules.
            All exceptions caught by this manager are published using the <see cref="T:QCI.ExceptionManager"/>.
            </summary>
        </member>
        <member name="M:QCI.WindowsServices.ServiceManager.#ctor(System.Diagnostics.EventLog)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="eventLog">Configured event log to use when logging service module start/stop events.</param>
        </member>
        <member name="M:QCI.WindowsServices.ServiceManager.Dispose">
            <summary>
            Releases all resources used by this ServiceManager object and disposes all service modules.
            </summary>
        </member>
        <member name="M:QCI.WindowsServices.ServiceManager.StartServices">
            <summary>
            Creates new instance of each configured service module and calls the Start method of the service.
            Each service module is loading in an isolated AppDomain.
            </summary>
        </member>
        <member name="M:QCI.WindowsServices.ServiceManager.StopServices">
            <summary>
            Stops and disposes all service modules.
            </summary>
        </member>
        <member name="T:QCI.WindowsServices.ServiceManagerSectionHandler">
            <summary>
            The configuration section handler for the "services" section of a config file.
            </summary>
        </member>
        <member name="M:QCI.WindowsServices.ServiceManagerSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Builds an IList object filled with ServiceModuleConfiguration objects based the configuration file.
            </summary>
            <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
            <param name="configContext">Provides access to the virtual path for which the configuration section handler computes configuration values. Normally this parameter is reserved and is null.</param>
            <param name="section">The XMLNode that contains the configuration information to be handled. Section provides direct access to the XML contents of the configuration section.</param>
            <returns>IList filled with ServiceModuleConfiguration objects, built from the configuration settings.</returns>
        </member>
        <member name="T:QCI.WindowsServices.ServiceModuleBase">
            <summary>
            Provides a base class for a service module that implements the necessary interfaces to be hosted 
            correctly by the ServiceManager in an remote AppDomain.
            </summary>
        </member>
        <member name="M:QCI.WindowsServices.ServiceModuleBase.Start">
            <summary>
            Specifies the actions to take to start the service.
            </summary>
        </member>
        <member name="M:QCI.WindowsServices.ServiceModuleBase.Stop">
            <summary>
            Specifies the actions to take to stop the service.
            </summary>
        </member>
        <member name="M:QCI.WindowsServices.ServiceModuleBase.Dispose">
            <summary>
            Provides a default (empty) implementation of the Dispose method, to be overridden by a derived class as needed.
            </summary>
        </member>
        <member name="M:QCI.WindowsServices.ServiceModuleBase.InitializeLifetimeService">
            <summary>
            Overridden to make lease time. TODO:
            </summary>
            <returns></returns>
        </member>
        <member name="T:QCI.WindowsServices.ServiceModuleConfiguration">
            <summary>
            Defines the setup information found in a config file for service modules.
            </summary>
        </member>
        <member name="P:QCI.WindowsServices.ServiceModuleConfiguration.Name">
            <summary>
            Gets or sets the name assigned to this service module.
            </summary>
        </member>
        <member name="P:QCI.WindowsServices.ServiceModuleConfiguration.AssemblyPath">
            <summary>
            Gets the fully-qualified path to the service assembly.
            </summary>
        </member>
        <member name="P:QCI.WindowsServices.ServiceModuleConfiguration.AssemblyFile">
            <summary>
            Gets or sets the fully-qualified path to the assembly file to be loaded.
            </summary>
        </member>
        <member name="P:QCI.WindowsServices.ServiceModuleConfiguration.AssemblyConfigFile">
            <summary>
            Gets or sets the fully-qualified path to the assembly's configuration file.
            </summary>
        </member>
        <member name="P:QCI.WindowsServices.ServiceModuleConfiguration.TypeName">
            <summary>
            Gets or sets the fully qualified type name of the service component to be invoked.
            </summary>
        </member>
        <member name="T:QCI.Threading.BlockingQueue">
            <summary>
            Extends <see cref="T:System.Collections.Queue"/> to provide blocking on the Dequeue method (with or without a timeout).
            </summary>
        </member>
        <member name="F:QCI.Threading.BlockingQueue._waitForData">
            <summary>
            The AutoResetEvent used to signal blocked readers that a writer has added an element to the queue.
            </summary>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.System#IDisposable#Dispose">
            <summary>
            Disposes resources used by this instance.
            </summary>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.Enqueue(System.Object)">
            <summary>
            Adds an object to the end of the queue and notifies blocked readers that new data has arrived.
            </summary>
            <param name="value">The object value to add to the Queue. The value cannot be a null reference.</param>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            If the queue is empty, blocks until an object is added.
            </summary>
            <returns>The object that is removed from the beginning of the queue.</returns>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.Dequeue(System.Int32)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            If the queue is empty, blocks until an object is added, or until the timeout period is reached.
            </summary>
            <param name="millisecondsTimeout">Number of milliseconds to wait for a new item to be added in the queue.  Use 'Timeout.Infinite' to wait forever.</param>
            <returns>The object that is removed from the beginning of the queue, or null if the timeout was reached.</returns>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.TryDequeue(System.Object@)">
            <summary>
            Non-blocking version of Dequeue. Returns false if queue is empty, otherwise will return true and set the output value to the dequeued object.
            </summary>
            <param name="value">The object removed from the beginning of the queue, or null if queue is empty.</param>
            <returns>true if successfull; otherwise, false.</returns>
        </member>
        <member name="P:QCI.Threading.BlockingQueue.Count">
            <summary>
            Gets the number of elements contained in the Queue.
            </summary>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.Clear">
            <summary>
            Removes all objects from the Queue.
            </summary>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.Contains(System.Object)">
            <summary>
            Determines whether an element is in the Queue.
            </summary>
            <param name="value">The object value to locate in the Queue.</param>
            <returns>True if obj is found in the Queue; otherwise, false.</returns>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the Queue elements to an existing one-dimensional Array, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from Queue. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.GetEnumerator">
            <summary>
            This methid is not implemented. 
            It is not possible to enumerate an active queue an a thread-safe way.
            Use the ToArray() method and enumerate the returned array of values.
            </summary>
            <returns>An IEnumerator for the Queue.</returns>
        </member>
        <member name="P:QCI.Threading.BlockingQueue.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the Queue is synchronized (thread-safe).
            </summary>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.Peek">
            <summary>
            Returns the object at the beginning of the Queue without removing it.
            </summary>
            <returns>The object at the beginning of the Queue.</returns>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.ToArray">
            <summary>
            Copies the Queue elements to a new array.
            </summary>
            <returns>A new array containing elements copied from the Queue.</returns>
        </member>
        <member name="M:QCI.Threading.BlockingQueue.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements currently in the queue.
            </summary>
        </member>
        <member name="T:QCI.Threading.ISerialWorkItem">
            <summary>
            Defines the required interface for all work items to be placed in a 
            SerialProcessingQueue, which are then processed serially.
            </summary>
        </member>
        <member name="M:QCI.Threading.ISerialWorkItem.Execute">
            <summary>
            When implemented by a class, executes the work defined by the object.
            </summary>
        </member>
        <member name="T:QCI.Threading.SerialProcessingQueue">
            <summary>
            Represents a queue of ISerialWorkItem objects or Action delegates that are processed (executed) serially 
            using a single consumer thread.
            </summary>
        </member>
        <member name="M:QCI.Threading.SerialProcessingQueue.#ctor">
            <summary>
            Creates a new instance of this class with a processing thread that never exits.
            </summary>
        </member>
        <member name="M:QCI.Threading.SerialProcessingQueue.#ctor(System.Int32)">
            <summary>
            Creates a new instance of this class with a processing thread that exits after a given period of inactivity.
            </summary>
            <param name="maxThreadIdleTimeBeforeExit">Number of milliseconds the processing thread waits for a new item to be queued before it exits.</param>
        </member>
        <member name="M:QCI.Threading.SerialProcessingQueue.AddWorkItem(QCI.Threading.ISerialWorkItem)">
            <summary>
            Adds a work item to the end of the queue.
            The Execute method of the ISerialWorkItem will be called after all previous items have been processed.
            NOTE: Any exception raised by the action will be thrown away.
            </summary>
            <param name="workItem">The item to be added to the end of the queue.</param>
        </member>
        <member name="M:QCI.Threading.SerialProcessingQueue.Enqueue(System.Action)">
            <summary>
            Adds an action to the end of the queue.
            The action will be invoked after all actions have been processed.
            NOTE: Any exception raised by the action will be thrown away.
            </summary>
            <param name="action">The item to be added to the end of the queue.</param>
        </member>
        <member name="M:QCI.Threading.SerialProcessingQueue.Enqueue(QCI.Threading.ISerialWorkItem)">
            <summary>
            Adds a work item to the end of the queue.
            The Execute method of the ISerialWorkItem will be called after all previous items have been processed.
            NOTE: Any exception raised by the action will be thrown away.
            </summary>
            <param name="workItem">The item to be added to the end of the queue.</param>
        </member>
        <member name="M:QCI.Threading.SerialProcessingQueue.System#IDisposable#Dispose">
            <summary>
            Disposes resources used by this instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EncryptWebConfigHelper.EncryptConfigHelper.EncryptConnectionStringsAndAppSettings(System.Configuration.Configuration)" -->
        <member name="M:EncryptWebConfigHelper.EncryptConfigHelper.EncryptConnectionStrings(System.Configuration.Configuration)">
            <summary>
            Encrypts the <ConnectionStrings></ConnectionStrings> section of an App.config
            </summary>
            <param name="config">The configuration to encrypt</param>
        </member>
        <member name="M:EncryptWebConfigHelper.EncryptConfigHelper.EncryptAppSettings(System.Configuration.Configuration)">
            <summary>
            Encrypts the <AppSettings></AppSettings> section of an App.config
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:System.DateTimeExtensions">
            <summary>
            Extension methods for the <see cref="T:System.DateTime"/> class.
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.AgeInYears(System.DateTime)">
            <summary>
            Calculates the age in whole years between this date and the current system date. No rounding is done.
            </summary>
            <param name="birthDate">Start date from which counting begins.</param>
            <returns>The difference in whole years between the two dates.</returns>
        </member>
        <member name="M:System.DateTimeExtensions.AgeInYears(System.DateTime,System.DateTime)">
            <summary>
            Calculates the age in whole years between this date and a specified reference date. No rounding is done.
            </summary>
            <param name="birthDate">Start date from which counting begins.</param>
            <param name="asOfDate">Reference date used to determine the age as of this date.</param>
            <returns>The difference in whole years between the two dates.</returns>
        </member>
        <member name="T:System.Data.Common.DbDataReaderExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Data.Common.DbDataReader"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Common.DbDataReaderExtensions.GetValue``1(System.Data.Common.DbDataReader,System.Int32)">
            <summary>
            QCI Extension:
            Returns the value of a given column in the <see cref="T:DbDataReader"/>.
            </summary>
            <typeparam name="T">Type of the return value.</typeparam>
            <param name="reader">The <see cref="T:DbDataReader"/> to use.</param>
            <param name="index">The ordinal index of the column to retreive from the <see cref="T:DbDataReader"/>.</param>
            <returns>Value found at the specified index; or the default value for the return type if null.</returns>
        </member>
        <member name="M:System.Data.Common.DbDataReaderExtensions.GetValue``1(System.Data.Common.DbDataReader,System.String)">
            <summary>
            QCI Extension:
            Returns the value of a given column in the <see cref="T:DbDataReader"/>.
            </summary>
            <typeparam name="T">Type of the return value.</typeparam>
            <param name="reader">The <see cref="T:DbDataReader"/> to use.</param>
            <param name="columnName">The name of the column to retreive from the <see cref="T:DbDataReader"/>.</param>
            <returns>Value found at the specified index; or the default value for the return type if null.</returns>
        </member>
        <member name="M:System.Data.Common.DbDataReaderExtensions.GetValueOrDefault``1(System.Data.Common.DbDataReader,System.Int32,``0)">
            <summary>
            QCI Extension:
            Returns the value of a given column in the <see cref="T:DbDataReader"/>,
            or a specified default value if the column is null.
            </summary>
            <typeparam name="T">Type of the return value.</typeparam>
            <param name="reader">The <see cref="T:DbDataReader"/> to use.</param>
            <param name="index">The ordinal index of the column to retreive from the <see cref="T:DbDataReader"/>.</param>
            <param name="defaultValue">Value to return if the column is null.</param>
            <returns>Value found at the specified index; or the default value for the return type if null.</returns>
        </member>
        <member name="M:System.Data.Common.DbDataReaderExtensions.GetValueOrDefault``1(System.Data.Common.DbDataReader,System.String,``0)">
            <summary>
            QCI Extension:
            Returns the value of a given column in the <see cref="T:DbDataReader"/>,
            or a specified default value if the column is null.
            </summary>
            <typeparam name="T">Type of the return value.</typeparam>
            <param name="reader">The <see cref="T:DbDataReader"/> to use.</param>
            <param name="columnName">The name of the column to retreive from the <see cref="T:DbDataReader"/>.</param>
            <param name="defaultValue">Value to return if the column is null.</param>
            <returns>Value found at the specified index; or the default value for the return type if null.</returns>
        </member>
        <member name="T:System.Web.UI.WebControls.ListControlExtensions">
            <summary>
            Extension methods for controls based on <see cref="T:ListControl"/>, like ListControl, and RadioButtonList.
            </summary>
        </member>
        <member name="M:System.Web.UI.WebControls.ListControlExtensions.DataBind(System.Web.UI.WebControls.ListControl,System.Data.DataSet,System.String,System.String)">
            <summary>
            QCI Extension:
            Populates this control with items from the specified DataSet.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="ds">DataSet that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textField">Name of the field that provides the text of each list item.</param>
        </member>
        <member name="M:System.Web.UI.WebControls.ListControlExtensions.DataBind(System.Web.UI.WebControls.ListControl,System.Data.DataTable,System.String,System.String)">
            <summary>
            QCI Extension:
            Populates this control with items from the specified DataTable.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="dt">DataTable that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textField">Name of the field that provides the text of each list item.</param>
        </member>
        <member name="M:System.Web.UI.WebControls.ListControlExtensions.DataBind(System.Web.UI.WebControls.ListControl,System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            QCI Extension:
            Populates this control with items from the specified data source.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="dataSource">Data source that provides data for populating the control.</param>
            <param name="valueExpression">Expression that provides the value of each list item.</param>
            <param name="textExpression">Expression that provide the text caption value for the list item.</param>
        </member>
        <member name="M:System.Web.UI.WebControls.ListControlExtensions.DataBind(System.Web.UI.WebControls.ListControl,System.ComponentModel.IListSource,System.String,System.String)">
            <summary>
            QCI Extension:
            Populates this control with items from the specified data source.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="dataSource">Data source that provides data for populating the control.</param>
            <param name="valueExpression">Expression that provides the value of each list item.</param>
            <param name="textExpression">Expression that provide the text caption value for the list item.</param>
        </member>
        <member name="M:System.Web.UI.WebControls.ListControlExtensions.DataBind(System.Web.UI.WebControls.ListControl,System.Data.DataSet,System.String,System.String,System.String[])">
            <summary>
            QCI Extension:
            Populates this control with items from the specified DataTable, formatted using the 
            specified text format and text fields.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="ds">DataSet that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textFormat">Formatting string used to control how items are displayed.</param>
            <param name="textFields">Field names that provide text caption values for the list item.</param>
        </member>
        <member name="M:System.Web.UI.WebControls.ListControlExtensions.DataBind(System.Web.UI.WebControls.ListControl,System.Data.DataTable,System.String,System.String,System.String[])">
            <summary>
            QCI Extension:
            Populates this control with items from the specified DataTable, formatted using the 
            specified text format and text fields.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="dt">DataTable that provides data for populating the control.</param>
            <param name="valueField">Name of the field that provides the value of each list item.</param>
            <param name="textFormat">Formatting string used to control how items are displayed.</param>
            <param name="textFields">Field names that provide text caption values for the list item.</param>
        </member>
        <member name="M:System.Web.UI.WebControls.ListControlExtensions.DataBind(System.Web.UI.WebControls.ListControl,System.Collections.IEnumerable,System.String,System.String,System.String[])">
            <summary>
            QCI Extension:
            Populates this control with items from the specified data source, formatted using the 
            specified text format and text fields.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="dataSource">Data source that provides data for populating the control.</param>
            <param name="valueExpression">Expression that provides the value of each list item.</param>
            <param name="textFormat">Formatting string used to control how items are displayed.</param>
            <param name="textExpressions">Expressions that provide text caption values for the list item.</param>
        </member>
        <member name="M:System.Web.UI.WebControls.ListControlExtensions.DataBind(System.Web.UI.WebControls.ListControl,System.ComponentModel.IListSource,System.String,System.String,System.String[])">
            <summary>
            QCI Extension:
            Populates this control with items from the specified data source, formatted using the 
            specified text format and text fields.
            </summary>
            <param name="control">List control to be data bound.</param>
            <param name="dataSource">Data source that provides data for populating the control.</param>
            <param name="valueExpression">Expression that provides the value of each list item.</param>
            <param name="textFormat">Formatting string used to control how items are displayed.</param>
            <param name="textExpressions">Expressions that provide text caption values for the list item.</param>
        </member>
        <member name="M:System.Web.UI.WebControls.ListControlExtensions.TrySelectItem(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>
            QCI Extension:
            Attempts to select the item with the specified value.
            If no item is found, the current selection is not modified.
            </summary>
            <param name="control">List control to be modified.</param>
            <param name="itemValue">Value of the item to be selected.</param>
            <returns>True if the item was found and selected; otherwise false.</returns>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.Publish(System.Exception)">
            <summary>
            QCI Extension:
            Publishes this exception using the configured publishers.
            </summary>
            <param name="exception">Exception to be published.</param>
        </member>
        <member name="M:System.ExceptionExtensions.Publish(System.Exception,System.String)">
            <summary>
            QCI Extension:
            Publishes this exception using the configured publishers.
            </summary>
            <param name="exception">Exception to be published.</param>
            <param name="additionalMessage">Additional message that should be published with the exception.</param>
        </member>
        <member name="M:System.ExceptionExtensions.Publish(System.Exception,System.Object)">
            <summary>
            QCI Extension:
            Publishes this exception using the configured publishers.
            </summary>
            <param name="exception">Exception to be published.</param>
            <param name="additionalInfo">Additional data that should be published with the exception.</param>
        </member>
        <member name="T:System.ExcryptionExtensions">
            <summary>
            Extension methods providing access to <see cref="T:DpapiSecurity"/> class.
            </summary>
            <remarks>
            TODO: 2/9/2008: Made this class internal to reserve string.Encrypt() and string.Decrypt() for use 
            with a app specific key... which I still don't know where it should be.  In the config? Really?!?
            </remarks>
        </member>
        <member name="T:System.GZipExtensions">
            <summary>
            Extension methods providing easy access to method in the <see cref="T:GZip"/> class.
            </summary>
        </member>
        <member name="M:System.GZipExtensions.Compress(System.Byte[])">
            <summary>
            QCI Extension:
            Compresses this byte array using the GZip algorithm.
            </summary>
            <param name="data">Data to be compressed.</param>
            <returns>Compressed copy of the passed data.</returns>
        </member>
        <member name="M:System.GZipExtensions.Decompress(System.Byte[])">
            <summary>
            QCI Extension:
            Decompresses this byte array using the GZip algorithm.
            </summary>
            <param name="data">Compressed data to be decompressed.</param>
            <returns>Decompressed copy of the passed data.</returns>
        </member>
        <member name="M:System.GZipExtensions.Decompress(System.Byte[],System.Int32)">
            <summary>
            QCI Extension:
            Decompresses this byte array using the GZip algorithm.
            </summary>
            <param name="data">Compressed data to be decompressed.</param>
            <param name="chunkSize">The number of bytes of data to decompressed at a time.</param>
            <returns>Decompressed copy of the passed data.</returns>
        </member>
        <member name="M:System.GZipExtensions.Compress(System.IO.FileSystemInfo,System.String)">
            <summary>
            QCI Extension:
            Compresses this file using the GZip algorithm and saves the results as a new file.
            </summary>
            <param name="file">File to compress.</param>
            <param name="destFile">Destination path for the compressed file.</param>
        </member>
        <member name="M:System.GZipExtensions.Decompress(System.IO.FileSystemInfo,System.String)">
            <summary>
            QCI Extension:
            Decompresses this file using the GZip algorithm and saves the results as new file.
            </summary>
            <param name="file">File to decompress.</param>
            <param name="destFile">Destination path for the decompressed file.</param>
        </member>
        <member name="T:System.CollectionExtensions">
            <summary>
            Extension methods for collection classes.
            </summary>
        </member>
        <member name="M:System.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            QCI Extension:
            Adds the elements from a specified source to the end of an <see cref="T:Collection{}"/>.
            </summary>
            <typeparam name="T">Type of elements in the <see cref="T:ICollection{}"/>.</typeparam>
            <param name="source">The <see cref="T:ICollection{}"/> instance being modified.</param>
            <param name="col">Enumerable source whose elements should added to the end of the list.</param>
        </member>
        <member name="M:System.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            QCI Extension:
            Performs the specified action on each element of an <see cref="T:IEnumerable{T}"/> sequence.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:IEnumerable{T}"/> that contains the elements to apply the action against.</param>
            <param name="action">The <see cref="T:System.Action{T}"/> delegate to perform on each element of the <see cref="T:IEnumerable{T}"/>.</param>
            <exception cref="T:ArgumentNullException"><paramref name="source"/> is null. -or- <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:System.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])">
            <summary>
            QCI Extension:
            Performs multiple actions on each element of an <see cref="T:IEnumerable{T}"/> sequence.
            All actions are preformed in sequence on an element before the next element is processed.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:IEnumerable{T}"/> that contains the elements to apply the action against.</param>
            <param name="actions">The <see cref="T:System.Action{T}"/> delegates to perform on each element of the <see cref="T:IEnumerable{T}"/>.</param>
            <exception cref="T:ArgumentNullException"><paramref name="source"/> is null. -or- <paramref name="actions"/> is null.</exception>
        </member>
        <member name="M:System.CollectionExtensions.ToPairs(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts this <see cref="T:System.Collections.Specialized.NameValueCollection"/> into a enumerable collection of <see cref="T:KeyValuePair"/> objects.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance to use.</param>
            <returns>An <see cref="T:IEnumerable"/> instance containing each element of the source sequence converted to <see cref="T:KeyValuePair"/> objects.</returns>
        </member>
        <member name="T:System.MailMessageExtensions">
            <summary>
            Extension methods for the <see cref="T:MailMessage"/> class.
            </summary>
        </member>
        <member name="M:System.MailMessageExtensions.Send(System.Net.Mail.MailMessage)">
            <summary>
            QCI Extension:
            Sends this message using <see cref="T:QCI.Net.Mail.Emailer"/> with a default instance of <see cref="T:SmtpClient"/>.
            </summary>
            <param name="message">Email message to be sent.</param>
            <exception cref="T:QCI.Net.Mail.SmtpSendException">The message could not be delivered.</exception>
        </member>
        <member name="M:System.MailMessageExtensions.Send(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient)">
            <summary>
            Sends this message using <see cref="T:QCI.Net.Mail.Emailer"/> with a specified instance of <see cref="T:SmtpClient"/>.
            </summary>
            <param name="message">Email message to be sent.</param>
            <param name="smtpClient">Instance of <see cref="T:SmtpClient"/> to use to send the message.</param>
            <exception cref="T:QCI.Net.Mail.SmtpSendException">The message could not be delivered.</exception>
        </member>
        <member name="M:System.MailMessageExtensions.SendAsync(System.Net.Mail.MailMessage)">
            <summary>
            QCI Extension:
            Sends this message asynchronously using <see cref="T:QCI.Net.Mail.Emailer"/> with a default instance of <see cref="T:SmtpClient"/>.
            This method does not require ASP.NET pages to have the Async page attribute set.
            No exceptions will be raised to the caller. All exceptions will be published using 
            the <see cref="T:QCI.Framework.ExceptionManager"/>.
            </summary>
            <param name="message">Email message to be sent.</param>
        </member>
        <member name="M:System.MailMessageExtensions.SendAsync(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient)">
            <summary>
            QCI Extension:
            Sends this message asynchronously using <see cref="T:QCI.Net.Mail.Emailer"/> with a specified instance of <see cref="T:SmtpClient"/>.
            This method does not require ASP.NET pages to have the Async page attribute set.
            No exceptions will be raised to the caller. All exceptions will be published using 
            the <see cref="T:QCI.Framework.ExceptionManager"/>.
            </summary>
            <param name="message">Email message to be sent.</param>
            <param name="smtpClient">Instance of <see cref="T:SmtpClient"/> to use to send the message.</param>
        </member>
        <member name="T:System.RandomExtensions">
            <summary>
            Extension methods associated to the <see cref="T:System.Random"/> class.    
            </summary>
        </member>
        <member name="M:System.RandomExtensions.NextInRange(System.Random,System.Int32,System.Int32)">
            <summary>
            QCI Extension:
            Returns a random number within a specified range, including both minValue and maxValue.
            This extension method modifies the behavior of the System.Random.Next(int minValue, int maxValue) to include
            maxValue in the range of values returned.
            </summary>
            <param name="random">Instance of <see cref="T:System.Random"/> to use.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The inclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue. </param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than or equal to maxValue. If minValue equals maxValue, minValue is always returned.</returns>
        </member>
        <member name="T:System.IO.StreamExtensions">
            <summary>
            Extension methods for the <see cref="T:QCI.IO.StreamUtil"/> class.
            </summary>
        </member>
        <member name="M:System.IO.StreamExtensions.WriteAllToStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            QCI Extension:
            Reads all the bytes from this stream and writes them to an output stream using a 1024-byte buffer.
            </summary>
            <param name="input">Input stream to be read.</param>
            <param name="output">Output stream to be written to.</param>
        </member>
        <member name="M:System.IO.StreamExtensions.WriteAllToStream(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            QCI Extension:
            Reads all the bytes from this stream and writes them to an output stream.
            </summary>
            <param name="input">Input stream to be read.</param>
            <param name="output">Output stream to be written to.</param>
            <param name="chunkSize">Number of bytes to copy at a time (i.e., the buffer size).</param>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Extension methods for the <see cref="T:String"/> class.
            </summary>
        </member>
        <member name="M:System.StringExtensions.HasValue(System.String)">
            <summary>
            QCI Extension:
            Indicates whether this instance contains one or more characters (i.e., this instance is not null and not String.Empty).
            </summary>
            <param name="str">String object to evaluate.</param>
            <returns>True if the string contains one or more characters; otherwise false.</returns>
        </member>
        <member name="M:System.StringExtensions.IsNull(System.String)">
            <summary>
            QCI Extension:
            Indicates whether this instance is null.
            </summary>
            <param name="str">String object to evaluate.</param>
            <returns>True if the string is null; otherwise false.</returns>
        </member>
        <member name="M:System.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            QCI Extension:
            Indicates whether this instance is null or String.Empty.
            </summary>
            <param name="str">String object to evaluate.</param>
            <returns>True if the string is null or empty; otherwise false.</returns>
        </member>
        <member name="M:System.StringExtensions.IsNullOrEmptyOrWhitespace(System.String)">
            <summary>
            QCI Extension:
            Determines whether this string is null, has zero length, or contains only whitespace characters.
            </summary>
            <param name="str">String to evaluate.</param>
            <returns>True if the string is null, empty, or contains only white space; otherwise, false.</returns>
        </member>
        <member name="M:System.StringExtensions.EqualsAny(System.String,System.String[])">
            <summary>
            QCI Extension:
            Determines whether this instance has the same value as any other <see cref="T:System.String" /> instance in the specified array.
            </summary>
            <param name="str">The <see cref="T:System.String" /> value to be tested.</param>
            <param name="values">An array of <see cref="T:System.String" /> values to be checked.</param>
            <returns>True if the <paramref name="values" /> array contains a value that is the same as this instance; otherwise, false.</returns>
            <exception cref="T:System.NullReferenceException">This instance is null.</exception>
        </member>
        <member name="M:System.StringExtensions.EqualsAny(System.String,System.String[],System.StringComparison)">
            <summary>
            QCI Extension:
            Determines whether this instance has the same value as any other <see cref="T:System.String" /> instance in the specified array.
            A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="str">The <see cref="T:System.String" /> value to be tested.</param>
            <param name="values">An array of <see cref="T:System.String" /> values to be checked.</param>
            <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values.</param>
            <returns>True if the <paramref name="values" /> array contains a value that is the same as this instance; otherwise, false.</returns>
            <exception cref="T:System.NullReferenceException">This instance is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
        </member>
        <member name="M:System.StringExtensions.RemoveAny(System.String,System.Char[])">
            <summary>
            QCI Extension:
            Removes every occurrence in this instance of any character in a specified array of characters.
            </summary>
            <param name="str">String to be modified.</param>
            <param name="charsToRemove">Characters to be removed from the string.</param>
            <returns>Original string value, less the characters specified.</returns>
        </member>
        <member name="M:System.StringExtensions.ToByteArray(System.String)">
            <summary>
            QCI Extension:
            Converts this string to an array of bytes using UTF8 encoding.
            </summary>
            <param name="str">String to be converted.</param>
            <returns>Byte array containing the converted string.</returns>
        </member>
        <member name="M:System.StringExtensions.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            QCI Extension:
            Converts this string to an array of bytes using a specified encoding.
            </summary>
            <param name="str">String to be converted.</param>
            <param name="encoding">Encoding to use when converting.</param>
            <returns>Byte array containing the converted string.</returns>
        </member>
        <member name="M:System.StringExtensions.TrimSafely(System.String)">
            <summary>
            QCI Extension:
            Removes all leading and trailing white-space characters from this string, while safely handling null.
            If null is passed, null is returned.
            </summary>
            <param name="str">String value to be processed.</param>
            <returns>The string that remains after all white-space characters are removed from the start and end of this string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>startIndex</c> or <c>length</c> is less than zero.</exception>
        </member>
        <member name="M:System.StringExtensions.SubstringAtMost(System.String,System.Int32,System.Int32)">
            <summary>
            QCI Extension:
            Returns as much of the specified substring as possible without reading outside the bounds of the of the string.
            If <c>startIndex</c> is past the end of the string, <c>String.Empty</c> is returned.
            If <c>startIndex</c> plus <c>length</c> is not within the string, the substring from the <c>startIndex</c> to the end of the string is returned.
            </summary>
            <param name="str">String value to be processed.</param>
            <param name="startIndex">Index of the start of the substring.</param>
            <param name="length">Maximum number of characters in the substring.</param>
            <returns>As much of the specified substring as possible without reading past the end of the string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>startIndex</c> or <c>length</c> is less than zero.</exception>
        </member>
        <member name="M:System.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            QCI Extension:
            Returns a right-most substring from this instance having the specified length.
            </summary>
            <param name="str">String value to be processed.</param>
            <param name="length">Number of characters in the substring.</param>
            <returns>The right-most substring containing <c>length</c> characters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>length</c> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:System.StringExtensions.RightAtMost(System.String,System.Int32)">
            <summary>
            QCI Extension:
            Returns as much of the right-most substring as possible, up to <c>length</c> characters.
            If <c>length</c> is greater than the length of this instance, this instance is returned.
            </summary>
            <param name="str">String value to be processed.</param>
            <param name="length">Maximum number of characters in the substring.</param>
            <returns>As much of the right-most substring as possible, up to <c>length</c> characters.</returns>
        </member>
        <member name="M:System.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            QCI Extension:
            Returns a left-most substring from this instance having the specified length.
            </summary>
            <param name="str">String value to be processed.</param>
            <param name="length">Number of characters in the substring.</param>
            <returns>The left-most substring containing <c>length</c> characters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>length</c> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:System.StringExtensions.LeftAtMost(System.String,System.Int32)">
            <summary>
            QCI Extension:
            Returns as much of the left-most substring as possible, up to <c>length</c> characters.
            If <c>length</c> is greater than the length of this instance, this instance is returned.
            </summary>
            <param name="str">String value to be processed.</param>
            <param name="length">Maximum number of characters in the substring.</param>
            <returns>As much of the left-most substring as possible, up to <c>length</c> characters.</returns>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            QCI Extension:
            Indicates whether the current type inherits from <see cref="T:Nullable{}"/>.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>True if the type is nullable; otherwise, false.</returns>
        </member>
        <member name="M:System.TypeExtensions.IsNullAssignable(System.Type)">
            <summary>
            QCI Extension:
            Indicates whether the current type can be assigned a value of <value>null</value>.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>True if the type supports null assignment; otherwise, false.</returns>
        </member>
        <member name="M:System.TypeExtensions.NonNullableType(System.Type)">
            <summary>
            QCI Extension:
            For types that implement <see cref="T:Nullable{}"/>, the underlying type is returned.
            For typee that do not implement <see cref="T:Nullable{}"/>, the specified type is returned.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>The underlying non-nullable type; or the passed type if already not nullable.</returns>
        </member>
        <member name="M:System.TypeExtensions.GetMaxEnumValue(System.Type)">
            <summary>
            Determines the maximum integer value used by an enumerated type.
            NOTE: Only interger-based enumerated types are supported.
            </summary>
            <param name="enumType">Type to evaluate.</param>
            <returns>Maximum integer value used by the enumerated type.</returns>
        </member>
        <member name="T:System.ValueTypeExtensions">
            <summary>
            Extension methods for the value types.
            </summary>
        </member>
        <member name="M:System.ValueTypeExtensions.Between``1(``0,``0,``0)">
            <summary>
            QCI Extension:
            Determines if this value is within a specified minimum and maximum value range.
            The test is inclusive, meaning values equal to <c>min</c> or <c>max</c> are considered within the range.
            </summary>
            <typeparam name="T">Type of value to test.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="min">Minimum allowed value.</param>
            <param name="max">Maximum allowed value.</param>
            <returns>True if <c>value</c> is greater than or equal to <c>min</c> but less than or equal to <c>max</c>.</returns>
        </member>
        <member name="M:System.ValueTypeExtensions.CopyFast(System.Byte[])">
            <summary>
            QCI Extension:
            Creates an exact copy of this byte array using <see cref="T:System.Buffer"/> for fast/native byte copying.
            </summary>
            <param name="bytes">Array of bytes to be copied.</param>
            <returns>An exact copy of the byte array.</returns>
        </member>
        <member name="T:System.ServiceModel.WcfExtensionMethods">
            <summary>
            Provides extension methods for WCF classes.
            </summary>
        </member>
        <member name="M:System.ServiceModel.WcfExtensionMethods.GetIncomingCookies(System.ServiceModel.OperationContext)">
            <summary>
            Gets the imcoming cookies for this <see cref="T:System.ServiceModel.OperationContext"/> and reutrns them
            in a <see cref="T:System.Net.CookieContainer"/> assigned to the default URI (http://tempuri.org).
            </summary>
            <param name="oc"><see cref="T:System.ServiceModel.OperationContext"/> from which to get the cookies.</param>
            <returns>A <see cref="T:System.Net.CookieContainer"/> containing the incoming cookies for the operation context.</returns>
        </member>
        <member name="M:System.ServiceModel.WcfExtensionMethods.GetIncomingCookies(System.ServiceModel.OperationContext,System.String)">
            <summary>
            Gets the imcoming cookies for this <see cref="T:System.ServiceModel.OperationContext"/> and reutrns them
            in a <see cref="T:System.Net.CookieContainer"/> assigned to the specified URI.
            </summary>
            <param name="oc"><see cref="T:System.ServiceModel.OperationContext"/> from which to get the cookies.</param>
            <param name="uri">URI assigned to the cookies when placed in the returned <see cref="T:System.Net.CookieContainer"/>.</param>
            <returns>A <see cref="T:System.Net.CookieContainer"/> containing the incoming cookies for the operation context.</returns>
        </member>
        <member name="M:System.ServiceModel.WcfExtensionMethods.GetIncomingCookies(System.ServiceModel.OperationContext,System.Uri)">
            <summary>
            Gets the imcoming cookies for this <see cref="T:System.ServiceModel.OperationContext"/> and reutrns them
            in a <see cref="T:System.Net.CookieContainer"/> assigned to the specified URI.
            </summary>
            <param name="oc"><see cref="T:System.ServiceModel.OperationContext"/> from which to get the cookies.</param>
            <param name="uri">URI assigned to the cookies when placed in the returned <see cref="T:System.Net.CookieContainer"/>.</param>
            <returns>A <see cref="T:System.Net.CookieContainer"/> containing the incoming cookies for the operation context.</returns>
        </member>
        <member name="M:System.ServiceModel.WcfExtensionMethods.SetOutgoingCookies(System.ServiceModel.OperationContext,System.Net.CookieContainer)">
            <summary>
            Adds all cookies associated to the default URI (http://tempuri.org) to the outgoing message of this <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <param name="oc">The <see cref="T:System.ServiceModel.OperationContext"/> to be modified.</param>
            <param name="cookieContainer">The collection of cookies to assign.</param>
        </member>
        <member name="M:System.ServiceModel.WcfExtensionMethods.SetOutgoingCookies(System.ServiceModel.OperationContext,System.Net.CookieContainer,System.String)">
            <summary>
            Adds all cookies associated to the specified URI to the outgoing message of this <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <param name="oc">The <see cref="T:System.ServiceModel.OperationContext"/> to be modified.</param>
            <param name="cookieContainer">The collection of cookies to assign.</param>
            <param name="uri">URI of the cookies to be added to the <see cref="T:System.ServiceModel.OperationContext"/>.</param>
        </member>
        <member name="M:System.ServiceModel.WcfExtensionMethods.SetOutgoingCookies(System.ServiceModel.OperationContext,System.Net.CookieContainer,System.Uri)">
            <summary>
            Adds all cookies associated to the specified URI to the outgoing message of this <see cref="T:System.ServiceModel.OperationContext"/>.
            </summary>
            <param name="oc">The <see cref="T:System.ServiceModel.OperationContext"/> to be modified.</param>
            <param name="cookieContainer">The collection of cookies to assign.</param>
            <param name="uri">URI of the cookies to be added to the <see cref="T:System.ServiceModel.OperationContext"/>.</param>
        </member>
        <member name="M:System.ServiceModel.WcfExtensionMethods.GetCookieByName(System.Net.CookieContainer,System.String)">
            <summary>
            Gets a <see cref="T:Cookie"/> by name from the collecion of cookies associated to the default URI (http://tempuri.org).
            </summary>
            <param name="container">Container holding the desired cookie.</param>
            <param name="cookieName">Name of the desired cookie.</param>
            <returns>The cookie with the specified name; or null if the desired cookie could be found.</returns>
        </member>
        <member name="M:System.ServiceModel.WcfExtensionMethods.GetCookieByName(System.Net.CookieContainer,System.String,System.String)">
            <summary>
            Gets a <see cref="T:Cookie"/> by name from the collecion of cookies associated to a specified URI.
            </summary>
            <param name="container">Container holding the desired cookie.</param>
            <param name="cookieName">Name of the desired cookie.</param>
            <param name="uri">URI of the desired cookie.</param>
            <returns>The cookie with the specified name; or null if the desired cookie could be found.</returns>
        </member>
        <member name="M:System.ServiceModel.WcfExtensionMethods.GetCookieByName(System.Net.CookieContainer,System.String,System.Uri)">
            <summary>
            Gets a <see cref="T:Cookie"/> by name from the collecion of cookies associated to a specified URI.
            </summary>
            <param name="container">Container holding the desired cookie.</param>
            <param name="cookieName">Name of the desired cookie.</param>
            <param name="uri">URI of the desired cookie.</param>
            <returns>The cookie with the specified name; or null if the desired cookie could be found.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicQueryable">
            <summary>
            Implements extension methods for dynamically querying objects that implement the IQueryable&lt;T&gt; interface.
            
            These methods correspond to their System.Linq.Queryable counterparts, except that they operate on IQueryable 
            instead of IQueryable&lt;T&gt; and use strings instead of lambda expressions to express predicates, selectors, and 
            orderings. IQueryable is the non-generic base interface for IQueryable&lt;T&gt;, so the methods can be used even when 
            T isn’t known on beforehand (i.e., when the source of a query is dynamically determined).
            
            Note that because a dynamic predicate or ordering expression does not affect the result type, generic overloads 
            are provided for Where and OrderBy in order to preserve strong typing when possible.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            QCI Extension:
            Filters elements defined by this query based on a predicate.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <see cref="T:IQueryable`1" /> defining the elements to be ordered.</param>
            <param name="predicate">Predicate expression written in the expression language implemented by the Dynamic Expression API. Members of the current instance are automatically in scope and the instance itself can be referenced using the keyword 'it'.</param>
            <param name="values">Substitution values for placeholders referenced in the predicate expression string.</param>
            <returns>A new query that wraps the original query and adds additional filtering.</returns>
            <remarks>
            Identifiers of the form @X, where X is an integral number greater than or equal to zero, are used to denote 
            the substitution values within an expression string.
            
            For example:
            <code>
            customers.Where("Country = @0", country);
            </code>
            
            Casing is not significant for identifiers and keywords.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Where(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            QCI Extension:
            Filters elements defined by this query based on a predicate.
            </summary>
            <param name="source">An <see cref="T:IQueryable" /> defining the elements to be ordered.</param>
            <param name="predicate">Predicate expression written in the expression language implemented by the Dynamic Expression API. Members of the current instance are automatically in scope and the instance itself can be referenced using the keyword 'it'.</param>
            <param name="values">Substitution values for placeholders referenced in the predicate expression string.</param>
            <returns>A new query that wraps the original query and adds a filtering operation.</returns>
            <remarks>
            Identifiers of the form @X, where X is an integral number greater than or equal to zero, are used to denote 
            the substitution values within an expression string.
            
            For example:
            <code>
            customers.Where("Country = @0", country);
            </code>
            
            Casing is not significant for identifiers and keywords.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Select(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            QCI Extension:
            Projects each element defined by this query into a new form.
            </summary>
            <param name="source">Query defining the elements to be projected.</param>
            <param name="selector">Element selector expression written in the expression language implemented by the Dynamic Expression API. Members of the current instance are automatically in scope and the instance itself can be referenced using the keyword 'it'.</param>
            <param name="values">Substitution values for placeholders referenced in the selector expression string.</param>
            <returns>A new query that wraps the original query and adds an element projection operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            QCI Extension:
            Sorts the elements defined by this query in ascending order using a specified ordering expression.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">Query defining the elements to be ordered.</param>
            <param name="ordering">Element ordering expression written in the expression language implemented by the Dynamic Expression API. Members of the current instance are automatically in scope and the instance itself can be referenced using the keyword 'it'.</param>
            <param name="values">Substitution values for placeholders referenced in the ordering expression string.</param>
            <returns>A new query that wraps the original query and adds an element sorting operation.</returns>
            <remarks>
            The OrderBy method permits a sequence of orderings to be specified, separated by commas. Each ordering may 
            optionally be followed by asc or ascending to indicate ascending order, or desc or descending to indicate 
            descending order. The default order is ascending. 
            
            The example
            <code>
            products.OrderBy("Category.CategoryName, UnitPrice descending");
            </code>
            
            orders a sequence of products by ascending category name and, within each category, descending unit price.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="ordering" /> is null.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.OrderBy(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            QCI Extension:
            Sorts the elements defined by this query in ascending order using a ordering comparer expression.
            </summary>
            <param name="source">Query defining the elements to be ordered.</param>
            <param name="ordering">Element ordering expression written in the expression language implemented by the Dynamic Expression API. Members of the current instance are automatically in scope and the instance itself can be referenced using the keyword 'it'.</param>
            <param name="values">Substitution values for placeholders referenced in the ordering expression string.</param>
            <returns>A new query that wraps the original query and adds an element sorting operation.</returns>
            <remarks>
            The OrderBy method permits a sequence of orderings to be specified, separated by commas. Each ordering may 
            optionally be followed by asc or ascending to indicate ascending order, or desc or descending to indicate 
            descending order. The default order is ascending. 
            
            The example
            <code>
            products.OrderBy("Category.CategoryName, UnitPrice descending");
            </code>
            
            orders a sequence of products by ascending category name and, within each category, descending unit price.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="ordering" /> is null.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            QCI Extension:
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="source">Query defining the elements to be evaluated.</param>
            <param name="count">The number of elements to return.</param>
            <returns>A new query that wraps the original query and adds a 'take'operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is null.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            QCI Extension:
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="source">Query defining the elements to be evaluated.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A new query that wraps the original query and adds a 'skip' operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is null.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Object[])">
            <summary>
            QCI Extension:
            Groups elements defined by this query according to a specified key selector function and projects the elements for each group by using a specified element mapping function.
            </summary>
            <param name="source">Query defining the elements to be grouped.</param>
            <param name="keySelector">Key selector expression written in the expression language implemented by the Dynamic Expression API. Members of the current instance are automatically in scope and the instance itself can be referenced using the keyword 'it'.</param>
            <param name="elementSelector">Element selector/mapping expression written in the expression language implemented by the Dynamic Expression API. Members of the current instance are automatically in scope and the instance itself can be referenced using the keyword 'it'.</param>
            <param name="values">Substitution values for placeholders referenced in the key and element selector expression strings.</param>
            <returns>A new query that wraps the original query and adds a grouping transform.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Any(System.Linq.IQueryable)">
            <summary>
            QCI Extension:
            Determines whether this query contains any elements.
            </summary>
            <param name="source">The <see cref="T:IQueryable" /> to check for emptiness.</param>
            <returns>true if the query contains any elements; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is null.</exception>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicQueryable.Count(System.Linq.IQueryable)">
            <summary>
            QCI Extension:
            Returns the number of elements in this query.
            </summary>
            <param name="source">The <see cref="T:IQueryable" /> defining to the elements to be counted.</param>
            <returns>The number of elements defined by the query.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is null.</exception>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicClass">
            <summary>
            Represents the base class used for all dynamically generated data classes created by the <see cref="T:System.Linq.Dynamic.DynamicExpression"/> class.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicClass.ToString">
            <summary>
            Overridden to list all propeties and values for the instance of the inheriting type.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicProperty">
            <summary>
            Represents a property for a dynamically generated data class.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Data type of the property.</param>
        </member>
        <member name="P:System.Linq.Dynamic.DynamicProperty.Name">
            <summary>
            Name of this property.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.DynamicProperty.Type">
            <summary>
            Data type of this property.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicExpression">
            <summary>
            Defines utility methods for dynamically parsing and creating lambda expressions.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.Parse(System.Type,System.String,System.Object[])">
            <summary>
            Parses the given expression and returns an expression tree. 
            If the resultType parameter is non-null it specifies the required result type of the expression. The values 
            parameter supplies zero or more substitution values that may be referenced in the expression.
            </summary>
            <param name="resultType"></param>
            <param name="expression">String expression to be parsed, written in the expression language implemented by the Dynamic Expression API.</param>
            <param name="values">Substitution values for placeholders referenced in the expression string.</param>
            <returns>An expression tree representing the specified expression string.</returns>
            <remarks>
            Identifiers of the forms @X, where X is an integral number greater than or equal to zero, are used to denote 
            the substitution values within an expression string.
            
            For example:
            <code>
            customers.Where("Country = @0", country);
            </code>
            
            Casing is not significant for identifiers and keywords.
            </remarks>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.ParseLambda(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses a lambda expression with a single unnamed parameter of a specified argument type. 
            This method corresponds to calling the ParseLambda(ParameterExpression[], Type, string, params object[]) overload 
            with the 'parameters' argument containing a single <see cref="T:ParameterExpression"/> with an empty or null 'Name' property.
            </summary>
            <param name="argumentType">Type if the unnamed parameter.</param>
            <param name="resultType"></param>
            <param name="expression">String expression to be parsed, written in the expression language implemented by the Dynamic Expression API.</param>
            <param name="values">Substitution values for placeholders referenced in the expression string.</param>
            <returns>An instance of type Expression&lt;Func&lt;...&gt;&gt; representing the parsed expression.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.ParseLambda(System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses a lambda expression with the given parameters array and expression body and returns an expression instance representing the result.        
            </summary>
            <param name="parameters">Array of parameters used in the expression string.</param>
            <param name="resultType">Whene non-null, specifies the required result type for the expression.</param>
            <param name="expression">String expression to be parsed.</param>
            <param name="values">Substitution values for placeholders referenced in the expression string.</param>
            <returns>An instance of type Expression&lt;Func&lt;...&gt;&gt; representing the parsed expression.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.ParseLambda``2(System.String,System.Object[])">
            <summary>
            Parses a lambda expression with a single unnamed parameter of a specified argument type. 
            This method corresponds to calling the ParseLambda(ParameterExpression[], Type, string, params object[]) overload 
            with the 'parameters' argument containing a single <see cref="T:ParameterExpression"/> with an empty or null 'Name' property.
            </summary>
            <typeparam name="T">The type of the unnamed parameter.</typeparam>
            <typeparam name="S">The type of the result of the expression.</typeparam>
            <param name="expression">String expression to be parsed, written in the expression language implemented by the Dynamic Expression API.</param>
            <param name="values">Substitution values for placeholders referenced in the expression string.</param>
            <returns>An instance of type Expression&lt;Func&lt;T,S&gt;&gt; representing the parsed expression.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.CreateClass(System.Linq.Dynamic.DynamicProperty[])">
            <summary>
            Dynamically creates a new data class containing a given set of public properties and returns the System.Type 
            object for the newly created class. 
            If a data class with an identical sequence of properties has already been created, the System.Type object for 
            that class is returned.
            </summary>
            <param name="properties">The properties to be added to the new class.</param>
            <returns>The <see cref="T:System.Type"/> object for the newly created class.</returns>
            <remarks>
            Data classes are created in an in-memory assembly in the current application domain. All data classes inherit 
            from System.Linq.Dynamic.DynamicClass and are given automatically generated names that should be considered 
            private (the names will be unique within the application domain but not across multiple invocations of the application). 
            Note that once created, a data class stays in memory for the lifetime of the current application domain. 
            There is currently no way to unload a dynamically created data class.
            </remarks>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExpression.CreateClass(System.Collections.Generic.IEnumerable{System.Linq.Dynamic.DynamicProperty})">
            <summary>
            Dynamically creates a new data class containing a given set of public properties and returns the System.Type 
            object for the newly created class.
            If a data class with an identical sequence of properties has already been created, the System.Type object for 
            that class is returned.
            </summary>
            <param name="properties">The properties to be added to the new class.</param>
            <returns>The <see cref="T:System.Type"/> object for the newly created class.</returns>
            <remarks>
            Data classes are created in an in-memory assembly in the current application domain. All data classes inherit 
            from System.Linq.Dynamic.DynamicClass and are given automatically generated names that should be considered 
            private (the names will be unique within the application domain but not across multiple invocations of the application). 
            Note that once created, a data class stays in memory for the lifetime of the current application domain. 
            There is currently no way to unload a dynamically created data class.
            </remarks>
        </member>
        <member name="T:System.Linq.Dynamic.ParseException">
            <summary>
            Exception that is thrown when an error occures while parsing an expression.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.ParseException.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instnace of this class.
            </summary>
            <param name="message">Message describing this error.</param>
            <param name="position">Position of the error within the expression string.</param>
        </member>
        <member name="P:System.Linq.Dynamic.ParseException.Position">
            <summary>
            The character index in the expression string at which the parsing error occurred.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.ParseException.ToString">
            <summary>
            Overridden to return a string containing the message and position.
            </summary>
        </member>
        <member name="T:System.Net.IPAddressExtensions">
            <summary>
            Extension methods related to the <see cref="T:IPAddress"/> class.
            </summary>
        </member>
        <member name="M:System.Net.IPAddressExtensions.CompareTo(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares this <see cref="T:IPAddress"/> with the specified <see cref="T:IPAddress"/> and returns an integer that indicates 
            their relationship to one another in the sort order.
            </summary>
            <param name="self">The reference instance being compared.</param>
            <param name="value">The value to compare.</param>
            <returns>
            A 32-bit signed integer indicating the lexical relationship between the two comparands.
            Value Condition: 
            If less than zero, this <see cref="T:IPAddress"/> is less than the specified <see cref="T:IPAddress"/>. 
            If zero, this <see cref="T:IPAddress"/> equals the specified <see cref="T:IPAddress"/>. 
            if greater than zero, this <see cref="T:IPAddress"/> is greater than the specified <see cref="T:IPAddress"/>.
            </returns>
        </member>
    </members>
</doc>
